<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[笨跑的一刀]]></title>
  <link href="http://yidao620c.github.io/atom.xml" rel="self"/>
  <link href="http://yidao620c.github.io/"/>
  <updated>2015-04-07T13:02:56+08:00</updated>
  <id>http://yidao620c.github.io/</id>
  <author>
    <name><![CDATA[熊能]]></name>
    <email><![CDATA[yidao620@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[servlet filter详解]]></title>
    <link href="http://yidao620c.github.io/blog/20150406/servlet-filter.html"/>
    <updated>2015-04-06T21:08:25+08:00</updated>
    <id>http://yidao620c.github.io/blog/20150406/servlet-filter</id>
    <content type="html"><![CDATA[<p>在写一个springmvc项目中想对用户的请求进行拦截，只有登录用户才能访问资源。这时候可以使用到SpringMVC的拦截器Intercepter，但是这个只能局限在SpringMVC中使用，如果想更加通用一点，最好使用Servlet Filter实现这个需求。</p>

<p>本文将通过几个实际的例子展示下Servlet中的Filter的使用。</p>

<p>1). 我们为什么需要使用Filter？</p>

<p>通常我们会使用session来保存登录用户的信息，通过从session中取出保存的属性值来判断用户是否登录，但是如果我们有大量的请求方法，每个人方法中都这样去判断就会有很多重复代码，将来我们想改动下逻辑，那得改动所有的请求方法实现，所以这个是不可取的。</p>

<p>这时候就是使用Servlet Filter的时候了，它是可插拔的，对于普通的action方法来讲是透明的。它会在执行其他方法之前或将结果返回给客户端之前来执行其他逻辑。</p>

<p>以下几种场景下我们会使用到Servlet Filter：</p>

<ul>
  <li>将请求的参数写入日志文件</li>
  <li>对于资源的访问进行统一的授权与验证</li>
  <li>在请求到达实际Servlet之前格式化请求内容或请求头</li>
  <li>压缩返回数据后发送给客户端</li>
  <li>修改返回内容，增加一些cookie、header等信息<!--more--></li>
</ul>

<p>前面提到过，Servlet是可插拔的，可以通过在web.xml中配置是否使用。如果我们定义了多个Filter，就会形成一个过滤器链。
通过实现接口javax.servlet.Filter来创建一个过过滤器。</p>

<p>2).  Filter接口</p>

<p>Filter接口包含了三个跟生命周期有关的方法，并且由Servlet容器来管理。它们分别是：</p>
]]></content>
  </entry>
  
</feed>
