<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[笨跑的一刀]]></title>
  <link href="http://yidao620c.github.io/atom.xml" rel="self"/>
  <link href="http://yidao620c.github.io/"/>
  <updated>2015-06-05T10:39:02+08:00</updated>
  <id>http://yidao620c.github.io/</id>
  <author>
    <name><![CDATA[熊能]]></name>
    <email><![CDATA[yidao620@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[开心一刻]]></title>
    <link href="http://yidao620c.github.io/blog/20200815/joke.html"/>
    <updated>2020-08-15T14:02:04+08:00</updated>
    <id>http://yidao620c.github.io/blog/20200815/joke</id>
    <content type="html"><![CDATA[<p>乌龟生病了，他的朋友蜗牛帮他去买药，走了三天没回来。乌龟生气的说：“这个小蜗牛也太慢啦！”
话音刚落，蜗牛开门说：“你要是再说我，我可不去了啊。”</p>

<p>我女朋友哪都好，就是路痴，这都多少年了还没找到我。</p>

<p>一程序员向一暗恋好久的MM表白，MM拒绝了，程序员含着泪问MM：“那你把我当什么？”
MM：“真人版Windows优化大师！”</p>

<p>十年前，男：我就抱抱不干什么。女：不行！ 十年后，男：我就抱抱不干什么。女：不行！<!--more--></p>

<p>北体大运动会一哥们跑1500。最后一名。突然他女神跑上主席台。大喊XXX你要是能跑第一我当你女朋友。
之后除了他以外的所有运动员都停下了。只有他一个人在跑。每当他超过一个人。
那个被超过的人就会说：“兄弟哥们只能帮你这些了”。之后他俩就在一起了。我喜欢这个故事，这就是体育！</p>

<p>一老汉赶驴车进城，遇到一个妇女搭车，路上妇女说：大哥你看天真热，让驴吃点草，
咱俩去小树林凉快一会，一路凉快了十来次！眼看快到城了，妇女说：大哥今天遇见你也是缘份，
不知道何时在见，让驴在啃会草，咱俩在凉快一次吧？
老汉口吐白沫的说：妹子你看这样行不行，我去啃会草，你跟驴凉快凉快行不？</p>

<p>在一个烟雨蒙蒙的清晨，你站在窗前，心里十分惆怅，感慨万千。
曾经失望过，曾经失落过，但一切的曾经都代替不了现在的行走，活在当下，
曾经终究不是未来。水一滴滴从屋檐自由落下，你的思绪也随之荡漾开。
你突然发现它通过屋檐下高为1.4m的窗户时用时0.2s，空气阻力不计，求窗户离屋檐的距离。</p>

<p>研表究明，汉字序顺并不定一影阅响读。比如当你看完这句话后，才发这现里的字全是都乱的。</p>

<p>昨天晚上无聊跑到楼顶，看见个姑娘站在天台！穿着蛮性感，居然要跳楼！我看可惜了就想劝劝她别轻生，
可她不听劝！于是我想也太可惜了。就问她，反正你要死，就临死前做下好事吧。她问我什么事？
我说反正你都无所谓了，死前让我舒服舒服下吧！她居然骂我变态！
我看她居然骂我，就说：那你快点跳吧，我在楼下等你！反正到时也可以舒服！
于是我救了她！</p>

<p>一天，打电话给心仪的女孩，约她出来吃饭，女孩答应了，吃完饭，女孩问我接下来去哪呢，
我说带身份证了么？女孩娇羞的点点头，于是我转身犀利的走向了网吧。</p>

<p>一天，妻子和丈夫一起上街，裙子突然被大风吹起来，
妻子惊慌地按着扬起的裙子大喊：“天啊！春光外泄！”丈夫白了她一眼说：“拜托！是家丑外扬吧！”</p>

<p>有一位美国数学家最怕坐飞机。他研究了近20年的统计数据，发现恐怖分子带炸弹上飞机的几率非常低。
但他还是不放心，又做进一步研究，发现两个人同时带炸弹上飞机的几率为零，
于是他坐飞机都自己携带一枚炸弹。</p>

<p>强烈要求广电总局禁播红高粱，我家今年种了几十亩高粱，本以为今年有个好收成，自从电视剧红高粱热播后，
我家地里的高粱每天成片成片的倒，原因现在都还找不到…</p>

<p>天下武功，唯快不破。 <img src="http://yidaospace.qiniudn.com/rabbit.gif" alt="" /></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[python函数装饰器详解]]></title>
    <link href="http://yidao620c.github.io/blog/20150601/python-decorator.html"/>
    <updated>2015-06-01T10:06:22+08:00</updated>
    <id>http://yidao620c.github.io/blog/20150601/python-decorator</id>
    <content type="html"><![CDATA[<h3 id="section">装饰器简介</h3>
<p>python有着强大的表达式语法和函数特性，其中一个我的最爱便是装饰器。
在设计模式中，装饰器能够在不使用子类的情况下动态的修改函数、方法或类的功能。</p>

<p>当你需要扩展某个函数的功能却不想直接修改这个函数的时候，装饰器就可以派上用场了。
实现装饰器模式有很多种方法，但是python通过强大的语法支持来让这个变得相当容易。</p>

<p>在这篇文章中我将深入讲解Python的函数装饰器，并通过一系列的源码示例来彻底讲清楚这个东西。
所有例子都在Python2.7下运行通过，不过只需要稍作改变就可以运行在Python3上了，
甚至我猜测什么都不用改变都可以的，读者可以自己去试试。</p>

<p>本质上来讲，装饰器是以包装器形式工作的，其实就是在执行目标函数之前或之后加入自己的逻辑，
而不需要改变目标函数本身就可以增强它的功能，也就是说装饰了它。<!--more--></p>

<h3 id="section-1">你需要知道的函数</h3>
<p>在深入讨论之前，有一些基本的概念需要讲明清楚。
在Python中，函数是一等公民，它们就是对象，因此我们可以使用它来做很多事。</p>

<p>1.把函数赋值给某个变量：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">greet</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
</span><span class="line">    <span class="k">return</span> <span class="s">&quot;hello &quot;</span><span class="o">+</span><span class="n">name</span>
</span><span class="line">
</span><span class="line"><span class="n">greet_someone</span> <span class="o">=</span> <span class="n">greet</span>
</span><span class="line"><span class="k">print</span> <span class="n">greet_someone</span><span class="p">(</span><span class="s">&quot;John&quot;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c"># Outputs: hello John</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>2.在某个函数内部定义另外一个函数：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">greet</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">get_message</span><span class="p">():</span>
</span><span class="line">        <span class="k">return</span> <span class="s">&quot;Hello &quot;</span>
</span><span class="line">
</span><span class="line">    <span class="n">result</span> <span class="o">=</span> <span class="n">get_message</span><span class="p">()</span><span class="o">+</span><span class="n">name</span>
</span><span class="line">    <span class="k">return</span> <span class="n">result</span>
</span><span class="line">
</span><span class="line"><span class="k">print</span> <span class="n">greet</span><span class="p">(</span><span class="s">&quot;John&quot;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c"># Outputs: Hello John</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>3.函数可以被当做参数传递给另外一个函数：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">greet</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
</span><span class="line">   <span class="k">return</span> <span class="s">&quot;Hello &quot;</span> <span class="o">+</span> <span class="n">name</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">call_func</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
</span><span class="line">    <span class="n">other_name</span> <span class="o">=</span> <span class="s">&quot;John&quot;</span>
</span><span class="line">    <span class="k">return</span> <span class="n">func</span><span class="p">(</span><span class="n">other_name</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="k">print</span> <span class="n">call_func</span><span class="p">(</span><span class="n">greet</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c"># Outputs: Hello John</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>4.函数返回值可以是其他函数：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">compose_greet_func</span><span class="p">():</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">get_message</span><span class="p">():</span>
</span><span class="line">        <span class="k">return</span> <span class="s">&quot;Hello there!&quot;</span>
</span><span class="line">
</span><span class="line">    <span class="k">return</span> <span class="n">get_message</span>
</span><span class="line">
</span><span class="line"><span class="n">greet</span> <span class="o">=</span> <span class="n">compose_greet_func</span><span class="p">()</span>
</span><span class="line"><span class="k">print</span> <span class="n">greet</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="c"># Outputs: Hello there!</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>5.内部函数可以访问包含它的函数的局部变量：</p>

<p>其实就是我们所说的闭包，在构建装饰器的时候这是一个非常有用的模式。
另外还要注意，Python只允许读取外部变量而不允许修改。</p>

<p>观察一下下面的代码，
注意我们是如何通过修改上面实例代码来读取外部函数中的name参数值并返回一个新的函数的。</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">compose_greet_func</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">get_message</span><span class="p">():</span>
</span><span class="line">        <span class="k">return</span> <span class="s">&quot;Hello there &quot;</span><span class="o">+</span><span class="n">name</span><span class="o">+</span><span class="s">&quot;!&quot;</span>
</span><span class="line">
</span><span class="line">    <span class="k">return</span> <span class="n">get_message</span>
</span><span class="line">
</span><span class="line"><span class="n">greet</span> <span class="o">=</span> <span class="n">compose_greet_func</span><span class="p">(</span><span class="s">&quot;John&quot;</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span> <span class="n">greet</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="c"># Outputs: Hello there John!</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-2">构造装饰器</h3>
<p>函数装饰器就是已存在函数的一个包装器。我们把上面的这些结合起来就能构建一个装饰器了。</p>

<p>下面例子中我们先构造一个函数来用p标签包装其他函数返回的一个字符串。</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">get_text</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
</span><span class="line">   <span class="k">return</span> <span class="s">&quot;lorem ipsum, {0} dolor sit amet&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">p_decorate</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
</span><span class="line">   <span class="k">def</span> <span class="nf">func_wrapper</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
</span><span class="line">       <span class="k">return</span> <span class="s">&quot;&lt;p&gt;{0}&lt;/p&gt;&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">func</span><span class="p">(</span><span class="n">name</span><span class="p">))</span>
</span><span class="line">   <span class="k">return</span> <span class="n">func_wrapper</span>
</span><span class="line">
</span><span class="line"><span class="n">my_get_text</span> <span class="o">=</span> <span class="n">p_decorate</span><span class="p">(</span><span class="n">get_text</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="k">print</span> <span class="n">my_get_text</span><span class="p">(</span><span class="s">&quot;John&quot;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c"># &lt;p&gt;Outputs lorem ipsum, John dolor sit amet&lt;/p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这是我们的第一个装饰器——一个增强其他函数功能并返回新函数的函数。
为了让get_text函数被p_decorate装饰，我们只需要将get_text作为参数传给后者，
并将结果赋值给一个变量，然后就可以对这个变量函数调用就能实现效果了。</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">get_text</span> <span class="o">=</span> <span class="n">p_decorate</span><span class="p">(</span><span class="n">get_text</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="k">print</span> <span class="n">get_text</span><span class="p">(</span><span class="s">&quot;John&quot;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c"># Outputs lorem ipsum, John dolor sit amet</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>主要原来的函数有一个name参数，那么我们调用的时候将这个参数传递给装饰器函数就行了。</p>

<h3 id="python">Python的装饰器语法</h3>
<p>Python通过一些语法糖让创建和使用装饰器变得相当简单。
我们并不需要使用语句<code>get_text = p_decorator(get_text)</code>来装饰get_text。
有一个快捷方式可以做到，它会在被装饰函数前面加一层装饰函数。装饰器的名字需要使用@前缀。</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">p_decorate</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
</span><span class="line">   <span class="k">def</span> <span class="nf">func_wrapper</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
</span><span class="line">       <span class="k">return</span> <span class="s">&quot;&lt;p&gt;{0}&lt;/p&gt;&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">func</span><span class="p">(</span><span class="n">name</span><span class="p">))</span>
</span><span class="line">   <span class="k">return</span> <span class="n">func_wrapper</span>
</span><span class="line">
</span><span class="line"><span class="nd">@p_decorate</span>
</span><span class="line"><span class="k">def</span> <span class="nf">get_text</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
</span><span class="line">   <span class="k">return</span> <span class="s">&quot;lorem ipsum, {0} dolor sit amet&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="k">print</span> <span class="n">get_text</span><span class="p">(</span><span class="s">&quot;John&quot;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c"># Outputs &lt;p&gt;lorem ipsum, John dolor sit amet&lt;/p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>现在我们再考虑下利用2个其他的函数来装饰我们的get_text函数，在其输出结果上添加一个div和strong标签。</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">p_decorate</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
</span><span class="line">   <span class="k">def</span> <span class="nf">func_wrapper</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
</span><span class="line">       <span class="k">return</span> <span class="s">&quot;&lt;p&gt;{0}&lt;/p&gt;&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">func</span><span class="p">(</span><span class="n">name</span><span class="p">))</span>
</span><span class="line">   <span class="k">return</span> <span class="n">func_wrapper</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">strong_decorate</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">func_wrapper</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
</span><span class="line">        <span class="k">return</span> <span class="s">&quot;&lt;strong&gt;{0}&lt;/strong&gt;&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">func</span><span class="p">(</span><span class="n">name</span><span class="p">))</span>
</span><span class="line">    <span class="k">return</span> <span class="n">func_wrapper</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">div_decorate</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">func_wrapper</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
</span><span class="line">        <span class="k">return</span> <span class="s">&quot;&lt;div&gt;{0}&lt;/div&gt;&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">func</span><span class="p">(</span><span class="n">name</span><span class="p">))</span>
</span><span class="line">    <span class="k">return</span> <span class="n">func_wrapper</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>如果我们使用原来的语法，那么就得这么写：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">get_text</span> <span class="o">=</span> <span class="n">div_decorate</span><span class="p">(</span><span class="n">p_decorate</span><span class="p">(</span><span class="n">strong_decorate</span><span class="p">(</span><span class="n">get_text</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>但是在python中，你就可以这样来定义了：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="nd">@div_decorate</span>
</span><span class="line"><span class="nd">@p_decorate</span>
</span><span class="line"><span class="nd">@strong_decorate</span>
</span><span class="line"><span class="k">def</span> <span class="nf">get_text</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
</span><span class="line">   <span class="k">return</span> <span class="s">&quot;lorem ipsum, {0} dolor sit amet&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="k">print</span> <span class="n">get_text</span><span class="p">(</span><span class="s">&quot;John&quot;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c"># Outputs &lt;div&gt;&lt;p&gt;&lt;strong&gt;lorem ipsum, John dolor sit amet&lt;/strong&gt;&lt;/p&gt;&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>上面需要注意的是装饰器的顺序，如果顺序不同，输出结果也会不一样。</p>

<h3 id="section-3">装饰方法</h3>
<p>在python中，其实方法就是第一个参数为当前对象的引用的函数而已。
我们同样能够给方法构造装饰器，只需要将self参数放到包装函数中。</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">p_decorate</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
</span><span class="line">   <span class="k">def</span> <span class="nf">func_wrapper</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">       <span class="k">return</span> <span class="s">&quot;&lt;p&gt;{0}&lt;/p&gt;&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">func</span><span class="p">(</span><span class="bp">self</span><span class="p">))</span>
</span><span class="line">   <span class="k">return</span> <span class="n">func_wrapper</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">Person</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="s">&quot;John&quot;</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">family</span> <span class="o">=</span> <span class="s">&quot;Doe&quot;</span>
</span><span class="line">
</span><span class="line">    <span class="nd">@p_decorate</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">get_fullname</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">name</span><span class="o">+</span><span class="s">&quot; &quot;</span><span class="o">+</span><span class="bp">self</span><span class="o">.</span><span class="n">family</span>
</span><span class="line">
</span><span class="line"><span class="n">my_person</span> <span class="o">=</span> <span class="n">Person</span><span class="p">()</span>
</span><span class="line"><span class="k">print</span> <span class="n">my_person</span><span class="o">.</span><span class="n">get_fullname</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>一个更好的做法是改造我们的装饰器使他们可以作用于函数以及类方法。
可以将*args和**kwargs作为包装器的参数，然后它就能接受任意数量的位置参数和关键字参数了。</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">p_decorate</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
</span><span class="line">   <span class="k">def</span> <span class="nf">func_wrapper</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span><span class="line">       <span class="k">return</span> <span class="s">&quot;&lt;p&gt;{0}&lt;/p&gt;&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">))</span>
</span><span class="line">   <span class="k">return</span> <span class="n">func_wrapper</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">Person</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="s">&quot;John&quot;</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">family</span> <span class="o">=</span> <span class="s">&quot;Doe&quot;</span>
</span><span class="line">
</span><span class="line">    <span class="nd">@p_decorate</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">get_fullname</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">name</span><span class="o">+</span><span class="s">&quot; &quot;</span><span class="o">+</span><span class="bp">self</span><span class="o">.</span><span class="n">family</span>
</span><span class="line">
</span><span class="line"><span class="n">my_person</span> <span class="o">=</span> <span class="n">Person</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="k">print</span> <span class="n">my_person</span><span class="o">.</span><span class="n">get_fullname</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-4">给装饰器传递参数</h3>
<p>回顾下上面的例子，你会发现例子中的装饰器太过冗余了。
3个装饰器(div_decorate,p_decorate, strong_decorate)拥有相同功能，只是使用了不同的标签包装而已。</p>

<p>我们可以做得更好，为什么不使用一种更加通用的方式，将标签作为参数传递进来呢？</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">tags</span><span class="p">(</span><span class="n">tag_name</span><span class="p">):</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">tags_decorator</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
</span><span class="line">        <span class="k">def</span> <span class="nf">func_wrapper</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
</span><span class="line">            <span class="k">return</span> <span class="s">&quot;&lt;{0}&gt;{1}&lt;/{0}&gt;&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">tag_name</span><span class="p">,</span> <span class="n">func</span><span class="p">(</span><span class="n">name</span><span class="p">))</span>
</span><span class="line">        <span class="k">return</span> <span class="n">func_wrapper</span>
</span><span class="line">    <span class="k">return</span> <span class="n">tags_decorator</span>
</span><span class="line">
</span><span class="line"><span class="nd">@tags</span><span class="p">(</span><span class="s">&quot;p&quot;</span><span class="p">)</span>
</span><span class="line"><span class="k">def</span> <span class="nf">get_text</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
</span><span class="line">    <span class="k">return</span> <span class="s">&quot;Hello &quot;</span><span class="o">+</span><span class="n">name</span>
</span><span class="line">
</span><span class="line"><span class="k">print</span> <span class="n">get_text</span><span class="p">(</span><span class="s">&quot;John&quot;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c"># Outputs &lt;p&gt;Hello John&lt;/p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-5">调试被装饰函数</h3>
<p>最后当我们调试被装饰函数时会发现它的名字、模块和文档字符串都发生了改变。</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">print</span> <span class="n">get_text</span><span class="o">.</span><span class="n">__name__</span>
</span><span class="line"><span class="c"># Outputs func_wrapper</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>我们期望的输出应该是get_text，get_text的__name__、<strong>doc</strong> 和 __module__已经被包装函数覆盖了。</p>

<h3 id="functools">使用functools来解决</h3>
<p>幸运的是python2.5版本以上有了一个functools包可以来解决这个问题。
只需要简单在包装函数上标注@wrap标签即可。</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">from</span> <span class="nn">functools</span> <span class="kn">import</span> <span class="n">wraps</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">tags</span><span class="p">(</span><span class="n">tag_name</span><span class="p">):</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">tags_decorator</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
</span><span class="line">        <span class="nd">@wraps</span><span class="p">(</span><span class="n">func</span><span class="p">)</span>
</span><span class="line">        <span class="k">def</span> <span class="nf">func_wrapper</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
</span><span class="line">            <span class="k">return</span> <span class="s">&quot;&lt;{0}&gt;{1}&lt;/{0}&gt;&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">tag_name</span><span class="p">,</span> <span class="n">func</span><span class="p">(</span><span class="n">name</span><span class="p">))</span>
</span><span class="line">        <span class="k">return</span> <span class="n">func_wrapper</span>
</span><span class="line">    <span class="k">return</span> <span class="n">tags_decorator</span>
</span><span class="line">
</span><span class="line"><span class="nd">@tags</span><span class="p">(</span><span class="s">&quot;p&quot;</span><span class="p">)</span>
</span><span class="line"><span class="k">def</span> <span class="nf">get_text</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
</span><span class="line">    <span class="sd">&quot;&quot;&quot;returns some text&quot;&quot;&quot;</span>
</span><span class="line">    <span class="k">return</span> <span class="s">&quot;Hello &quot;</span><span class="o">+</span><span class="n">name</span>
</span><span class="line">
</span><span class="line"><span class="k">print</span> <span class="n">get_text</span><span class="o">.</span><span class="n">__name__</span> <span class="c"># get_text</span>
</span><span class="line"><span class="k">print</span> <span class="n">get_text</span><span class="o">.</span><span class="n">__doc__</span> <span class="c"># returns some text</span>
</span><span class="line"><span class="k">print</span> <span class="n">get_text</span><span class="o">.</span><span class="n">__module__</span> <span class="c"># __main__</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>从结果可以看出get_text函数的属性都恢复正常了。</p>

<h3 id="section-6">哪里使用装饰器</h3>
<p>这篇文章中的例子相对来讲是比较简单的。它能给你的程序带来很大的方便。
一般来讲，装饰器用在需要扩展某个函数行为而又不想改变这个函数本身内容的时候。</p>

<p>我建议你查阅一下Python Decorator库来获取更多非常有用的装饰器。</p>

<h3 id="section-7">更多阅读资源</h3>
<p>下面是一个值得去查看的关于装饰器的其他资源列表：</p>

<ul>
  <li><a href="https://wiki.python.org/moin/PythonDecorators#What_is_a_Decorator">什么是装饰器?</a></li>
  <li><a href="http://www.artima.com/weblogs/viewpost.jsp?thread=240808">Decorators I: Python装饰器入门</a></li>
  <li><a href="http://www.artima.com/weblogs/viewpost.jsp?thread=240845">Python Decorators II: 装饰器参数</a></li>
  <li><a href="http://www.artima.com/weblogs/viewpost.jsp?thread=241209">Python Decorators III: 一个基于装饰器的构建系统</a></li>
  <li><a href="http://www.amazon.com/gp/product/B006ZHJSIM/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=B006ZHJSIM&amp;linkCode=as2&amp;tag=thcosh00-20">Python装饰器指南 Matt Harrison</a></li>
</ul>

<p>到此为止Python装饰器概率已经介绍完了。我希望你能从中受益，
如果你哈有任何的建议或问题，可以在评论中提出来。祝您编程快乐！</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[centos6上安装Hadoop和HBase]]></title>
    <link href="http://yidao620c.github.io/blog/20150527/hadoop-hbase.html"/>
    <updated>2015-05-27T14:01:57+08:00</updated>
    <id>http://yidao620c.github.io/blog/20150527/hadoop-hbase</id>
    <content type="html"><![CDATA[<h3 id="section">安装前的准备</h3>
<p>操作系统：CentOS 6.5 64位</p>

<p>在linux环境安装Hadoop之前，我们需要使用到ssh，所以要先安装ssh，并且创建一个hadoop用户</p>

<p><strong>备注：</strong> 下面所有的命令中，以#开头的表示是root用户，以$开头的是普通用户</p>

<h4 id="ssh">安装SSH</h4>
<p>先切换到root用户，执行下列步骤</p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">rpm -qa |grep ssh  #检查是否装了SSH包
</span><span class="line">yum install openssh-server  #安装ssh
</span><span class="line">chkconfig --list sshd #检查SSHD是否设置为开机启动
</span><span class="line">chkconfig --level 2345 sshd on  #如果没设置启动就设置下.
</span><span class="line">service sshd restart  #重新启动</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="hadoop--more--">创建hadoop用户<!--more--></h4>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ su
</span><span class="line">password:
</span><span class="line"># useradd hadoop
</span><span class="line"># passwd hadoop
</span><span class="line">New passwd:
</span><span class="line">Retype new passwd</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="pub-key">生成pub-key</h4>
<p>切换到hadoop用户后，执行</p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ ssh-keygen -t rsa
</span><span class="line">$ cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys
</span><span class="line">$ chmod 0600 ~/.ssh/authorized_keys</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>然后确认下是否能正常使用ssh连接</p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">ssh localhost</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="jdk17">安装JDK1.7</h3>

<p>进入oracle官网<a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html">http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html</a></p>

<p>下载jdk-7u79-linux-x64.gz，然后执行：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ tar zxf jdk-7u79-linux-x64.gz
</span><span class="line">$ ls
</span><span class="line">jdk1.7.0_79 jdk-7u79-linux-x64.gz
</span><span class="line">$ su
</span><span class="line">password:
</span><span class="line"># mv jdk1.7.0_79 /usr/local/
</span><span class="line"># exit</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>打开~/.bashrc文件，写入JAVA_HOME环境变量</p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">export JAVA_HOME=/usr/local/jdk1.7.0_79
</span><span class="line">export PATH= $PATH:$JAVA_HOME/bin</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>保存刷新下：<code>$ source ~/.bashrc</code></p>

<p>切换到root用户，然后执行下面的语句确保JDK版本更改完成</p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># alternatives --install /usr/bin/java java /usr/local/jdk1.7.0_79/bin/java 2
</span><span class="line"># alternatives --install /usr/bin/javac javac /usr/local/jdk1.7.0_79/bin/javac 2
</span><span class="line"># alternatives --install /usr/bin/jar jar /usr/local/jdk1.7.0_79/bin/jar 2
</span><span class="line"># alternatives --set java /usr/local/jdk1.7.0_79/bin/java
</span><span class="line"># alternatives --set javac /usr/local/jdk1.7.0_79/bin/javac
</span><span class="line"># alternatives --set jar /usr/local/jdk1.7.0_79/bin/jar</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>最后执行下：<code>java -version</code>看看是不是已经成功安装了JDK7</p>

<h3 id="hadoop">安装配置Hadoop</h3>

<h4 id="hadoophadoop260httpapachefayeacomhadoopcommonstablehadoop-260targz">下载Hadoophadoop2.6.0下载地址：<a href="http://apache.fayea.com/hadoop/common/stable/hadoop-2.6.0.tar.gz">http://apache.fayea.com/hadoop/common/stable/hadoop-2.6.0.tar.gz</a></h4>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ su
</span><span class="line">password:
</span><span class="line"># cd /usr/local
</span><span class="line"># wget http://apache.fayea.com/hadoop/common/stable/hadoop-2.6.0.tar.gz
</span><span class="line"># tar xzf hadoop-2.6.0.tar.gz
</span><span class="line"># mv hadoop-2.6.0 hadoop
</span><span class="line"># exit</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>hadoop有很多种模式，本篇我们演示的是伪分布式模式，包括后面的HBase也选择这种模式。</p>

<h4 id="hadoop-1">配置Hadoop环境</h4>
<p>第一步，配置环境变量</p>

<p>打开~/.bashrc文件，写入如下内容</p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class=""><span class="line">export HADOOP_HOME=/usr/local/hadoop
</span><span class="line">export HADOOP_MAPRED_HOME=$HADOOP_HOME
</span><span class="line">export HADOOP_COMMON_HOME=$HADOOP_HOME
</span><span class="line">export HADOOP_HDFS_HOME=$HADOOP_HOME
</span><span class="line">export YARN_HOME=$HADOOP_HOME
</span><span class="line">export HADOOP_COMMON_LIB_NATIVE_DIR=$HADOOP_HOME/lib/native
</span><span class="line">export PATH=$PATH:$HADOOP_HOME/sbin:$HADOOP_HOME/bin
</span><span class="line">export HADOOP_INSTALL=$HADOOP_HOME</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>然后应用设置</p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ source ~/.bashrc</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>第二步，hadoop配置文件</p>

<p>hadoop的配置文件都放在”$HADOOP_HOME/etc/hadoop”目录中，
你可以根据自己的需要来修改它们。</p>

<p>在此之前，还需要修改下hadoop-env.sh，更改其中的JAVA_HOME变量</p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">vim /usr/local/hadoop/etc/hadoop/hadoop-env.sh</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>然后修改JAVA_HOME为真实的目录</p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">export JAVA_HOME=/usr/local/jdk1.7.0_79</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>接下来我们去到hadoop的配置文件目录</p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ cd $HADOOP_HOME/etc/hadoop</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>1. 首先打开core-site.xml，写入如下配置</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="xml"><span class="line"><span class="nt">&lt;configuration&gt;</span>
</span><span class="line">    <span class="nt">&lt;property&gt;</span>
</span><span class="line">        <span class="nt">&lt;name&gt;</span>hadoop.tmp.dir<span class="nt">&lt;/name&gt;</span>
</span><span class="line">        <span class="nt">&lt;value&gt;</span>/usr/local/hadoop/tmp<span class="nt">&lt;/value&gt;</span>
</span><span class="line">    <span class="nt">&lt;/property&gt;</span>
</span><span class="line">    <span class="nt">&lt;property&gt;</span>
</span><span class="line">        <span class="nt">&lt;name&gt;</span>fs.defaultFS<span class="nt">&lt;/name&gt;</span>
</span><span class="line">        <span class="nt">&lt;value&gt;</span>hdfs://localhost:9000<span class="nt">&lt;/value&gt;</span>
</span><span class="line">    <span class="nt">&lt;/property&gt;</span>
</span><span class="line"><span class="nt">&lt;/configuration&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>2. 然后打开hdfs-site.xml，写入如下配置</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="xml"><span class="line"><span class="nt">&lt;configuration&gt;</span>
</span><span class="line">    <span class="nt">&lt;property&gt;</span>
</span><span class="line">        <span class="nt">&lt;name&gt;</span>dfs.replication<span class="nt">&lt;/name&gt;</span>
</span><span class="line">        <span class="nt">&lt;value&gt;</span>1<span class="nt">&lt;/value&gt;</span>
</span><span class="line">    <span class="nt">&lt;/property&gt;</span>
</span><span class="line">    <span class="nt">&lt;property&gt;</span>
</span><span class="line">        <span class="nt">&lt;name&gt;</span>dfs.name.dir<span class="nt">&lt;/name&gt;</span>
</span><span class="line">        <span class="nt">&lt;value&gt;</span>file:///home/hadoop/hadoopinfra/hdfs/namenode<span class="nt">&lt;/value&gt;</span>
</span><span class="line">    <span class="nt">&lt;/property&gt;</span>
</span><span class="line">    <span class="nt">&lt;property&gt;</span>
</span><span class="line">        <span class="nt">&lt;name&gt;</span>dfs.data.dir<span class="nt">&lt;/name&gt;</span>
</span><span class="line">        <span class="nt">&lt;value&gt;</span>file:///home/hadoop/hadoopinfra/hdfs/datanode<span class="nt">&lt;/value&gt;</span>
</span><span class="line">    <span class="nt">&lt;/property&gt;</span>
</span><span class="line">    <span class="nt">&lt;property&gt;</span>
</span><span class="line">        <span class="nt">&lt;name&gt;</span>dfs.permissions<span class="nt">&lt;/name&gt;</span>
</span><span class="line">        <span class="nt">&lt;value&gt;</span>false<span class="nt">&lt;/value&gt;</span>
</span><span class="line">    <span class="nt">&lt;/property&gt;</span>
</span><span class="line"><span class="nt">&lt;/configuration&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>上面的文件夹需要我们手动来创建，那么我们创建下就行了</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="xml"><span class="line">$ mkdir -p /home/hadoop/hadoopinfra/hdfs/namenode
</span><span class="line">$ mkdir -p /home/hadoop/hadoopinfra/hdfs/datanode
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>3. 然后打开yarn-site.xml文件，写入如下配置</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="xml"><span class="line"><span class="nt">&lt;configuration&gt;</span>
</span><span class="line">    <span class="nt">&lt;property&gt;</span>
</span><span class="line">        <span class="nt">&lt;name&gt;</span>yarn.nodemanager.aux-services<span class="nt">&lt;/name&gt;</span>
</span><span class="line">        <span class="nt">&lt;value&gt;</span>mapreduce_shuffle<span class="nt">&lt;/value&gt;</span>
</span><span class="line">    <span class="nt">&lt;/property&gt;</span>
</span><span class="line">    <span class="nt">&lt;property&gt;</span>
</span><span class="line">        <span class="nt">&lt;name&gt;</span>yarn.resourcemanager.scheduler.address<span class="nt">&lt;/name&gt;</span>
</span><span class="line">        <span class="nt">&lt;value&gt;</span>localhost:54313<span class="nt">&lt;/value&gt;</span>
</span><span class="line">    <span class="nt">&lt;/property&gt;</span>
</span><span class="line"><span class="nt">&lt;/configuration&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>4. 配置mapred-site.xml，先重命名</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="xml"><span class="line">$ cp mapred-site.xml.template mapred-site.xml
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>打开mapred-site.xml文件，写入如下配置</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="xml"><span class="line"><span class="nt">&lt;configuration&gt;</span>
</span><span class="line">    <span class="nt">&lt;property&gt;</span>
</span><span class="line">        <span class="nt">&lt;name&gt;</span>yarn.nodemanager.aux-services<span class="nt">&lt;/name&gt;</span>
</span><span class="line">        <span class="nt">&lt;value&gt;</span>mapreduce_shuffle<span class="nt">&lt;/value&gt;</span>
</span><span class="line">    <span class="nt">&lt;/property&gt;</span>
</span><span class="line"><span class="nt">&lt;/configuration&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="hadoop-2">确认Hadoop的安装</h4>
<p>1. NameNode确认</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="xml"><span class="line">$ cd ~
</span><span class="line">$ hdfs namenode -format
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>结果应该类似下面</p>

<pre><code>STARTUP_MSG: Starting NameNode
STARTUP_MSG:   host = centos00/127.0.0.1
STARTUP_MSG:   args = [-format]
STARTUP_MSG:   version = 2.6.0
...
/************************************************************
SHUTDOWN_MSG: Shutting down NameNode at centos00/127.0.0.1
************************************************************/
</code></pre>

<p>2. Hadoop dfs确认</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="xml"><span class="line">$ start-dfs.sh
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>结果应该类似下面</p>

<pre><code>Starting namenodes on [localhost]
localhost: starting namenode, logging to ....out
localhost: starting datanode, logging to ....out
Starting secondary namenodes [0.0.0.0]
The authenticity of host '0.0.0.0 (0.0.0.0)' can't be established.
RSA key fingerprint is fd:01:fc:f2:53:a0:58:8e:96:9c:5f:f2:6e:5b:69:1a.
Are you sure you want to continue connecting (yes/no)? yes
0.0.0.0: Warning: Permanently added '0.0.0.0' (RSA) to the list of known hosts.
0.0.0.0: starting secondarynamenode, logging to ...
</code></pre>

<p>3. Yarn Srcipt确认</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="xml"><span class="line">$ start-yarn.sh
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>结果应该类似下面这样</p>

<pre><code>starting yarn daemons
starting resourcemanager, logging to ....out
localhost: starting nodemanager, logging to ....out
</code></pre>

<p>4. 浏览器访问Hadoop</p>

<p>默认访问Hadoop的端口是50070，在浏览器中打开链接<a href="http://localhost:50070">http://localhost:50070</a>来访问Hadoop服务。</p>

<p>5. 浏览器确认应用集群</p>

<p>默认访问应用集群的端口号是8088，在浏览器中打开链接<a href="http://localhost:8088">http://localhost:8088</a>来确认下。</p>

<h3 id="hbase">安装HBase</h3>
<p>你可以在三种模式下安装HBase：单机模式、伪分布式模式、全分布式模式。
下面我们演示在伪分布式模式下HBase的安装和配置。</p>

<h4 id="hbase-1">下载HBase</h4>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="xml"><span class="line">$ su
</span><span class="line"># cd /usr/local/
</span><span class="line"># wget http://apache.fayea.com/hbase/hbase-0.98.12/hbase-0.98.12-hadoop2-bin.tar.gz
</span><span class="line"># tar -zxvf hbase-0.98.12-hadoop2-bin.tar.gz
</span><span class="line"># mv hbase-0.98.12-hadoop2 hbase
</span><span class="line"># chown -R hadoop:hadoop /usr/local/hbase
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="hbase-sitexml">配置hbase-site.xml</h4>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="xml"><span class="line">su hadoop
</span><span class="line">$ cd /usr/local/hbase/conf
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>然后打开hbase-env.sh文件，修改如下</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="xml"><span class="line">export JAVA_HOME=/usr/local/jdk1.7.0_79
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>修改hbase-site.xml文件，如下</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="xml"><span class="line"><span class="nt">&lt;property&gt;</span>
</span><span class="line">    <span class="nt">&lt;name&gt;</span>hbase.rootdir<span class="nt">&lt;/name&gt;</span>
</span><span class="line">    <span class="nt">&lt;value&gt;</span>hdfs://localhost:9000/hbase<span class="nt">&lt;/value&gt;</span>
</span><span class="line"><span class="nt">&lt;/property&gt;</span>
</span><span class="line">
</span><span class="line"><span class="nt">&lt;property&gt;</span>
</span><span class="line">    <span class="nt">&lt;name&gt;</span>hbase.zookeeper.property.dataDir<span class="nt">&lt;/name&gt;</span>
</span><span class="line">    <span class="nt">&lt;value&gt;</span>/home/hadoop/zookeeper<span class="nt">&lt;/value&gt;</span>
</span><span class="line"><span class="nt">&lt;/property&gt;</span>
</span><span class="line">
</span><span class="line"><span class="nt">&lt;property&gt;</span>
</span><span class="line">    <span class="nt">&lt;name&gt;</span>hbase.cluster.distributed<span class="nt">&lt;/name&gt;</span>
</span><span class="line">    <span class="nt">&lt;value&gt;</span>true<span class="nt">&lt;/value&gt;</span>
</span><span class="line"><span class="nt">&lt;/property&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>编辑/etc/profile，增加HBASE_HOME环境变量</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="xml"><span class="line">export HBASE_HOME=/usr/local/hbase
</span><span class="line">export PATH=$PATH:$HBASE_HOME/bin
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>应用更改。</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="xml"><span class="line">source /etc/profile
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>OK，现在为止，HBase的安装和配置都已经完成了。</p>

<p>现在你可以通过执行start-hbase.sh来启动HBase</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="xml"><span class="line">$ cd /usr/local/hbase/bin
</span><span class="line">$ ./start-hbase.sh
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>然后执行<code>jps</code>命令应该可以看到HMaster和HRegionServer这两个进程。类似下面</p>

<pre><code>10941 DataNode
13744 HQuorumPeer
14207 Jps
11126 SecondaryNameNode
11276 ResourceManager
10840 NameNode
13843 HMaster
10016 HRegionServer
11378 NodeManager
</code></pre>

<p>如果没有看到，可以查看日志<code>/usr/local/hbase/logs/hbase-hadoop-master-xx.log</code></p>

<h4 id="hdfshbase">在HDFS中检查HBase目录</h4>
<p>HBase会在HDFS中创建自己的目录，在hadoop目录下面执行：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="xml"><span class="line">$ ./bin/hadoop fs -ls /hbase
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>显示如下</p>

<pre><code>drwxr-xr-x   - hadoop supergroup          0 2015-04-24 16:06 /hbase/.tmp
drwxr-xr-x   - hadoop supergroup          0 2015-04-24 16:06 /hbase/WALs
drwxr-xr-x   - hadoop supergroup          0 2015-04-24 16:06 /hbase/data
-rw-r--r--   1 hadoop supergroup         42 2015-04-24 16:06 /hbase/hbase.id
-rw-r--r--   1 hadoop supergroup          7 2015-04-24 16:06 /hbase/hbase.version
drwxr-xr-x   - hadoop supergroup          0 2015-04-24 16:06 /hbase/oldWALs
</code></pre>

<p>那么恭喜你，配置成功了！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[yaml入门笔记]]></title>
    <link href="http://yidao620c.github.io/blog/20150522/yaml-introduce.html"/>
    <updated>2015-05-22T13:53:45+08:00</updated>
    <id>http://yidao620c.github.io/blog/20150522/yaml-introduce</id>
    <content type="html"><![CDATA[<p><strong>Wiki：</strong></p>

<p>YAML（IPA: /ˈjæməl/，尾音类似camel骆驼）是一个可读性高，用来表达资料序列的格式。
YAML参考了其他多种语言，包括：XML、C语言、Python、Perl以及电子邮件格式RFC2822。
Clark Evans在2001年在首次发表了这种语言[1] ，
另外Ingy döt Net与Oren Ben-Kiki也是这语言的共同设计者。
目前已经有数种编程语言或脚本语言支援（或者说解析）这种语言。</p>

<p>YAML是”YAML Ain’t a Markup Language”（YAML不是一种置标语言）的递回缩写。
在开发的这种语言时，YAML 的意思其实是：”Yet Another Markup Language”（仍是一种置标语言），
但为了强调这种语言以数据做为中心，而不是以置标语言为重点，而用返璞词重新命名。</p>

<p>最新版本为1.2，官方说明地址： <a href="http://www.yaml.org/spec/1.2/spec.html">http://www.yaml.org/spec/1.2/spec.html</a></p>

<p>使用方式：作为配置文件，数据交换格式，序列化对象存储，测试数据文件，</p>

<p>一个简单的示例：<!--more--></p>

<pre><code>---
receipt:     Oz-Ware Purchase Invoice
date:        2007-08-06
customer:
    given:   Dorothy
    family:  Gale

items:
    - part_no:   A4786
      descrip:   Water Bucket (Filled)
      price:     1.47
      quantity:  4

    - part_no:   E1628
      descrip:   High Heeled "Ruby" Slippers
      price:     100.27
      quantity:  1

bill-to:  &amp;id001
    street: |
            123 Tornado Alley
            Suite 16
    city:   East Westville
    state:  KS

ship-to:  *id001

specialDelivery:  &gt;
    Follow the Yellow Brick
    Road to the Emerald City.
    Pay no attention to the
    man behind the curtain.
...
</code></pre>

<p><strong>基本技巧：</strong></p>

<p>1，列表</p>

<p>使用- 表示，也就是用短杠+空白字符作为起始。</p>

<p>另外还有一种内置格式（inline format）可以选择──用方括号围住，并用逗号+空白区隔（类似JSON的语法）。
比如：shopping: [milk, pumpkin pie, eggs, juice]</p>

<p>2，映射</p>

<pre><code>— # 區塊形式
person:
name: John Smith
age: 33
— # 內置形式
person: {name: John Smith, age: 33}
</code></pre>

<p>3，重复元素</p>

<p>使用&amp;id001先标记，然后后面用*id001指针引用</p>

<pre><code># &amp; 的作用，它表示一个“锚点标记”，其它节点可以使用“*”或“&lt;&lt;: *”来引用它的值
node3: &amp;node3
  a: 001
  b: 002

# * 的作用，指node4的内容与node3完全一致
node4:
  *node3

# &lt;&lt;: * 的作用，指node5的内容包含但不完全相同于node3的值。
node5:
  &lt;&lt;: *node3
  c: 003

#眼部雷射手術之標準程序
---
- step:  &amp;amp;id001                    #定義錨點標籤 &amp;amp;id001
    instrument:      Lasik 2000
    pulseEnergy:     5.4
    pulseDuration:   12
    repetition:      1000
    spotSize:        1mm

- step:
     &amp;lt;&amp;lt;: *id001                  # 合併鍵值：使用在錨點標籤定義的內容
     spotSize:       2mm               # 覆寫"spotSize"鍵值

- step:
     &amp;lt;&amp;lt;: *id001                  # 合併鍵值：使用在錨點標籤定義的內容
     pulseEnergy:    500.0             # 覆寫鍵值
     alert: &amp;gt;                       # 加入其他鍵值
           warn patient of
           audible pop
</code></pre>

<p>4，需要换行书写的字符串，两种方式：</p>

<p>再次强调，字串不需要包在引号之内。</p>

<p>保存新行(Newlines preserved)</p>

<pre><code>poetry: |                                  #譯者注：這是一首著名的五行民謠
  There once was a man from Darjeeling     #這裡曾有一個人來自大吉嶺
  Who got on a bus bound for Ealing        #他搭上一班往伊靈的公車
      It said on the door                  #門上這麼說的
      "Please don't spit on the floor"     #"請勿在地上吐痰"
  So he carefully spat on the ceiling      #所以他小心翼翼的吐在天花板上
</code></pre>

<p>根据设定，前方的引领空白符号（leading white space）必须对齐，以便和其他资料或是行为（如范例中的缩排）明显区分。</p>

<p>折叠新行(Newlines folded)</p>

<pre><code>Wrapped text         #摺疊的文字
will be folded       #將會被收
into a single        #進單一一個
paragraph            #段落

Blank lines denote   #空白的行代表
paragraph breaks     #段落之間的區隔
</code></pre>

<p>和保存新行不同的是，换行字元会被转换成空白字符，空行被转换成换行，而前导空白字符则会被自动消去。上面会变成两行。</p>

<p>5，混合使用：</p>

<p>在列表中使用映射</p>

<pre><code>- {name: John Smith, age: 33}
- name: Mary Smith
  age: 27
</code></pre>

<p>在映射中使用列表</p>

<pre><code>men: [John Smith, Bill Jones]
women:
  - Mary Smith
  - Susan Williams
</code></pre>

<p><strong>更多资源：</strong></p>

<p><a href="http://www.yaml.org/">http://www.yaml.org/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[xpath入门笔记]]></title>
    <link href="http://yidao620c.github.io/blog/20150519/xpath-introduce.html"/>
    <updated>2015-05-19T14:01:07+08:00</updated>
    <id>http://yidao620c.github.io/blog/20150519/xpath-introduce</id>
    <content type="html"><![CDATA[<h3 id="wiki">Wiki</h3>

<p>XPath即为XML路径语言（XML Path Language），它是一种用来确定XML文档中某部分位置的语言。
XPath基于XML的树状结构，提供在数据结构树中找寻节点的能力。
起初XPath的提出的初衷是将其作为一个通用的、介于XPointer与XSL间的语法模型。
但是XPath很快的被开发者采用来当作小型查询语言。</p>

<p>W3C网址： <a href="http://www.w3schools.com/XPath/">http://www.w3schools.com/XPath/</a></p>

<h3 id="section">表示法</h3>

<p>最常见的XPath表达式是路径表达式（XPath这一名称的另一来源）。</p>

<p>路径表达式是从一个XML节点（当前的上下文节点）到另一个节点、或一组节点的书面步骤顺序。
这些步骤以“／”字符分开，每一步有三个构成成分：<!--more--></p>

<h3 id="section-1">轴描述</h3>

<p>节点测试（用于筛选节点位置和名称）</p>

<p>节点描述（用于筛选节点的属性和子节点特征）</p>

<p>一般情况下，我们使用简写后的语法。虽然完整的轴描述是一种更加贴近人类语言，
利用自然语言的单词和语法来书写的描述方式，但是相比之下也更加罗嗦。</p>

<h3 id="section-2">三种表示法</h3>

<ol>
  <li>最简单的XPath如下：</li>
</ol>

<p><code>/A/B/C</code></p>

<p>在这里选择所有符合规矩的C节点：C节点必须是B的子节点（B/C），
同时B节点必须是A的子节点（A/B），而A是这个XML文档的根节点（/A）。
此时的这种描述法类似于磁盘中文件的路径（URI），从盘符开始顺着一级一级的目录最终找到文件。</p>

<ol>
  <li>这里还有一个复杂一些的例子，包含了全部构成成分（请详细的看）：</li>
</ol>

<p><code>A//B/*[1]</code></p>

<p>此时选择的元素是：在B节点下的第一个节点（B/<em>[1]），不论节点的名称如何（</em>）；
而B节点必须出现在A节点内，不论和A节点之间相隔几层节点（//B）；
与此同时A节点还必须是当前节点的子节点（A，前边没有/）。</p>

<ol>
  <li>最后一个常用的例子，在所有节点下查找：</li>
</ol>

<p><code>//A/B/C/*[2]</code></p>

<h3 id="section-3">轴语法</h3>
<p>在未缩写语法里，两个上述范例可以写为：
`
/child::A/child::B/child::C
child::A/descendant-or-self::B/child::node()[1]
`
在XPath的每个步骤里，通过完整的轴描述（例如：child或descendant-or-self）进行明确的指定，
然后使用::，它的后面跟着节点测试的内容，例如上面范例所示的A以及node()。</p>

<h3 id="xpath">XPath轴</h3>
<p>轴可定义相对于当前节点的节点集。</p>
<table class="goodtable">
    <tr><td>ancestor</td><td>选取当前节点的所有先辈（父、祖父等）。</td></tr>
    <tr><td>ancestor-or-self</td><td>选取当前节点的所有先辈（父、祖父等）以及当前节点本身。</td></tr>
    <tr><td>attribute</td><td>选取当前节点的所有属性</td></tr>
    <tr><td>child</td><td>选取当前节点的所有子元素</td></tr>
    <tr><td>descendant</td><td>选取当前节点的所有后代元素（子、孙等）。</td></tr>
    <tr><td>descendant-or-self</td><td>选取当前节点的所有后代元素（子、孙等）以及当前节点本身。</td></tr>
    <tr><td>following</td><td>选取文档中当前节点的结束标签之后的所有节点。</td></tr>
    <tr><td>namespace</td><td>选取当前节点的所有命名空间节点。</td></tr>
    <tr><td>parent</td><td>选取当前节点的父节点。</td></tr>
    <tr><td>preceding</td><td>选取文档中当前节点的开始标签之前的所有节点。</td></tr>
    <tr><td>preceding-sibling</td><td>选取当前节点之前的所有同级节点。</td></tr>
    <tr><td>self</td><td>选取当前节点。</td></tr>
</table>

<p>几个实例讲解：</p>
<table class="goodtable">
    <tr><td>child::book</td><td>选取所有属于当前节点的子元素的 book 节点。</td></tr>
    <tr><td>attribute::lang</td><td>选取当前节点的 lang 属性。</td></tr>
    <tr><td>child::*</td><td>选取当前节点的所有子元素。</td></tr>
    <tr><td>attribute::*</td><td>选取当前节点的所有属性</td></tr>
    <tr><td>child::text()</td><td>选取当前节点的所有文本子节点</td></tr>
    <tr><td>child::node()</td><td>选取当前节点的所有子节点</td></tr>
    <tr><td>descendant::book</td><td>选取当前节点的所有book后代</td></tr>
    <tr><td>ancestor::book</td><td>选择当前节点的所有book先辈</td></tr>
    <tr><td>ancestor-or-self::book</td>选取当前节点的所有book先辈以及当前节点（如果此节点是 book 节点）<td></td></tr>
    <tr><td>child::*/child::price</td><td>选取当前节点的所有price孙节点。</td></tr>
</table>

<h3 id="xpath-">XPath 运算符</h3>
<p>下面列出了可用在 XPath 表达式中的运算符：</p>
<table class="goodtable">
    <tr><td>|</td><td>计算两个节点集</td><td>//book | //cd</td><td>返回所有拥有 book 和 cd 元素的节点集</td></tr>
    <tr><td>+</td><td>加法</td><td>6 + 4</td><td>10</td></tr>
    <tr><td>-</td><td>减法</td><td>6 – 4</td><td>2</td></tr>
    <tr><td>*</td><td>乘法</td><td>6 * 4</td><td>24</td></tr>
    <tr><td>div</td><td>除法</td><td>8 div 4</td><td>2</td></tr>
    <tr><td>=</td><td>等于</td><td>price=9.80</td><td>如果 price 是 9.80，则返回 true。如果 price 是 9.90，则返回 false。</td></tr>
    <tr><td>!=</td><td>不等于</td><td>price!=9.80</td><td>如果 price 是 9.90，则返回 true。如果 price 是 9.80，则返回 false。</td></tr>
    <tr><td>&lt;</td><td>小于</td><td>price&lt;9.80</td><td>如果 price 是 9.00，则返回 true。如果 price 是 9.90，则返回 false。</td></tr>
    <tr><td>&lt;=</td><td>小于或等于</td><td>price&lt;=9.80</td><td>如果 price 是 9.00，则返回 true。如果 price 是 9.90，则返回 false。</td></tr>
    <tr><td>&gt;</td><td>大于</td><td>price&gt;9.80</td><td>如果 price 是 9.90，则返回 true。如果 price 是 9.80，则返回 false。</td></tr>
    <tr><td>&gt;=</td><td>大于或等于</td><td>price&gt;=9.80</td><td>如果 price 是 9.90，则返回 true。如果 price 是 9.70，则返回 false。</td></tr>
    <tr><td>or</td><td>或</td><td>price=9.80 or price=9.70</td><td>如果 price 是 9.80，则返回 true。如果 price 是 9.50，则返回 false。</td></tr>
    <tr><td>and</td><td>与</td><td>price&gt;9.00 and price&lt;9.90</td><td>如果 price 是 9.80，则返回 true。如果 price 是 8.50，则返回 false。</td></tr>
</table>

<h3 id="xpath-1">Xpath函数</h3>

<p>有关数值的函数</p>

<pre><code>----------------------------------------------------------------------------------------------
|fn:number(arg)         |返回参数的数值。参数可以是布尔值、字符串或节点集。例子：number(‘100′)结果：100
|fn:abs(num)            |返回参数的绝对值。例子：abs(3.14)   结果：3.14例子：abs(-3.14)   结果：3.14
|fn:ceiling(num)        |返回大于 num 参数的最小整数。例子：ceiling(3.14)  结果：4
|fn:floor(num)          |返回不大于 num 参数的最大整数。例子：floor(3.14)  结果：3
|fn:round(num)          |把 num 参数舍入为最接近的整数。例子：round(3.14)  结果：3
----------------------------------------------------------------------------------------------
</code></pre>

<p>有关字符串的函数</p>

<pre><code>------------------------------------------------------------------------------------------------------------------------------------------------
|fn:string(arg)                         |返回参数的字符串值。参数可以是数字、逻辑值或节点集。例子：string(314) 结果：”314″
|fn:compare(comp1,comp2,collation)      |如果 comp1 小于 comp2，则返回 -1。类推例子：compare(‘ghi’, ‘ghi’) 结果：0
|fn:concat(string,string,…)             |返回字符串的拼接。例子：concat(‘XPath ‘,’is ‘,’FUN!’) 结果：’XPath is FUN!’
|fn:substring(string,start,len)         |返回从start位置开始的指定长度的子字符串。第一个字符的下标是 1。例子：substring(‘Beatles’,1,4) 结果：’Beat’
|fn:string-length(string)               |返回指定字符串的长度。如果没有 string 参数，则返回当前节点的字符串值的长度。例子：string-length(‘Beatles’) 结果：7
|fn:normalize-space(string)             |删除开头和结尾空白，并把内部所有空白序列替换为一个，然后返回结果。例子：normalize-space(‘ The XML ‘) 结果：’The XML’
|fn:upper-case(string)                  |把 string 参数转换为大写。例子：upper-case(‘The XML’) 结果：’THE XML’
|fn:lower-case(string)                  |把 string 参数转换为小写。例子：lower-case(‘The XML’) 结果：’the xml’
|fn:contains(string1,string2)           |如果 string1 包含 string2，则返回 true，否则返回 false。例子：contains(‘XML’,’XM’) 结果：true
|fn:starts-with(string1,string2)        |如果 string1 以 string2 开始，则返回 true，否则返回 false。例子：starts-with(‘XML’,’X’) 结果：true
|fn:ends-with(string1,string2)          |如果 string1 以 string2 结尾，则返回 true，否则返回 false。例子：ends-with(‘XML’,’X’) 结果：false
|fn:substring-before(string1,string2)   |返回 string2 在 string1 中出现之前的子字符串。例子：substring-before(’12/10′,’/’) 结果：’12’
|fn:substring-after(string1,string2)    |返回 string2 在 string1 中出现之后的子字符串。例子：substring-after(’12/10′,’/’) 结果：’10’
|fn:matches(string,pattern)             |如果 string 参数匹配指定的模式，则返回 true，否则返回 false。例子：matches(“Merano”, “ran”) 结果：true
------------------------------------------------------------------------------------------------------------------------------------------------
</code></pre>

<p>更多函数请参考： <a href="http://www.w3school.com.cn/xpath/xpath_functions.asp">http://www.w3school.com.cn/xpath/xpath_functions.asp</a></p>

<h3 id="xpath-2">我自己实际工作中使用过的XPath实例：</h3>

<pre><code>* //span/../.././span
* //bookstore/book[last()]
* /DocText/WithQuads/Page/Word
* record[field[@id='220' and @value='Red'] and field[@id='221' and @value='Large']]
* /Root//Person[contains(Blog,'cn') and contains(@ID,'01')]
* //tr[td[1] and td[2][contains(text(), "512M")]]
* //td/following-sibling::td[1]
* //td/preceding-sibling::td[1]
* //td[starts-with(text(), "%s") and contains(text(), "disk:%sMB")]/following-sibling::td[2][contains(text(), "%s")]
* //a/../following-sibling::td[8]/a[2]
</code></pre>

<p>看完前面部分，这些的含义应该很容易可以看懂了。恭喜你，基本的XPath已经没问题了！</p>

<h3 id="chromepsychoxpath">chrome插件PsychoXPath</h3>
<p>最后我还推荐一个chrome浏览器中很好用的xpath插件，名字叫PsychoXPath。\</p>

<p>插件地址：<a href="https://chrome.google.com/webstore/detail/psychoxpath/bpnigkcdmnofjkmojlopmelmhgpbndog">PsychoXPath</a></p>

<p>基本使用方法，以google的首页“Google 搜索”按钮为例：</p>

<p>高亮模式：</p>

<ol>
  <li>先按F12打开chrome浏览器的调试窗口，然后通过邮件审查元素找到“Google 搜索”按钮，查看对应的html代码。</li>
</ol>

<p><img src="http://yidaospace.qiniudn.com/x002.png" alt="" /></p>

<p>*. 然后右键选择PsychoXPath-&gt;Test XPath(Highlight)</p>

<p><img src="http://yidaospace.qiniudn.com/x006.png" alt="" /></p>

<p>*. 之后输入XPath路径</p>

<p><img src="http://yidaospace.qiniudn.com/x004.png" alt="" /></p>

<p>*. 结果如下，被找到的页面元素会被高亮显示：</p>

<p><img src="http://yidaospace.qiniudn.com/x005.png" alt="" /></p>

<p>*. 控制台模式：</p>

<p>还可以在控制台中调试xpath，这个跟上面同样道理。只是这次选择的是PsychoXPath-&gt;Test XPath(Console)模式就行了。</p>

<p>具体我就不再细说了，使用还是很容易的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mqtt消息中间件mosquitto的安装和配置]]></title>
    <link href="http://yidao620c.github.io/blog/20150517/mosquitto-install.html"/>
    <updated>2015-05-17T16:33:07+08:00</updated>
    <id>http://yidao620c.github.io/blog/20150517/mosquitto-install</id>
    <content type="html"><![CDATA[<h3 id="wiki">Wiki</h3>
<p>Mosquitto是一个开源(BSD许可证)的消息代理，实现MQTT(消息队列遥测传输)协议版本3.1.1。</p>

<p>MQTT（MQ Telemetry Transport），消息队列遥测传输协议，轻量级的发布/订阅协议，
适用于一些条件比较苛刻的环境，进行低带宽、不可靠或间歇性的通信。目前已经是物联网消息通信事实上的标准协议了。</p>

<p>值得一提的是mqtt提供三种不同质量的消息服务：</p>

<ul>
  <li>“至多一次”：消息发布完全依赖底层 TCP/IP 网络。会发生消息丢失或重复。这一级别可用于如下情况，环境传感器数据，丢失一次读记录无所谓，因为不久后还会有第二次发送。</li>
  <li>“至少一次”：确保消息到达，但消息重复可能会发生。</li>
  <li>“只有一次”：确保消息到达一次。这一级别可用于如下情况，在计费系统中，消息重复或丢失会导致不正确的结果。</li>
</ul>

<h3 id="httpmosquittoorgdownload">安装：(参考官网 <a href="http://mosquitto.org/download/">http://mosquitto.org/download/</a>)</h3>

<p>服务器操作系统为CentOS6.4，使用最简单的yum安装</p>

<p>1，先加入yum源：</p>

<p>在<code>/etc/yum.repos.d/</code>目录中新建一个<code>mosquitto.repo</code>文件，里面写入：<!--more--></p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">[home_oojah_mqtt]
</span><span class="line">name=mqtt (CentOS_CentOS-6)
</span><span class="line">type=rpm-md
</span><span class="line">baseurl=http://download.opensuse.org/repositories/home:/oojah:/mqtt/CentOS_CentOS-6/
</span><span class="line">gpgcheck=1
</span><span class="line">gpgkey=http://download.opensuse.org/repositories/home:/oojah:/mqtt/CentOS_CentOS-6/repodata/repomd.xml.key
</span><span class="line">enabled=1</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>2，开始安装</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">sudo yum search all mosquitto
</span><span class="line">sudo yum install mosquitto mosquitto-clients libmosquitto-devel libmosquittopp-devel python-mosquitto
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>3，配置</p>

<p>安装完成之后，所有配置文件会被放置于/etc/mosquitto/目录下，
其中最重要的就是Mosquitto的配置文件，即mosquitto.conf，以下是详细的配置参数说明。</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
<span class="line-number">85</span>
<span class="line-number">86</span>
<span class="line-number">87</span>
<span class="line-number">88</span>
<span class="line-number">89</span>
<span class="line-number">90</span>
<span class="line-number">91</span>
<span class="line-number">92</span>
<span class="line-number">93</span>
<span class="line-number">94</span>
<span class="line-number">95</span>
<span class="line-number">96</span>
<span class="line-number">97</span>
<span class="line-number">98</span>
<span class="line-number">99</span>
<span class="line-number">100</span>
<span class="line-number">101</span>
<span class="line-number">102</span>
<span class="line-number">103</span>
<span class="line-number">104</span>
<span class="line-number">105</span>
<span class="line-number">106</span>
<span class="line-number">107</span>
<span class="line-number">108</span>
<span class="line-number">109</span>
<span class="line-number">110</span>
<span class="line-number">111</span>
<span class="line-number">112</span>
<span class="line-number">113</span>
<span class="line-number">114</span>
<span class="line-number">115</span>
<span class="line-number">116</span>
<span class="line-number">117</span>
<span class="line-number">118</span>
<span class="line-number">119</span>
<span class="line-number">120</span>
<span class="line-number">121</span>
<span class="line-number">122</span>
<span class="line-number">123</span>
<span class="line-number">124</span>
<span class="line-number">125</span>
<span class="line-number">126</span>
<span class="line-number">127</span>
<span class="line-number">128</span>
<span class="line-number">129</span>
<span class="line-number">130</span>
<span class="line-number">131</span>
<span class="line-number">132</span>
<span class="line-number">133</span>
<span class="line-number">134</span>
<span class="line-number">135</span>
<span class="line-number">136</span>
<span class="line-number">137</span>
<span class="line-number">138</span>
<span class="line-number">139</span>
<span class="line-number">140</span>
<span class="line-number">141</span>
<span class="line-number">142</span>
<span class="line-number">143</span>
<span class="line-number">144</span>
<span class="line-number">145</span>
<span class="line-number">146</span>
<span class="line-number">147</span>
<span class="line-number">148</span>
<span class="line-number">149</span>
<span class="line-number">150</span>
<span class="line-number">151</span>
<span class="line-number">152</span>
<span class="line-number">153</span>
<span class="line-number">154</span>
<span class="line-number">155</span>
<span class="line-number">156</span>
<span class="line-number">157</span>
<span class="line-number">158</span>
<span class="line-number">159</span>
<span class="line-number">160</span>
<span class="line-number">161</span>
<span class="line-number">162</span>
<span class="line-number">163</span>
<span class="line-number">164</span>
<span class="line-number">165</span>
<span class="line-number">166</span>
<span class="line-number">167</span>
<span class="line-number">168</span>
<span class="line-number">169</span>
<span class="line-number">170</span>
<span class="line-number">171</span>
<span class="line-number">172</span>
<span class="line-number">173</span>
<span class="line-number">174</span>
<span class="line-number">175</span>
<span class="line-number">176</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c"># =================================================================</span>
</span><span class="line"><span class="c"># General configuration</span>
</span><span class="line"><span class="c"># =================================================================</span>
</span><span class="line">
</span><span class="line"><span class="c"># 客户端心跳的间隔时间</span>
</span><span class="line"><span class="c">#retry_interval 20</span>
</span><span class="line">
</span><span class="line"><span class="c"># 系统状态的刷新时间</span>
</span><span class="line"><span class="c">#sys_interval 10</span>
</span><span class="line">
</span><span class="line"><span class="c"># 系统资源的回收时间，0表示尽快处理</span>
</span><span class="line"><span class="c">#store_clean_interval 10</span>
</span><span class="line">
</span><span class="line"><span class="c"># 服务进程的PID</span>
</span><span class="line"><span class="c">#pid_file /var/run/mosquitto.pid</span>
</span><span class="line">
</span><span class="line"><span class="c"># 服务进程的系统用户</span>
</span><span class="line"><span class="c">#user mosquitto</span>
</span><span class="line">
</span><span class="line"><span class="c"># 客户端心跳消息的最大并发数</span>
</span><span class="line"><span class="c">#max_inflight_messages 10</span>
</span><span class="line">
</span><span class="line"><span class="c"># 客户端心跳消息缓存队列</span>
</span><span class="line"><span class="c">#max_queued_messages 100</span>
</span><span class="line">
</span><span class="line"><span class="c"># 用于设置客户端长连接的过期时间，默认永不过期</span>
</span><span class="line"><span class="c">#persistent_client_expiration</span>
</span><span class="line">
</span><span class="line"><span class="c"># =================================================================</span>
</span><span class="line"><span class="c"># Default listener</span>
</span><span class="line"><span class="c"># =================================================================</span>
</span><span class="line">
</span><span class="line"><span class="c"># 服务绑定的IP地址</span>
</span><span class="line"><span class="c">#bind_address</span>
</span><span class="line">
</span><span class="line"><span class="c"># 服务绑定的端口号</span>
</span><span class="line"><span class="c">#port 1883</span>
</span><span class="line">
</span><span class="line"><span class="c"># 允许的最大连接数，-1表示没有限制</span>
</span><span class="line"><span class="c">#max_connections -1</span>
</span><span class="line">
</span><span class="line"><span class="c"># cafile：CA证书文件</span>
</span><span class="line"><span class="c"># capath：CA证书目录</span>
</span><span class="line"><span class="c"># certfile：PEM证书文件</span>
</span><span class="line"><span class="c"># keyfile：PEM密钥文件</span>
</span><span class="line"><span class="c">#cafile</span>
</span><span class="line"><span class="c">#capath</span>
</span><span class="line"><span class="c">#certfile</span>
</span><span class="line"><span class="c">#keyfile</span>
</span><span class="line">
</span><span class="line"><span class="c"># 必须提供证书以保证数据安全性</span>
</span><span class="line"><span class="c">#require_certificate false</span>
</span><span class="line">
</span><span class="line"><span class="c"># 若require_certificate值为true，use_identity_as_username也必须为true</span>
</span><span class="line"><span class="c">#use_identity_as_username false</span>
</span><span class="line">
</span><span class="line"><span class="c"># 启用PSK（Pre-shared-key）支持</span>
</span><span class="line"><span class="c">#psk_hint</span>
</span><span class="line">
</span><span class="line"><span class="c"># SSL/TSL加密算法，可以使用“openssl ciphers”命令获取</span>
</span><span class="line"><span class="c"># as the output of that command.</span>
</span><span class="line"><span class="c">#ciphers</span>
</span><span class="line">
</span><span class="line"><span class="c"># =================================================================</span>
</span><span class="line"><span class="c"># Persistence</span>
</span><span class="line"><span class="c"># =================================================================</span>
</span><span class="line">
</span><span class="line"><span class="c"># 消息自动保存的间隔时间</span>
</span><span class="line"><span class="c">#autosave_interval 1800</span>
</span><span class="line">
</span><span class="line"><span class="c"># 消息自动保存功能的开关</span>
</span><span class="line"><span class="c">#autosave_on_changes false</span>
</span><span class="line">
</span><span class="line"><span class="c"># 持久化功能的开关</span>
</span><span class="line">persistence <span class="nb">true</span>
</span><span class="line">
</span><span class="line"><span class="c"># 持久化DB文件</span>
</span><span class="line"><span class="c">#persistence_file mosquitto.db</span>
</span><span class="line">
</span><span class="line"><span class="c"># 持久化DB文件目录</span>
</span><span class="line"><span class="c">#persistence_location /var/lib/mosquitto/</span>
</span><span class="line">
</span><span class="line"><span class="c"># =================================================================</span>
</span><span class="line"><span class="c"># Logging</span>
</span><span class="line"><span class="c"># =================================================================</span>
</span><span class="line">
</span><span class="line"><span class="c"># 4种日志模式：stdout、stderr、syslog、topic</span>
</span><span class="line"><span class="c"># none 则表示不记日志，此配置可以提升些许性能</span>
</span><span class="line">log_dest none
</span><span class="line">
</span><span class="line"><span class="c"># 选择日志的级别（可设置多项）</span>
</span><span class="line"><span class="c">#log_type error</span>
</span><span class="line"><span class="c">#log_type warning</span>
</span><span class="line"><span class="c">#log_type notice</span>
</span><span class="line"><span class="c">#log_type information</span>
</span><span class="line">
</span><span class="line"><span class="c"># 是否记录客户端连接信息</span>
</span><span class="line"><span class="c">#connection_messages true</span>
</span><span class="line">
</span><span class="line"><span class="c"># 是否记录日志时间</span>
</span><span class="line"><span class="c">#log_timestamp true</span>
</span><span class="line">
</span><span class="line"><span class="c"># =================================================================</span>
</span><span class="line"><span class="c"># Security</span>
</span><span class="line"><span class="c"># =================================================================</span>
</span><span class="line">
</span><span class="line"><span class="c"># 客户端ID的前缀限制，可用于保证安全性</span>
</span><span class="line"><span class="c">#clientid_prefixes</span>
</span><span class="line">
</span><span class="line"><span class="c"># 允许匿名用户</span>
</span><span class="line"><span class="c">#allow_anonymous true</span>
</span><span class="line">
</span><span class="line"><span class="c"># 用户/密码文件，默认格式：username:password</span>
</span><span class="line"><span class="c">#password_file</span>
</span><span class="line">
</span><span class="line"><span class="c"># PSK格式密码文件，默认格式：identity:key</span>
</span><span class="line"><span class="c">#psk_file</span>
</span><span class="line">
</span><span class="line"><span class="c"># pattern write sensor/%u/data</span>
</span><span class="line"><span class="c"># ACL权限配置，常用语法如下：</span>
</span><span class="line"><span class="c"># 用户限制：user &lt;username&gt;</span>
</span><span class="line"><span class="c"># 话题限制：topic [read|write] &lt;topic&gt;</span>
</span><span class="line"><span class="c"># 正则限制：pattern write sensor/%u/data</span>
</span><span class="line"><span class="c">#acl_file</span>
</span><span class="line">
</span><span class="line"><span class="c"># =================================================================</span>
</span><span class="line"><span class="c"># Bridges</span>
</span><span class="line"><span class="c"># =================================================================</span>
</span><span class="line">
</span><span class="line"><span class="c"># 允许服务之间使用“桥接”模式（可用于分布式部署）</span>
</span><span class="line"><span class="c">#connection &lt;name&gt;</span>
</span><span class="line"><span class="c">#address &lt;host&gt;[:&lt;port&gt;]</span>
</span><span class="line"><span class="c">#topic &lt;topic&gt; [[[out | in | both] qos-level] local-prefix remote-prefix]</span>
</span><span class="line">
</span><span class="line"><span class="c"># 设置桥接的客户端ID</span>
</span><span class="line"><span class="c">#clientid</span>
</span><span class="line">
</span><span class="line"><span class="c"># 桥接断开时，是否清除远程服务器中的消息</span>
</span><span class="line"><span class="c">#cleansession false</span>
</span><span class="line">
</span><span class="line"><span class="c"># 是否发布桥接的状态信息</span>
</span><span class="line"><span class="c">#notifications true</span>
</span><span class="line">
</span><span class="line"><span class="c"># 设置桥接模式下，消息将会发布到的话题地址</span>
</span><span class="line"><span class="c"># $SYS/broker/connection/&lt;clientid&gt;/state</span>
</span><span class="line"><span class="c">#notification_topic</span>
</span><span class="line">
</span><span class="line"><span class="c"># 设置桥接的keepalive数值</span>
</span><span class="line"><span class="c">#keepalive_interval 60</span>
</span><span class="line">
</span><span class="line"><span class="c"># 桥接模式，目前有三种：automatic、lazy、once</span>
</span><span class="line"><span class="c">#start_type automatic</span>
</span><span class="line">
</span><span class="line"><span class="c"># 桥接模式automatic的超时时间</span>
</span><span class="line"><span class="c">#restart_timeout 30</span>
</span><span class="line">
</span><span class="line"><span class="c"># 桥接模式lazy的超时时间</span>
</span><span class="line"><span class="c">#idle_timeout 60</span>
</span><span class="line">
</span><span class="line"><span class="c"># 桥接客户端的用户名</span>
</span><span class="line"><span class="c">#username</span>
</span><span class="line">
</span><span class="line"><span class="c"># 桥接客户端的密码</span>
</span><span class="line"><span class="c">#password</span>
</span><span class="line">
</span><span class="line"><span class="c"># bridge_cafile：桥接客户端的CA证书文件</span>
</span><span class="line"><span class="c"># bridge_capath：桥接客户端的CA证书目录</span>
</span><span class="line"><span class="c"># bridge_certfile：桥接客户端的PEM证书文件</span>
</span><span class="line"><span class="c"># bridge_keyfile：桥接客户端的PEM密钥文件</span>
</span><span class="line"><span class="c">#bridge_cafile</span>
</span><span class="line"><span class="c">#bridge_capath</span>
</span><span class="line"><span class="c">#bridge_certfile</span>
</span><span class="line"><span class="c">#bridge_keyfile</span>
</span><span class="line">
</span><span class="line"><span class="c"># 自己的配置可以放到以下目录中</span>
</span><span class="line">include_dir /etc/mosquitto/conf.d
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>4，启动服务，两种方式</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">mosquitto -c /etc/mosquitto/mosquitto.conf -d
</span><span class="line">sudo /etc/init.d/mosquitto start
</span></code></pre></td></tr></table></div></figure></notextile></div>

<hr />

<h3 id="section">演示部分：</h3>
<p>前面已经开启了服务，如果没有请参考前面步骤。</p>

<p>一、开启另一个终端窗口，运行订阅程序mosquitto_sub:</p>

<p><em>注意</em>：</p>

<p>消息推送的发布和订阅要有主题，选项[-t] 主题，即：mosquitto -t 主题</p>

<p>如需指定用户名称则加选项[-i] 用户名，即：mosquitto_sub -t 主题 -i 订阅端</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">mosquitto_sub -t mqtt
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>二、开启另一个终端窗口，运行发布程序mosquitto_pub:</p>

<p>指定消息推送的主题，发布端用户名和消息：</p>

<p><code>mosquitto_pub -t 主题 -i 发布端 -h 主机 -m 你好</code></p>

<p>*注意：如果消息中间有空格则消息要用引号括起来。</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">mosquitto_pub -t 主题 -i 发布端 -h host -m <span class="s1">&#39;我是发布端，你好。&#39;</span>
</span><span class="line">mosquitto_pub -h localhost -t mqtt -m <span class="s2">&quot;hello world.&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这时候前面那个订阅窗口就可以收到”hello world”的消息了。</p>

<p>演示成功！！！</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CentOS6.4安装rabbitmq-server]]></title>
    <link href="http://yidao620c.github.io/blog/20150426/rabbitmq-server.html"/>
    <updated>2015-04-26T10:55:13+08:00</updated>
    <id>http://yidao620c.github.io/blog/20150426/rabbitmq-server</id>
    <content type="html"><![CDATA[<h3 id="centos-64python">在 CentOS 6.4上安装python</h3>
<p>自己手动安装python2.7.5，不要动系统上面其他的版本</p>

<p><strong>1,先安装GCC，用如下命令yum install gcc gcc-c++</strong></p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">yum install zlib
</span><span class="line">yum install zlib-devel</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><strong>2,下载 <a href="https://www.python.org/ftp/python/2.7.5/Python-2.7.5.tgz">python-2.7.5.tar.gz</a> 文件，修改文件权限</strong></p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">chmode +x python-7.5.tar.gz</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><strong>3,解压tar文件</strong></p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">tar -xzvf python-2.7.5.tar.gz</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><strong>4,编辑Setup.dist</strong></p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">cd python-2.7.5
</span><span class="line">vim Python-2.7.5/Modules/Setup.dist</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>找到<!--more--></p>

<pre><code>#SSL=/usr/local/ssl
#_ssl _ssl.c \
#       -DUSE_SSL -I$(SSL)/include -I$(SSL)/include/openssl \
#       -L$(SSL)/lib -lssl -lcrypto
......
#zlib zlibmodule.c -I$(prefix)/include -L$(exec_prefix)/lib -lz
</code></pre>

<p>把注释去掉后开始执行安装</p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">./configure --prefix=/usr/local/python27 --with-zlib=/usr/include
</span><span class="line">make &amp;&amp; make install</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><strong>5、建立软连接，使系统默认的python指向python27</strong></p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">mv /usr/bin/python /usr/bin/python2.6.6.old
</span><span class="line">ln -s /usr/local/python27/bin/python2.7 /usr/bin/python</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>已经安装完成python的安装或升级的全部操作了，我们再来看一下现在的python的版本：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">python -V
</span><span class="line">Python 2.7.5</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>虽然现在python已经安装完成，但是使用yum命令会有问题——yum不能正常工作。</p>

<p>这是因为yum默认使用的python版本是2.6.6，到哪是现在的python版本是2.7.5，
故会出现上述问题，只需要该一下yum的默认python配置版本就行了：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">vi /usr/bin/yum</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>将文件头部的<code>#!/usr/bin/python</code> 改为<code>#!/usr/bin/python2.6</code></p>

<h3 id="centos-64erlang">在 CentOS 6.4上安装Erlang</h3>
<p>在本节中，我们将来学习如何在CentOS 6.4上安装erlang，具体的Erlang版本是R16B02。</p>

<p>在安装之前，需要先要安装一些其他的软件，否则在安装中间会出现一些由于没有其依赖的软件模块而失败。</p>

<p><strong>1、首先要先安装GCC GCC-C++ Openssl等以来模块：</strong></p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">yum -y install make gcc gcc-c++ kernel-devel m4 ncurses-devel openssl-devel</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><strong>2、再安装ncurses模块</strong></p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">yum -y install ncurses-devel
</span><span class="line">yum install ncurses-devel</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><strong>3、下载Erang源代码文件文件，并对其付权限和解压文件：</strong></p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">wget http://www.erlang.org/download/otp_src_R16B02.tar.gz
</span><span class="line">chmod +x otp_src_R16B02.tar.gz
</span><span class="line">tar -xzvf otp_src_R16B02.tar.gz
</span><span class="line">mv otp_src_R16B02 erlang_R16B #重命名解压厚的文件</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><strong>4、下面是安装erlang的重头戏，依次执行以下操作：</strong></p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">cd erlang_R16B/
</span><span class="line">#不用java编译，故去掉java避免错误
</span><span class="line">./configure --prefix=/usr/local/erlang --with-ssl --enable-threads --enable-smp-support --enable-kernel-poll --enable-hipe --without-javac
</span><span class="line">make &amp;&amp; make install #编译后安装</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><strong>5、配置erlang环境：</strong></p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">vi /etc/profile
</span><span class="line">ERL_HOME=/usr/local/erlang
</span><span class="line">export PATH=$PATH:$ERL_HOME/bin</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>好了，现在erlang的已经配置好了，现在我们来测试一下是否安装成功,在控制台输入命令erl，
如果在erlang shell里出现下图所示就说明安装成功了：
此处省略截图了…</p>

<h3 id="centosrabbitmq-server-315">在CentOS上安装rabbitmq-server-3.1.5</h3>
<p>在本节中我们来看一下如何在CentOS上安装RabbitMQ。
我们使用的rabbitmq的版本是rabbitmq-server-3.1.5.tar.gz，CentOS的版本是CentOS 6.4。</p>

<p>在安装rabbitmq之前需要先安装python和erlang，
这两部分的安装过程请参看在CentOS 6.4上安装python和在 CentOS 6.4上安装Erlang，这里不再赘述。</p>

<p>安装rabbitmq的具体步骤如下：</p>

<p><strong>1、下载rabbitmq-server-3.1.5.tar.gz文件，并解压之：</strong></p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">cd /usr/local
</span><span class="line">wget http://www.rabbitmq.com/releases/rabbitmq-server/v3.1.5/rabbitmq-server-3.1.5.tar.gz
</span><span class="line">chmod +x rabbitmq-server-3.1.5.tar.gz
</span><span class="line">tar -xzvf rabbitmq-server-3.1.5.tar.gz</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><strong>2、在编译rabbitmq源码之前先要安装其需要依赖包：</strong></p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">yum -y install xmlto</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>否则会编译不通过：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">/bin/sh: line 1: xmlto: command not found</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><strong>3、开始编译源代码：</strong></p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">cd rabbitmq-server-3.1.5
</span><span class="line">make
</span><span class="line">#将rabbitmq编译到/opt/mq/rabbitmq目录
</span><span class="line">make install TARGET_DIR=/opt/mq/rabbitmq SBIN_DIR=/opt/mq/rabbitmq/sbin MAN_DIR=/opt/mq/rabbitmq/man</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><strong>4、安装web插件管理界面</strong></p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">cd /opt/mq/rabbitmq/sbin
</span><span class="line">mkdir /etc/rabbitmq/
</span><span class="line">rabbitmq-plugins enable rabbitmq_management</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><strong>5、好了，到这里rabbitmq已经配置好了，可以启动了：</strong></p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">./rabbitmq-server start &amp;</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>我运行的时候报错了，ERROR: epmd error for host “springzoo”: timeout (timed out)</p>

<p>更改下/etc/hosts:</p>

<pre><code>127.0.0.1   localhost springzoo
::1         localhost springzoo
</code></pre>

<p>接下来我们查看下端口</p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">ps aux | grep rabbitmq #查看端口，默认就是5672
</span><span class="line">netstat -tnlp | grep 5672</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>应该是下面的结果</p>

<pre><code>tcp        0      0 0.0.0.0:15672               0.0.0.0:*                   LISTEN      30435/beam.smp
tcp        0      0 0.0.0.0:55672               0.0.0.0:*                   LISTEN      30435/beam.smp
tcp        0      0 :::5672                     :::*                        LISTEN      30435/beam.smp
</code></pre>

<p>如果看到下面的信息就表明已经启动成功了！
省略截图….</p>

<p>最好我们就可以在浏览器上输入http://127.0.0.1:15672/登录管理界面了</p>

<p>使用登录的名户名和密码默认都算guest，登录后的页面如下：</p>

<p>截图再次省略…</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用python开发RabbitMQ应用]]></title>
    <link href="http://yidao620c.github.io/blog/20150425/rabbitmq-python-client.html"/>
    <updated>2015-04-25T11:21:34+08:00</updated>
    <id>http://yidao620c.github.io/blog/20150425/rabbitmq-python-client</id>
    <content type="html"><![CDATA[<p>参考了RabbitMQ网站上提供的英文版本入门指南: <a href="http://www.rabbitmq.com/getstarted.html">http://www.rabbitmq.com/getstarted.html</a></p>

<p>测试环境：CentOS 6.2</p>

<p><strong>1，测试环境准备</strong></p>

<p>安装python（一般系统都自带了python）</p>

<p>安装RabbitMQ server可以参考前面的文章。</p>

<p>安装pika</p>

<p>使用pip安装的时候可能会报错：</p>

<p><code>importerror no module named pkg_resources</code></p>

<p>请用下面命令解决这个问题：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ curl https://bitbucket.org/pypa/setuptools/raw/bootstrap/ez_setup.py | python</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>然后还可能出现：</p>

<p><code>pkg_resources.distributionnotfound pip==1.4.1</code></p>

<p>这时候先把pip卸载掉，执行：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sudo yum remove python-pip</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>然后去下载最新的get-pip.py文件，执行<code>python get-pip.py</code>安装</p>

<p>在<code>/etc/profile</code>里面将<code>/usr/local/python27/bin</code>加入PATH最前面<!--more--></p>

<p>把rabbitmq server启动一下和准备好测试目录rabbitmq_app：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ /usr/local/rabbitmq/sbin/rabbitmq-server -detached
</span><span class="line">$ cd ~
</span><span class="line">$ mkdir -p test /rabbitmq_app
</span><span class="line">$ cd test /rabbitmq_app
</span><span class="line">$ mkdir tut1 tut2 tut3 tut4 tut5 tut6</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>2，实例一：来个hello world程序</strong></p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ cd tut1
</span><span class="line">$ vim send.py (代码如下)
</span><span class="line">$ vim receive.py (代码如下)</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>首先是消息发送程序: send.py</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c">#!/usr/bin/env python</span>
</span><span class="line"><span class="c"># -*- coding: utf-8 -*-</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">sys</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">pika</span>
</span><span class="line"><span class="n">connection</span> <span class="o">=</span> <span class="n">pika</span><span class="o">.</span><span class="n">BlockingConnection</span><span class="p">(</span><span class="n">pika</span><span class="o">.</span><span class="n">ConnectionParameters</span><span class="p">(</span><span class="s">&#39;localhost&#39;</span><span class="p">))</span>
</span><span class="line"><span class="n">channel</span> <span class="o">=</span> <span class="n">connection</span><span class="o">.</span><span class="n">channel</span><span class="p">()</span>
</span><span class="line"><span class="n">channel</span><span class="o">.</span><span class="n">queue_declare</span><span class="p">(</span><span class="n">queue</span> <span class="o">=</span> <span class="s">&#39;hello&#39;</span><span class="p">)</span>
</span><span class="line"><span class="k">if</span> <span class="nb">len</span> <span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">2</span> <span class="p">:</span>
</span><span class="line">     <span class="k">print</span> <span class="s">&#39;message is empty!&#39;</span>
</span><span class="line">     <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class="line"><span class="n">message</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span><span class="line"><span class="n">channel</span><span class="o">.</span><span class="n">basic_publish</span><span class="p">(</span><span class="n">exchange</span> <span class="o">=</span> <span class="s">&#39;&#39;</span><span class="p">,</span> <span class="n">routing_key</span><span class="o">=</span><span class="s">&#39;hello&#39;</span><span class="p">,</span> <span class="n">body</span> <span class="o">=</span> <span class="n">message</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span> <span class="s">&quot;[x] sent: &#39;&quot;</span> <span class="o">+</span> <span class="n">message</span> <span class="o">+</span> <span class="s">&quot;&#39;</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class="line"><span class="n">connection</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>跑一下send.py发送一个消息</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="err">$</span> <span class="n">python</span> <span class="n">send</span><span class="o">.</span><span class="n">py</span> <span class="err">‘</span><span class="n">Hello</span> <span class="n">World</span><span class="err">!’</span>
</span><span class="line"><span class="err">$</span> <span class="n">python</span> <span class="n">send</span><span class="o">.</span><span class="n">py</span> <span class="err">‘你好刀哥’</span>
</span><span class="line"><span class="err">$</span> <span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">local</span><span class="o">/</span><span class="n">rabbitmq</span><span class="o">/</span><span class="n">sbin</span><span class="o">/</span><span class="n">rabbitmqctl</span> <span class="n">list_queues</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>结果如下面：</p>

<pre><code>Listing queues …
hello 2
… done .
</code></pre>

<p>如果你也看到hello队列里面有一个消息的话，就证明可以发消息了。</p>

<p>然后写一个接收消息脚本：receive.py</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c">#!/usr/bin/env python</span>
</span><span class="line"><span class="c"># -*- coding: utf-8 -*-</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">pika</span>
</span><span class="line"><span class="n">connection</span> <span class="o">=</span> <span class="n">pika</span><span class="o">.</span><span class="n">BlockingConnection</span><span class="p">(</span><span class="n">pika</span><span class="o">.</span><span class="n">ConnectionParameters</span><span class="p">(</span> <span class="s">&#39;localhost&#39;</span> <span class="p">))</span>
</span><span class="line"><span class="n">channel</span> <span class="o">=</span> <span class="n">connection</span><span class="o">.</span><span class="n">channel</span><span class="p">()</span>
</span><span class="line"><span class="n">channel</span><span class="o">.</span><span class="n">queue_declare</span><span class="p">(</span><span class="n">queue</span> <span class="o">=</span> <span class="s">&#39;hello&#39;</span> <span class="p">)</span>
</span><span class="line"><span class="k">print</span> <span class="s">&#39;[*] Waiting for messages. To exit press CTRL+C&#39;</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">callback</span><span class="p">(</span><span class="n">ch</span><span class="p">,</span> <span class="n">method</span><span class="p">,</span> <span class="n">properties</span><span class="p">,</span> <span class="n">body</span><span class="p">):</span>
</span><span class="line">     <span class="k">print</span> <span class="n">body</span>
</span><span class="line">
</span><span class="line"><span class="n">channel</span><span class="o">.</span><span class="n">basic_consume</span><span class="p">(</span><span class="n">callback</span><span class="p">,</span> <span class="n">queue</span> <span class="o">=</span> <span class="s">&#39;hello&#39;</span> <span class="p">,</span> <span class="n">no_ack</span> <span class="o">=</span> <span class="bp">True</span> <span class="p">)</span>
</span><span class="line"><span class="n">channel</span><span class="o">.</span><span class="n">start_consuming</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>其中第12行的 no_ack=True 表示消费完了这个消息以后不主动把完成状态通知rabbitmq。</p>

<p>然后开另外一个shell，执行一下receive.py</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="err">$</span> <span class="n">python</span> <span class="n">receive</span><span class="o">.</span><span class="n">py</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>结果：</p>

<pre><code>[*] Waiting for messages. To exit press CTRL+C
Hello World!
你好刀哥
</code></pre>

<p><strong>3，实例二：工作队列（work queue / task queue）</strong></p>

<p>一般应用于把比较耗时的任务从主线任务分离出来。比如一个http页面请求，
里面需要发送带大附件的邮件、或者是要处理一张头像图片等。这类型工作队列的处理端一般有多个worker进程，
分担队列里面的任务。这就有点负载均衡的策略在里面了。
尽量做到每个进程的工作量比较平均，而且是完成了一个任务才接 第二个任务。看看我们的实现吧。</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="err">$</span> <span class="n">cd</span> <span class="n">tut2</span>
</span><span class="line"><span class="err">$</span> <span class="n">vim</span> <span class="n">manager</span><span class="o">.</span><span class="n">py</span> <span class="p">(</span><span class="err">代码如下</span><span class="p">)</span>
</span><span class="line"><span class="err">$</span> <span class="n">vim</span> <span class="n">worker</span><span class="o">.</span><span class="n">py</span> <span class="p">(</span><span class="err">代码如下</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>首先是消息发送程序: manager.py</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c">#!/usr/bin/env python</span>
</span><span class="line"><span class="c"># -*- coding: utf-8 -*-</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">pika</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">sys</span>
</span><span class="line"><span class="n">parameters</span> <span class="o">=</span> <span class="n">pika</span><span class="o">.</span><span class="n">ConnectionParameters</span><span class="p">(</span><span class="n">host</span> <span class="o">=</span> <span class="s">&#39;localhost&#39;</span> <span class="p">)</span>
</span><span class="line"><span class="n">connection</span> <span class="o">=</span> <span class="n">pika</span><span class="o">.</span><span class="n">BlockingConnection</span><span class="p">(</span><span class="n">parameters</span><span class="p">)</span>
</span><span class="line"><span class="n">channel</span> <span class="o">=</span> <span class="n">connection</span><span class="o">.</span><span class="n">channel</span><span class="p">()</span>
</span><span class="line"><span class="n">channel</span><span class="o">.</span><span class="n">queue_declare</span><span class="p">(</span><span class="n">queue</span> <span class="o">=</span> <span class="s">&#39;task_queue&#39;</span> <span class="p">,</span> <span class="n">durable</span> <span class="o">=</span> <span class="bp">True</span> <span class="p">)</span>
</span><span class="line"><span class="n">message</span> <span class="o">=</span> <span class="s">&#39; &#39;</span> <span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span> <span class="mi">1</span> <span class="p">:])</span> <span class="ow">or</span> <span class="s">&quot;Hello World!&quot;</span>
</span><span class="line"><span class="n">channel</span><span class="o">.</span><span class="n">basic_publish</span><span class="p">(</span><span class="n">exchange</span> <span class="o">=</span> <span class="s">&#39;&#39;</span><span class="p">,</span>
</span><span class="line">                       <span class="n">routing_key</span> <span class="o">=</span> <span class="s">&#39;task_queue&#39;</span> <span class="p">,</span>
</span><span class="line">                       <span class="n">body</span> <span class="o">=</span> <span class="n">message</span><span class="p">,</span>
</span><span class="line">                       <span class="n">properties</span> <span class="o">=</span> <span class="n">pika</span><span class="o">.</span><span class="n">BasicProperties</span><span class="p">(</span>
</span><span class="line">                          <span class="n">delivery_mode</span> <span class="o">=</span> <span class="mi">2</span> <span class="p">,</span> <span class="c"># make message persistent</span>
</span><span class="line">                       <span class="p">))</span>
</span><span class="line"><span class="k">print</span> <span class="s">&quot; [x] Sent </span><span class="si">%r</span><span class="s">&quot;</span> <span class="o">%</span> <span class="p">(</span><span class="n">message</span><span class="p">,)</span>
</span><span class="line"><span class="n">connection</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>其中第8行的 durable=True 声明了队列需要持久化，第14行的 delivery_mode = 2 声明了队列的消息需要持久化。</p>

<p>然后写一个接收消息脚本：worker.py</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c">#!/usr/bin/env python</span>
</span><span class="line"><span class="c"># -*- coding: utf-8 -*-</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">pika</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">time</span>
</span><span class="line"><span class="n">connection</span> <span class="o">=</span> <span class="n">pika</span><span class="o">.</span><span class="n">BlockingConnection</span><span class="p">(</span><span class="n">pika</span><span class="o">.</span><span class="n">ConnectionParameters</span><span class="p">(</span>
</span><span class="line">         <span class="n">host</span> <span class="o">=</span> <span class="s">&#39;localhost&#39;</span> <span class="p">))</span>
</span><span class="line"><span class="n">channel</span> <span class="o">=</span> <span class="n">connection</span><span class="o">.</span><span class="n">channel</span><span class="p">()</span>
</span><span class="line"><span class="n">channel</span><span class="o">.</span><span class="n">queue_declare</span><span class="p">(</span><span class="n">queue</span> <span class="o">=</span> <span class="s">&#39;task_queue&#39;</span> <span class="p">,</span> <span class="n">durable</span> <span class="o">=</span> <span class="bp">True</span> <span class="p">)</span>
</span><span class="line"><span class="k">print</span> <span class="s">&#39; [*] Waiting for messages. To exit press CTRL+C&#39;</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">callback</span><span class="p">(</span><span class="n">ch</span><span class="p">,</span> <span class="n">method</span><span class="p">,</span> <span class="n">properties</span><span class="p">,</span> <span class="n">body</span><span class="p">):</span>
</span><span class="line">     <span class="k">print</span> <span class="s">&quot; [x] Received </span><span class="si">%r</span><span class="s">&quot;</span> <span class="o">%</span> <span class="p">(</span><span class="n">body</span><span class="p">,)</span>
</span><span class="line">     <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span> <span class="n">body</span><span class="o">.</span><span class="n">count</span><span class="p">(</span> <span class="s">&#39;.&#39;</span> <span class="p">)</span> <span class="p">)</span>
</span><span class="line">     <span class="k">print</span> <span class="s">&quot; [x] Done&quot;</span>
</span><span class="line">     <span class="n">ch</span><span class="o">.</span><span class="n">basic_ack</span><span class="p">(</span><span class="n">delivery_tag</span> <span class="o">=</span> <span class="n">method</span><span class="o">.</span><span class="n">delivery_tag</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">channel</span><span class="o">.</span><span class="n">basic_qos</span><span class="p">(</span><span class="n">prefetch_count</span> <span class="o">=</span> <span class="mi">1</span> <span class="p">)</span>
</span><span class="line"><span class="n">channel</span><span class="o">.</span><span class="n">basic_consume</span><span class="p">(</span><span class="n">callback</span><span class="p">,</span>
</span><span class="line">                       <span class="n">queue</span> <span class="o">=</span> <span class="s">&#39;task_queue&#39;</span> <span class="p">)</span>
</span><span class="line"><span class="n">channel</span><span class="o">.</span><span class="n">start_consuming</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>其中第15行的 basic_ack 是执行完任务通知rabbitmq，
第17行的basic_qos是告诉rabbitmq只有当worker完成了任务以后才分派1条新的消息，实现公平分派。</p>

<p>测试方法，开3个bash，2个跑worker，1个跑manager：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="err">$</span> <span class="n">python</span> <span class="n">manager</span><span class="o">.</span><span class="n">py</span> <span class="n">task1</span><span class="o">.</span>
</span><span class="line"><span class="err">$</span> <span class="n">python</span> <span class="n">manager</span><span class="o">.</span><span class="n">py</span> <span class="n">task2</span><span class="o">..</span>
</span><span class="line"><span class="err">$</span> <span class="n">python</span> <span class="n">manager</span><span class="o">.</span><span class="n">py</span> <span class="n">task3</span><span class="err">…</span>
</span><span class="line"><span class="err">$</span> <span class="n">python</span> <span class="n">manager</span><span class="o">.</span><span class="n">py</span> <span class="n">task4</span><span class="err">…</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>点号数量决定worker工作的时间( 其实是睡觉时间，呵呵 time.sleep(body.count(‘.’)) )。
而在worker那边，可以看到每个worker都处理了两个任务。
这种分配机制就是所谓的循环调度（Round-robin dispatching）</p>

<p><strong>4，实例三：发布和订阅</strong></p>

<p>发布订阅模式，简单来说就像是广播，一个消息发布出来以后，所有订阅者都能听到，
至于接收到这个信息以后大家做什么就看具体个人了。</p>

<p>啊！怎么忽然冒出个X，是什么玩意！这个X就是所谓的exchange，简单来说就是消息的管家，
由他决定接收到的信息是放特定的队列，还是所有队列，还是直接丢弃。</p>

<p>其实在前两个实例里面，已经用到了exchange （channel.basic_publish(exchange=”,…），
这个exchange的名字为空，外号无名（人若无名，便可专心练剑~）。他会把你的消息都转达给routing_key指明的队列。
当我们声明了exchange以后，我们需要为queue和exchange建立联系，这时候，就要用到绑定（binding）了。</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="err">$</span> <span class="n">cd</span> <span class="n">tut3</span>
</span><span class="line"><span class="err">$</span> <span class="n">vim</span> <span class="n">emitlog</span><span class="o">.</span><span class="n">py</span> <span class="p">(</span><span class="err">代码如下</span><span class="p">)</span>
</span><span class="line"><span class="err">$</span> <span class="n">vim</span> <span class="n">recelog</span><span class="o">.</span><span class="n">py</span> <span class="p">(</span><span class="err">代码如下</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>日志生产者</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>emitlog.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c">#!/usr/bin/env python</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">pika</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">sys</span>
</span><span class="line">
</span><span class="line"><span class="n">connection</span> <span class="o">=</span> <span class="n">pika</span><span class="o">.</span><span class="n">BlockingConnection</span><span class="p">(</span><span class="n">pika</span><span class="o">.</span><span class="n">ConnectionParameters</span><span class="p">(</span>
</span><span class="line">         <span class="n">host</span> <span class="o">=</span> <span class="s">&#39;localhost&#39;</span> <span class="p">))</span>
</span><span class="line"><span class="n">channel</span> <span class="o">=</span> <span class="n">connection</span><span class="o">.</span><span class="n">channel</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="n">channel</span><span class="o">.</span><span class="n">exchange_declare</span><span class="p">(</span><span class="n">exchange</span> <span class="o">=</span> <span class="s">&#39;logs&#39;</span> <span class="p">,</span>
</span><span class="line">                          <span class="nb">type</span> <span class="o">=</span> <span class="s">&#39;fanout&#39;</span> <span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">message</span> <span class="o">=</span> <span class="s">&#39; &#39;</span> <span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span> <span class="mi">1</span> <span class="p">:])</span> <span class="ow">or</span> <span class="s">&quot;info: Hello World!&quot;</span>
</span><span class="line"><span class="n">channel</span><span class="o">.</span><span class="n">basic_publish</span><span class="p">(</span><span class="n">exchange</span> <span class="o">=</span> <span class="s">&#39;logs&#39;</span> <span class="p">,</span>
</span><span class="line">                       <span class="n">routing_key</span> <span class="o">=</span> <span class="s">&#39;&#39;</span><span class="p">,</span>
</span><span class="line">                       <span class="n">body</span> <span class="o">=</span> <span class="n">message</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span> <span class="s">&quot; [x] Sent </span><span class="si">%r</span><span class="s">&quot;</span> <span class="o">%</span> <span class="p">(</span><span class="n">message</span><span class="p">,)</span>
</span><span class="line"><span class="n">connection</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>然后是日志消费者</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>recelog.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c">#!/usr/bin/env python</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">pika</span>
</span><span class="line">
</span><span class="line"><span class="n">connection</span> <span class="o">=</span> <span class="n">pika</span><span class="o">.</span><span class="n">BlockingConnection</span><span class="p">(</span><span class="n">pika</span><span class="o">.</span><span class="n">ConnectionParameters</span><span class="p">(</span>
</span><span class="line">         <span class="n">host</span> <span class="o">=</span> <span class="s">&#39;localhost&#39;</span> <span class="p">))</span>
</span><span class="line"><span class="n">channel</span> <span class="o">=</span> <span class="n">connection</span><span class="o">.</span><span class="n">channel</span><span class="p">()</span>
</span><span class="line"><span class="n">channel</span><span class="o">.</span><span class="n">exchange_declare</span><span class="p">(</span><span class="n">exchange</span> <span class="o">=</span> <span class="s">&#39;logs&#39;</span> <span class="p">,</span>
</span><span class="line">                          <span class="nb">type</span> <span class="o">=</span> <span class="s">&#39;fanout&#39;</span> <span class="p">)</span>
</span><span class="line"><span class="n">result</span> <span class="o">=</span> <span class="n">channel</span><span class="o">.</span><span class="n">queue_declare</span><span class="p">(</span><span class="n">exclusive</span> <span class="o">=</span> <span class="bp">True</span> <span class="p">)</span>
</span><span class="line"><span class="n">queue_name</span> <span class="o">=</span> <span class="n">result</span><span class="o">.</span><span class="n">method</span><span class="o">.</span><span class="n">queue</span>
</span><span class="line"><span class="n">channel</span><span class="o">.</span><span class="n">queue_bind</span><span class="p">(</span><span class="n">exchange</span> <span class="o">=</span> <span class="s">&#39;logs&#39;</span> <span class="p">,</span>
</span><span class="line">                    <span class="n">queue</span> <span class="o">=</span> <span class="n">queue_name</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span> <span class="s">&#39; [*] Waiting for logs. To exit press CTRL+C&#39;</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">callback</span><span class="p">(</span><span class="n">ch</span><span class="p">,</span> <span class="n">method</span><span class="p">,</span> <span class="n">properties</span><span class="p">,</span> <span class="n">body</span><span class="p">):</span>
</span><span class="line">     <span class="k">print</span> <span class="s">&quot; [x] </span><span class="si">%r</span><span class="s">&quot;</span> <span class="o">%</span> <span class="p">(</span><span class="n">body</span><span class="p">,)</span>
</span><span class="line">
</span><span class="line"><span class="n">channel</span><span class="o">.</span><span class="n">basic_consume</span><span class="p">(</span><span class="n">callback</span><span class="p">,</span>
</span><span class="line">                       <span class="n">queue</span> <span class="o">=</span> <span class="n">queue_name</span><span class="p">,</span>
</span><span class="line">                       <span class="n">no_ack</span> <span class="o">=</span> <span class="bp">True</span> <span class="p">)</span>
</span><span class="line"><span class="n">channel</span><span class="o">.</span><span class="n">start_consuming</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>测试：</p>

<p>和前一个实例差不多。开3个bash，2个跑recelog，1个跑emitlog。
查看recelog是否都收到emitlog发送的消息。代码里面用 了一个fanout(意思是成扇形展开)类型的exchange，
只要和exchange绑定的queue都能收到一份消息的 copy，routing_key会被忽略掉。</p>

<p><strong>5，路由模式 （选择接收信息）</strong></p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>recelog.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="err">$</span> <span class="n">cd</span> <span class="n">tut4</span>
</span><span class="line"><span class="err">$</span> <span class="n">vim</span> <span class="n">emitlog</span><span class="o">.</span><span class="n">py</span> <span class="p">(</span><span class="err">代码如下</span><span class="p">)</span>
</span><span class="line"><span class="err">$</span> <span class="n">vim</span> <span class="n">recelog</span><span class="o">.</span><span class="n">py</span> <span class="p">(</span><span class="err">代码如下</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>生产者</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>emitlog.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c">#!/usr/bin/env python</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">pika</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">sys</span>
</span><span class="line">
</span><span class="line"><span class="n">connection</span> <span class="o">=</span> <span class="n">pika</span><span class="o">.</span><span class="n">BlockingConnection</span><span class="p">(</span><span class="n">pika</span><span class="o">.</span><span class="n">ConnectionParameters</span><span class="p">(</span>
</span><span class="line">         <span class="n">host</span> <span class="o">=</span> <span class="s">&#39;localhost&#39;</span> <span class="p">))</span>
</span><span class="line"><span class="n">channel</span> <span class="o">=</span> <span class="n">connection</span><span class="o">.</span><span class="n">channel</span><span class="p">()</span>
</span><span class="line"><span class="n">channel</span><span class="o">.</span><span class="n">exchange_declare</span><span class="p">(</span><span class="n">exchange</span> <span class="o">=</span> <span class="s">&#39;direct_logs&#39;</span> <span class="p">,</span>
</span><span class="line">                          <span class="nb">type</span> <span class="o">=</span> <span class="s">&#39;direct&#39;</span> <span class="p">)</span>
</span><span class="line"><span class="n">severity</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span> <span class="mi">1</span> <span class="p">]</span> <span class="k">if</span> <span class="nb">len</span> <span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">1</span> <span class="k">else</span> <span class="s">&#39;info&#39;</span>
</span><span class="line"><span class="n">message</span> <span class="o">=</span> <span class="s">&#39; &#39;</span> <span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span> <span class="mi">2</span> <span class="p">:])</span> <span class="ow">or</span> <span class="s">&#39;Hello World!&#39;</span>
</span><span class="line"><span class="n">channel</span><span class="o">.</span><span class="n">basic_publish</span><span class="p">(</span><span class="n">exchange</span> <span class="o">=</span> <span class="s">&#39;direct_logs&#39;</span> <span class="p">,</span>
</span><span class="line">                       <span class="n">routing_key</span> <span class="o">=</span> <span class="n">severity</span><span class="p">,</span>
</span><span class="line">                       <span class="n">body</span> <span class="o">=</span> <span class="n">message</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span> <span class="s">&quot; [x] Sent </span><span class="si">%r</span><span class="s">:</span><span class="si">%r</span><span class="s">&quot;</span> <span class="o">%</span> <span class="p">(</span><span class="n">severity</span><span class="p">,</span> <span class="n">message</span><span class="p">)</span>
</span><span class="line"><span class="n">connection</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>这里声明exchange时类型定义为direct（直接匹配），就是说只有当一个信息的routing_key和队列的binding_key一 致时，
信息才会被放入到这个队列。消息发布给exchange时必须带上routing_key。其实在消息生产端，队列这个概念是透明的。</p>

<p>消费者</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>recelog.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c">#!/usr/bin/env python</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">pika</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">sys</span>
</span><span class="line">
</span><span class="line"><span class="n">connection</span> <span class="o">=</span> <span class="n">pika</span><span class="o">.</span><span class="n">BlockingConnection</span><span class="p">(</span><span class="n">pika</span><span class="o">.</span><span class="n">ConnectionParameters</span><span class="p">(</span>
</span><span class="line">         <span class="n">host</span> <span class="o">=</span> <span class="s">&#39;localhost&#39;</span> <span class="p">))</span>
</span><span class="line"><span class="n">channel</span> <span class="o">=</span> <span class="n">connection</span><span class="o">.</span><span class="n">channel</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="n">channel</span><span class="o">.</span><span class="n">exchange_declare</span><span class="p">(</span><span class="n">exchange</span> <span class="o">=</span> <span class="s">&#39;direct_logs&#39;</span> <span class="p">,</span>
</span><span class="line">                          <span class="nb">type</span> <span class="o">=</span> <span class="s">&#39;direct&#39;</span> <span class="p">)</span>
</span><span class="line"><span class="n">result</span> <span class="o">=</span> <span class="n">channel</span><span class="o">.</span><span class="n">queue_declare</span><span class="p">(</span><span class="n">exclusive</span> <span class="o">=</span> <span class="bp">True</span> <span class="p">)</span>
</span><span class="line"><span class="n">queue_name</span> <span class="o">=</span> <span class="n">result</span><span class="o">.</span><span class="n">method</span><span class="o">.</span><span class="n">queue</span>
</span><span class="line"><span class="n">severities</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span> <span class="mi">1</span> <span class="p">:]</span>
</span><span class="line"><span class="k">if</span> <span class="ow">not</span> <span class="n">severities</span><span class="p">:</span>
</span><span class="line">     <span class="k">print</span> <span class="o">&gt;&gt;</span> <span class="n">sys</span><span class="o">.</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&quot;Usage: </span><span class="si">%s</span><span class="s"> [info] [warning] [error]&quot;</span> <span class="o">%</span> \
</span><span class="line">                          <span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span> <span class="mi">0</span> <span class="p">],)</span>
</span><span class="line">     <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span> <span class="mi">1</span> <span class="p">)</span>
</span><span class="line"><span class="k">for</span> <span class="n">severity</span> <span class="ow">in</span> <span class="n">severities</span><span class="p">:</span>
</span><span class="line">     <span class="n">channel</span><span class="o">.</span><span class="n">queue_bind</span><span class="p">(</span><span class="n">exchange</span> <span class="o">=</span> <span class="s">&#39;direct_logs&#39;</span> <span class="p">,</span>
</span><span class="line">                        <span class="n">queue</span> <span class="o">=</span> <span class="n">queue_name</span><span class="p">,</span>
</span><span class="line">                        <span class="n">routing_key</span> <span class="o">=</span> <span class="n">severity</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span> <span class="s">&#39; [*] Waiting for logs. To exit press CTRL+C&#39;</span>
</span><span class="line"><span class="k">def</span> <span class="nf">callback</span><span class="p">(</span><span class="n">ch</span><span class="p">,</span> <span class="n">method</span><span class="p">,</span> <span class="n">properties</span><span class="p">,</span> <span class="n">body</span><span class="p">):</span>
</span><span class="line">     <span class="k">print</span> <span class="s">&quot; [x] </span><span class="si">%r</span><span class="s">:</span><span class="si">%r</span><span class="s">&quot;</span> <span class="o">%</span> <span class="p">(</span><span class="n">method</span><span class="o">.</span><span class="n">routing_key</span><span class="p">,</span> <span class="n">body</span><span class="p">,)</span>
</span><span class="line"><span class="n">channel</span><span class="o">.</span><span class="n">basic_consume</span><span class="p">(</span><span class="n">callback</span><span class="p">,</span>
</span><span class="line">                       <span class="n">queue</span> <span class="o">=</span> <span class="n">queue_name</span><span class="p">,</span>
</span><span class="line">                       <span class="n">no_ack</span> <span class="o">=</span> <span class="bp">True</span> <span class="p">)</span>
</span><span class="line"><span class="n">channel</span><span class="o">.</span><span class="n">start_consuming</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这里首先定义exchange，和消息发送端是一样的。然后定义队列，队列是自动命名，
并且只要进程终止，队列就会终止。然后把队列和 exchange绑定，绑定时的routing_key是用户输入的，
如果输入多个key，就做多次的绑定。注意这里的队列还是一个。如果你需要建立两个 队列，就得跑两次这个python脚本。</p>

<p><strong>6，topic和rpc</strong></p>

<p>官方tutorial还有两个高级一点的实例，topic和rpc，这里就不作说明了，留着大家学学英文吧 :)</p>

<p>RabbitMQ提供了很多消息队列客户端代码，比如python，java，c等等，大家可以根据产品或项目的实际情况选择。关键是原理必须搞懂。</p>

<p><strong>其他资源：</strong></p>

<p>中文入门篇：<a href="http://adamlu.net/dev/2011/09/rabbitmq-get-started/">http://adamlu.net/dev/2011/09/rabbitmq-get-started/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[归并排序中对小数组采用插入排序]]></title>
    <link href="http://yidao620c.github.io/blog/20150424/merge-sort.html"/>
    <updated>2015-04-24T10:47:35+08:00</updated>
    <id>http://yidao620c.github.io/blog/20150424/merge-sort</id>
    <content type="html"><![CDATA[<p>纯归并排序的复杂度为O(nlgn)，而纯插入排序的时间复杂度为O(n^2)。数据量很大的时候采用归并排序。</p>

<p>但是在n较小的时候插入排序可能运行的会更快点。因此在归并排序中当子问题变得足够小时，
采用插入排序来使得递归的叶子变粗可以加快排序速度。那么这个足够小到底怎么去衡量呢？ 请看下面：</p>

<p>这么几个我不证明了，比较简单：</p>

<ol>
  <li>插入排序最坏情况下可以在O(nk)时间内排序每个长度为k的n/k个子列表
*. 在最坏情况下可在O(nlg(n/k))的时间内合并这些子表
*. 修订后的算法的最坏情况运行时间复杂度是O(nk + nlg(n/k))</li>
</ol>

<p>那么，O(nk+nlg(n/k))=O(nlgn).只能最大是k=O(lgn).等式左边中第一项是高阶项。
k如果大于lgn,则比归并排序复杂度大了。
左边可以写成nk+nlgn-nlgk，k等于lgn时，就是2nlgn-nlglgn.忽略恒定系数，则与归并排序是一样的。
最后结论： k &lt; lg(n)的时候，使用插入排序。<!--more--></p>

<p>首先是插入排序的实现，这个比较简单：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">insertSort</span><span class="p">(</span><span class="n">seq</span><span class="p">):</span>
</span><span class="line">    <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">seq</span><span class="p">)):</span>
</span><span class="line">        <span class="n">key</span> <span class="o">=</span> <span class="n">seq</span><span class="p">[</span><span class="n">j</span><span class="p">]</span>
</span><span class="line">        <span class="c"># insert arrays[j] into the sorted seq[0...j-1]</span>
</span><span class="line">        <span class="n">i</span> <span class="o">=</span> <span class="n">j</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class="line">        <span class="k">while</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">seq</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">key</span><span class="p">:</span>
</span><span class="line">            <span class="n">seq</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">seq</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span><span class="line">            <span class="n">i</span> <span class="o">-=</span> <span class="mi">1</span>
</span><span class="line">        <span class="n">seq</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">key</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>然后是利用了插入排序的归并排序算法：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">from</span> <span class="nn">math</span> <span class="kn">import</span> <span class="n">log</span>
</span><span class="line">
</span><span class="line"><span class="n">__author__</span> <span class="o">=</span> <span class="s">&#39;Xiong Neng&#39;</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">mergeSort</span><span class="p">(</span><span class="n">seq</span><span class="p">):</span>
</span><span class="line">    <span class="n">mergeSortRange</span><span class="p">(</span><span class="n">seq</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">seq</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">log</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">seq</span><span class="p">))</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">mergeOrderedSeq</span><span class="p">(</span><span class="n">seq</span><span class="p">,</span> <span class="n">left</span><span class="p">,</span> <span class="n">middle</span><span class="p">,</span> <span class="n">right</span><span class="p">):</span>
</span><span class="line">    <span class="sd">&quot;&quot;&quot;</span>
</span><span class="line"><span class="sd">    seq: 待排序序列</span>
</span><span class="line"><span class="sd">    left &lt;= middle &lt;= right</span>
</span><span class="line"><span class="sd">    子数组seq[left..middle]和seq[middle+1..right]都是排好序的</span>
</span><span class="line"><span class="sd">    该排序的时间复杂度为O(n)</span>
</span><span class="line"><span class="sd">    &quot;&quot;&quot;</span>
</span><span class="line">    <span class="n">tempSeq</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class="line">    <span class="n">i</span> <span class="o">=</span> <span class="n">left</span>
</span><span class="line">    <span class="n">j</span> <span class="o">=</span> <span class="n">middle</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class="line">    <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">middle</span> <span class="ow">and</span> <span class="n">j</span> <span class="o">&lt;=</span> <span class="n">right</span><span class="p">:</span>
</span><span class="line">        <span class="k">if</span> <span class="n">seq</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">seq</span><span class="p">[</span><span class="n">j</span><span class="p">]:</span>
</span><span class="line">            <span class="n">tempSeq</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">seq</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span><span class="line">            <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class="line">        <span class="k">else</span><span class="p">:</span>
</span><span class="line">            <span class="n">tempSeq</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">seq</span><span class="p">[</span><span class="n">j</span><span class="p">])</span>
</span><span class="line">            <span class="n">j</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class="line">    <span class="k">if</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">middle</span><span class="p">:</span>
</span><span class="line">        <span class="n">tempSeq</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="n">seq</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">middle</span> <span class="o">+</span> <span class="mi">1</span><span class="p">])</span>
</span><span class="line">    <span class="k">else</span><span class="p">:</span>
</span><span class="line">        <span class="n">tempSeq</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="n">seq</span><span class="p">[</span><span class="n">j</span><span class="p">:</span><span class="n">right</span> <span class="o">+</span> <span class="mi">1</span><span class="p">])</span>
</span><span class="line">    <span class="n">seq</span><span class="p">[</span><span class="n">left</span><span class="p">:</span><span class="n">right</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">tempSeq</span><span class="p">[:]</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">mergeSortRange</span><span class="p">(</span><span class="n">seq</span><span class="p">,</span> <span class="n">start</span><span class="p">,</span> <span class="n">end</span><span class="p">,</span> <span class="n">threshold</span><span class="p">):</span>
</span><span class="line">    <span class="sd">&quot;&quot;&quot;</span>
</span><span class="line"><span class="sd">    归并排序一个序列的子序列</span>
</span><span class="line"><span class="sd">    start: 子序列的start下标</span>
</span><span class="line"><span class="sd">    end: 子序列的end下标</span>
</span><span class="line"><span class="sd">    threshold: 待排序长度低于这个值，就采用插入排序</span>
</span><span class="line"><span class="sd">    &quot;&quot;&quot;</span>
</span><span class="line">    <span class="k">if</span> <span class="n">end</span> <span class="o">-</span> <span class="n">start</span> <span class="o">&lt;</span> <span class="n">threshold</span><span class="p">:</span>
</span><span class="line">        <span class="n">tempSeq</span> <span class="o">=</span> <span class="n">seq</span><span class="p">[</span><span class="n">start</span><span class="p">:</span> <span class="n">end</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span>
</span><span class="line">        <span class="n">insertSort</span><span class="p">(</span><span class="n">tempSeq</span><span class="p">)</span>
</span><span class="line">        <span class="n">seq</span><span class="p">[</span><span class="n">start</span><span class="p">:</span> <span class="n">end</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">tempSeq</span><span class="p">[:]</span>
</span><span class="line">    <span class="k">elif</span> <span class="n">start</span> <span class="o">&lt;</span> <span class="n">end</span><span class="p">:</span>  <span class="c"># 如果start &gt;= end就终止递归调用</span>
</span><span class="line">        <span class="n">middle</span> <span class="o">=</span> <span class="p">(</span><span class="n">start</span> <span class="o">+</span> <span class="n">end</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span>
</span><span class="line">        <span class="n">mergeSortRange</span><span class="p">(</span><span class="n">seq</span><span class="p">,</span> <span class="n">start</span><span class="p">,</span> <span class="n">middle</span><span class="p">,</span> <span class="n">threshold</span><span class="p">)</span>  <span class="c"># 排好左边的一半</span>
</span><span class="line">        <span class="n">mergeSortRange</span><span class="p">(</span><span class="n">seq</span><span class="p">,</span> <span class="n">middle</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">end</span><span class="p">,</span> <span class="n">threshold</span><span class="p">)</span>  <span class="c"># 再排好右边的一半</span>
</span><span class="line">        <span class="n">mergeOrderedSeq</span><span class="p">(</span><span class="n">seq</span><span class="p">,</span> <span class="n">start</span><span class="p">,</span> <span class="n">middle</span><span class="p">,</span> <span class="n">end</span><span class="p">)</span>  <span class="c"># 最后合并排序结果</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class="line">    <span class="n">test</span> <span class="o">=</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">8</span><span class="p">]</span>
</span><span class="line">    <span class="n">mergeSort</span><span class="p">(</span><span class="n">test</span><span class="p">)</span>
</span><span class="line">    <span class="k">print</span><span class="p">(</span><span class="n">test</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>比较清楚，应该不需要再多解释了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CentOS6.5上LVS和KeepAlived搭建高可用负载均衡集群]]></title>
    <link href="http://yidao620c.github.io/blog/20150423/lvs-keepalived.html"/>
    <updated>2015-04-23T16:40:04+08:00</updated>
    <id>http://yidao620c.github.io/blog/20150423/lvs-keepalived</id>
    <content type="html"><![CDATA[<h2 id="section">一、理论知识（原理）</h2>
<p>我们不仅要知其然，而且要知其所以然，所以先给大家准备一些理论知识课，这样对以后的应用将会事半功倍。</p>

<p><strong>1、什么是LVS？</strong></p>

<p>请阅读作者章文嵩博士自己的研究报告，共计4部分，看完后对集群和LVS就有了初步的了解，不懂时可以翻翻。</p>

<ul>
  <li>LVS项目介绍：<a href="http://www.linuxvirtualserver.org/zh/lvs1.html">http://www.linuxvirtualserver.org/zh/lvs1.html</a></li>
  <li>LVS集群的体系结构：<a href="http://www.linuxvirtualserver.org/zh/lvs2.html">http://www.linuxvirtualserver.org/zh/lvs2.html</a></li>
  <li>LVS集群中的IP负载均衡技术：<a href="http://www.linuxvirtualserver.org/zh/lvs3.html">http://www.linuxvirtualserver.org/zh/lvs3.html</a></li>
  <li>LVS集群的负载调度：<a href="http://www.linuxvirtualserver.org/zh/lvs4.html">http://www.linuxvirtualserver.org/zh/lvs4.html</a></li>
</ul>

<p><strong>2、什么是KeepAlived?</strong></p>

<p>Keepalived原理与实战精讲： <a href="http://zhumeng8337797.blog.163.com/blog/static/100768914201191762253640/">http://zhumeng8337797.blog.163.com/blog/static/100768914201191762253640/</a></p>

<p><strong>3、什么是CentOS?</strong></p>

<p>百度百科给出的答案：<a href="http://baike.baidu.com/link?url=X3SzN3bJWjW_PkWC6GB2MTs5KhVmxBAxnCRjs9W7-IARDiHloZ_oRWj17BEz0kY3">什么是CentOS</a></p>

<p><strong>4、小结</strong></p>

<p>相信读了以上的理论知识后，已经对集群的实现原理有了大概的了解，那接下来我们就开始动手吧。<!--more--></p>

<p>系统架构图：</p>

<p><img src="http://yidaospace.qiniudn.com/0002.png" alt="" /></p>

<h2 id="section-1">二、服务器的安装</h2>
<p>我们会用到4个服务器，横向分2层：</p>

<p>第1层是LVS服务器（1个主，1个从；从可以多个）用来转发请求，需要安装ipvsadm和keepAlived；
第2层是提供具体服务的服务器（表中用了2个；当然也可以是多个，现实的应用会上百台。），
安装的是具体的服务，这里我们安装的是TOMCAT。</p>

<p>主机环境如下：</p>

<pre><code>192.168.203.107　 LVS_VIP（VIP：Virtual IP）
192.168.203.103　 LVS_Master　　
192.168.203.104　 LVS_Backup
192.168.203.93　  WEB1_RealServer
192.168.203.94　  WEB2_RealServer
</code></pre>

<p>克隆：我们先安装配置好一层的一个服务器，其他服务器使用克隆方式。</p>

<h3 id="virtualbox4212">1. 安装虚拟机VirtualBox4.2.12</h3>

<h3 id="centos-65">2. 安装CentOS 6.5</h3>

<p>这一步先安装一台虚拟机，然后其他的通过克隆方式安装，不过注意的是，
克隆之后需要修改相应的IP地址已经eth0等配置。具体方法是：</p>

<h4 id="etcudevrulesd70-persistent-netrules">1) 修改/etc/udev/rules.d/70-persistent-net.rules</h4>

<p>拷贝eth1的硬件地址到eth0，删除eth1信息</p>

<h4 id="etcsysconfignetwork-scriptsifcfg-eth0">2) 配置/etc/sysconfig/network-scripts/ifcfg-eth0</h4>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class=""><span class="line">DEVICE="eth0"
</span><span class="line">BOOTPROTO="static"
</span><span class="line">HWADDR="00:0C:29:91:42:2C"
</span><span class="line">MTU="1500"
</span><span class="line">NM_CONTROLLED="yes"
</span><span class="line">ONBOOT="yes"
</span><span class="line">IPADDR=192.168.203.94
</span><span class="line">NETMASK=255.255.255.0
</span><span class="line">GATEWAY=192.168.203.254</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="reboot">3) reboot</h4>

<p>这样可以保证所有的机器网卡都是eth0接口</p>

<h3 id="lvslvskeepalived">3. LVS层安装LVS和KeepAlived</h3>

<p>首先是LVS_MASTER机器的安装配置，打开LVS_Master服务器；</p>

<p>先安装lvs_master的服务，lvs_backup使用克隆虚拟机的方式，然后在配置文件修改三个参数即可，下面会讲到。</p>

<h4 id="ipvsadm">1) 安装IPVSADM</h4>

<p>知识点：IPVSADM理解为IPVS管理工具；LVS（Linux Virtual Server）的核心为IPVS（IP Virtual Server），
从Linux内核版本2.6起，IPVS模块已经编译进了Linux内核。</p>

<p>使用yum命令进行安装，系统会选择最适合内核版本的ipvsadm</p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">yum -y install ipvsadm</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="section-2">2) 防火墙</h4>

<p>为了测试方便，我们直接关闭防火墙，在实际使用中开启需要的端口即可。</p>

<p>具体配置可参考：<a href="http://www.cnblogs.com/rockee/archive/2012/05/17/2506671.html">http://www.cnblogs.com/rockee/archive/2012/05/17/2506671.html</a></p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">service iptables stop</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="keepalived-">3) KeepAlived 的安装</h4>

<p>知识点：KeepAlived是一个路由软件，它主要的目的是让我们通过简单的配置，实现高可用负载均衡，
当然负载均衡依赖于Linux虚拟服务器（IPVS）的内核模块，其高可用性使用VRRP协议来实现，
KeepAlived不仅会检测负载均衡服务器池中每台机器的健康状况并通知IPVS将非健康的机器从池中移除掉；
同时它还能对负载均衡调度器本身实现健康状态检查，当主负载均衡调度器出现问题时，备用负载均衡调度器顶替主进行工作。
逐条执行如下命令，执行的原因暂不解释，实际就是需要这些组件，安装即可。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class=""><span class="line">cd /usr/src
</span><span class="line">yum -y install openssl-devel
</span><span class="line">wget http://www.keepalived.org/software/keepalived-1.2.7.tar.gz
</span><span class="line">wget http://mirror.centos.org/centos/6/os/x86_64/Packages/popt-static-1.13-7.el6.x86_64.rpm
</span><span class="line">yum -y install popt-static-1.13-7.el6.x86_64.rpm
</span><span class="line">yum -y install kernel-devel make gcc openssl-devel libnl* popt*
</span><span class="line">ln -s /usr/src/kernels/2.6.32-220.13.1.el6.x86_64/ /usr/src/linux
</span><span class="line">tar zxvf keepalived-1.2.7.tar.gz
</span><span class="line">cd keepalived-1.2.7
</span><span class="line">./configure --with-kernel-dir=/usr/src/kernels/2.6.32-358.2.1.el6.x86_64/
</span><span class="line">make &amp;&amp; make install
</span><span class="line">cp /usr/local/etc/rc.d/init.d/keepalived /etc/rc.d/init.d/
</span><span class="line">cp /usr/local/etc/sysconfig/keepalived /etc/sysconfig/
</span><span class="line">mkdir /etc/keepalived
</span><span class="line">cp /usr/local/etc/keepalived/keepalived.conf /etc/keepalived/
</span><span class="line">cp /usr/local/sbin/keepalived /usr/sbin/</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>注：上面的kernel路径自己去用tab键弄出来
OK，KeepAlived安装完毕，然后进行配置。</p>

<h4 id="keepalivde">4) KeepAlivde的配置</h4>

<p><strong>一步：打开IP Forward 功能</strong></p>

<p>（LVS现有三种负载均衡规则都需要打开此功能，如果不打开此功能，下面的配置配得再好都无济于事）</p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">vim /etc/sysctl.conf</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>打开后修改里面“net.ipv4.ip_forward = 1”，修改好后保存退出，执行如下命令使设置立即生效</p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sysctl -p</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>第二步：KeepAlivde的配置</strong></p>

<p>配置文件在这个位置： /etc/keepalived/keepalived.conf</p>

<p>启动KeepAlived时，它默认会去/etc/keepalived下面找它的配置文件，
所以上面命令中我们已经将这个配置文件复制过来了。现在进行修改：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
</pre></td><td class="code"><pre><code class=""><span class="line">! Configuration File for keepalived
</span><span class="line">
</span><span class="line">global_defs {
</span><span class="line">   notification_email {
</span><span class="line">     test@sina.com
</span><span class="line">   }
</span><span class="line">   notification_email_from admin@test.com
</span><span class="line">   smtp_server 127.0.0.1
</span><span class="line">   smtp_connect_timeout 30
</span><span class="line">   router_id LVS_MASTER
</span><span class="line">}
</span><span class="line">
</span><span class="line">vrrp_instance VI_1 {
</span><span class="line">    state MASTER
</span><span class="line">    interface eth0
</span><span class="line">    virtual_router_id 60
</span><span class="line">    priority 100
</span><span class="line">    advert_int 1
</span><span class="line">    authentication {
</span><span class="line">        auth_type PASS
</span><span class="line">        auth_pass 1111
</span><span class="line">    }
</span><span class="line">    virtual_ipaddress {
</span><span class="line">        192.168.203.107
</span><span class="line">    }
</span><span class="line">}
</span><span class="line">
</span><span class="line">virtual_server 192.168.203.107 8080 {
</span><span class="line">    delay_loop 6
</span><span class="line">    lb_algo rr
</span><span class="line">    lb_kind DR
</span><span class="line">    nat_mask 255.255.255.0
</span><span class="line">    persistence_timeout 50
</span><span class="line">    protocol TCP
</span><span class="line">
</span><span class="line">    real_server 192.168.203.93 8080 {
</span><span class="line">        weight 1
</span><span class="line">        TCP_CHECK {
</span><span class="line">            connect_timeout 3
</span><span class="line">            nb_get_retry 3
</span><span class="line">            delay_before_retry 3
</span><span class="line">        }
</span><span class="line">    }
</span><span class="line">
</span><span class="line">    real_server 192.168.203.94 8080 {
</span><span class="line">        weight 1
</span><span class="line">        TCP_CHECK {
</span><span class="line">            connect_timeout 3
</span><span class="line">            nb_get_retry 3
</span><span class="line">            delay_before_retry 3
</span><span class="line">
</span><span class="line">    }
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>以上就完成了keepAlived的配置，下面进行启动</p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">chkconfig keepalived on
</span><span class="line">service keepalived start</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>查看进程</p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">ps aux | grep keepalived</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>Keepalived正常运行时，共启动3个进程，其中一个进程是父进程，负责监控其子进程；
一个是vrrp子进程；另外一个是checkers子进程。</p>

<p>查看下虚拟IP是否已经加上（重要）</p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class=""><span class="line">[root@centos03 keepalived-1.2.7]# ip a
</span><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 16436 qdisc noqueue state UNKNOWN
</span><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
</span><span class="line">    inet 127.0.0.1/8 scope host lo
</span><span class="line">    inet6 ::1/128 scope host
</span><span class="line">       valid_lft forever preferred_lft forever
</span><span class="line">2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000
</span><span class="line">    link/ether 08:00:27:81:29:7d brd ff:ff:ff:ff:ff:ff
</span><span class="line">    inet 192.168.203.103/24 brd 192.168.203.255 scope global eth0
</span><span class="line">    inet 192.168.203.107/32 scope global eth0
</span><span class="line">    inet6 fe80::a00:27ff:fe81:297d/64 scope link
</span><span class="line">       valid_lft forever preferred_lft forever</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>说明虚拟IP已经自动配置上了。</p>

<p>还有3个命令在先列示下，并不用执行</p>

<ul>
  <li>显示集群中服务器ip信息：<code>ipvsadm -ln</code></li>
  <li>查看日志：<code>tail -f /var/log/messages</code></li>
  <li>查看请求转发情况：<code>ipvsadm -lcn | grep 虚拟IP</code></li>
</ul>

<p>至此，LVS_MASTER服务器已经配置好并启动了，接下来我们配置web服务器。</p>

<h4 id="webweb1realserver">5) WEB服务器WEB1_RealServer的配置</h4>

<p>1. 克隆虚拟机WEB1_RealServer(192.168.203.93)；
2. 配置虚拟IP启动脚本</p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">vim /etc/init.d/realserver.sh</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>在文件中输入如下脚本：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c">#!/bin/bash</span>
</span><span class="line"><span class="nv">SNS_VIP</span><span class="o">=</span>192.168.203.107
</span><span class="line">. /etc/rc.d/init.d/functions
</span><span class="line"><span class="k">case</span> <span class="s2">&quot;$1&quot;</span> in
</span><span class="line">start<span class="o">)</span>
</span><span class="line"> ifconfig lo:0 <span class="nv">$SNS_VIP</span> netmask 255.255.255.255 broadcast <span class="nv">$SNS_VIP</span>
</span><span class="line"> /sbin/route add -host <span class="nv">$SNS_VIP</span> dev lo:0
</span><span class="line"> <span class="nb">echo</span> <span class="s2">&quot;1&quot;</span> &gt;/proc/sys/net/ipv4/conf/lo/arp_ignore
</span><span class="line"> <span class="nb">echo</span> <span class="s2">&quot;2&quot;</span> &gt;/proc/sys/net/ipv4/conf/lo/arp_announce
</span><span class="line"> <span class="nb">echo</span> <span class="s2">&quot;1&quot;</span> &gt;/proc/sys/net/ipv4/conf/all/arp_ignore
</span><span class="line"> <span class="nb">echo</span> <span class="s2">&quot;2&quot;</span> &gt;/proc/sys/net/ipv4/conf/all/arp_announce
</span><span class="line"> sysctl -p &gt;/dev/null 2&gt;<span class="p">&amp;</span>1
</span><span class="line"> <span class="nb">echo</span> <span class="s2">&quot;RealServer Start OK&quot;</span>
</span><span class="line"> <span class="p">;;</span>
</span><span class="line">stop<span class="o">)</span>
</span><span class="line"> ifconfig lo:0 down
</span><span class="line"> route del <span class="nv">$SNS_VIP</span> &gt;/dev/null 2&gt;<span class="p">&amp;</span>1
</span><span class="line"> <span class="nb">echo</span> <span class="s2">&quot;0&quot;</span> &gt;/proc/sys/net/ipv4/conf/lo/arp_ignore
</span><span class="line"> <span class="nb">echo</span> <span class="s2">&quot;0&quot;</span> &gt;/proc/sys/net/ipv4/conf/lo/arp_announce
</span><span class="line"> <span class="nb">echo</span> <span class="s2">&quot;0&quot;</span> &gt;/proc/sys/net/ipv4/conf/all/arp_ignore
</span><span class="line"> <span class="nb">echo</span> <span class="s2">&quot;0&quot;</span> &gt;/proc/sys/net/ipv4/conf/all/arp_announce
</span><span class="line"> <span class="nb">echo</span> <span class="s2">&quot;RealServer Stoped&quot;</span>
</span><span class="line"> <span class="p">;;</span>
</span><span class="line"> *<span class="o">)</span>
</span><span class="line"> <span class="nb">echo</span> <span class="s2">&quot;Usage: $0 {start|stop}&quot;</span>
</span><span class="line"> <span class="nb">exit </span>1
</span><span class="line"><span class="k">esac</span>
</span><span class="line"><span class="nb">exit </span>0
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>3. 安装配置TOMCAT</p>

<p>我测试用的是TOMCAT6</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">yum -y install tomcat6 tomcat6-webapps tomcat6-admin-webapps
</span><span class="line">service tomcat6 start
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>关闭防火墙：service iptables stop</p>

<p>打开浏览器：http://192.168.203.93:8080</p>

<p>会看到TOMCAT的熟悉页面了。</p>

<p>为了测试负载均衡，我们将这个页面改下，以更好的标识这个网页是本服务器的</p>

<p>Tomcat6安装目录位于/usr/share/tomcat6，所以我们要编辑tomcat下的webapps/ROOT/index.html这个文件。</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nb">cd</span> /usr/share/tomcat6/webapps/ROOT/
</span><span class="line">cat /dev/null &gt; index.html
</span><span class="line">vim index.html
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>将如下文本写入index.html，然后打开浏览器：http://192.168.203.93:8080，已经改变：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">web1 192.168.203.93
</span></code></pre></td></tr></table></div></figure></notextile></div>
<ul>
  <li>启动虚拟IP的脚本</li>
</ul>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">sh /etc/init.d/realserver.sh start
</span><span class="line">ifconfig
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>运行后会看到网络有一个虚拟IP：</p>

<pre><code>[root@centos01 ROOT]# ifconfig
eth0      Link encap:Ethernet  HWaddr 08:00:27:59:AB:1D
          inet addr:192.168.203.93  Bcast:192.168.203.255  Mask:255.255.255.0
          inet6 addr: fe80::a00:27ff:fe59:ab1d/64 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:81006 errors:0 dropped:0 overruns:0 frame:0
          TX packets:12305 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000
          RX bytes:83023415 (79.1 MiB)  TX bytes:1645604 (1.5 MiB)

lo        Link encap:Local Loopback
          inet addr:127.0.0.1  Mask:255.0.0.0
          inet6 addr: ::1/128 Scope:Host
          UP LOOPBACK RUNNING  MTU:16436  Metric:1
          RX packets:46 errors:0 dropped:0 overruns:0 frame:0
          TX packets:46 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0
          RX bytes:3559 (3.4 KiB)  TX bytes:3559 (3.4 KiB)

lo:0      Link encap:Local Loopback
          inet addr:192.168.203.107  Mask:255.255.255.255
          UP LOOPBACK RUNNING  MTU:16436  Metric:1
</code></pre>

<p>4. 去LVS_MASTER服务器的终端查看下ipvsadm，查看已经连接上了WEB1服务器，运行命令</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">ipvsadm -ln
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>结果如下：</p>

<pre><code>[root@centos03 keepalived-1.2.7]# ipvsadm -ln
IP Virtual Server version 1.2.1 (size=4096)
Prot LocalAddress:Port Scheduler Flags
  -&gt; RemoteAddress:Port           Forward Weight ActiveConn InActConn
TCP  192.168.203.107:8080 rr persistent 50
  -&gt; 192.168.203.93:8080          Route   1      0          0
</code></pre>

<p>已经可以看到有服务器加入进来了。
此时我们访问网页http://192.168.203.107:8080，出现界面显示web1 192.168.203.93；
OK，至此已经能实现负载均衡了，接下来我们通过克隆实现多个主机的试验。</p>

<p>5. 服务器克隆</p>

<p>1) 从LVS_MASTER克隆一个LVS_BACKUP服务器，然后修改其中的参数，
MASTER与BACKUP配置仅三处不同：global_defs中的router_id、vrrp_instance中的state、priority
（注意keepAlived的配置文件中有一个网卡设备，虚拟机的网卡设备可能是不一样的，
有的是eth0，有的是eth1，所以也是要改动的，否则从服务器的服务器很有可能服务不正常）</p>

<p>配置好的如下文：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">! Configuration File <span class="k">for</span> keepalived
</span><span class="line">
</span><span class="line">global_defs <span class="o">{</span>
</span><span class="line">   notification_email <span class="o">{</span>
</span><span class="line">     <span class="nb">test</span>@sina.com
</span><span class="line">   <span class="o">}</span>
</span><span class="line">   notification_email_from admin@test.com
</span><span class="line">   smtp_server 127.0.0.1
</span><span class="line">   smtp_connect_timeout 30
</span><span class="line">   router_id LVS_BACKUP
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line">vrrp_instance VI_1 <span class="o">{</span>
</span><span class="line">    state BACKUP
</span><span class="line">    interface eth0
</span><span class="line">    virtual_router_id 60
</span><span class="line">    priority 90
</span><span class="line">    advert_int 1
</span><span class="line">    authentication <span class="o">{</span>
</span><span class="line">        auth_type PASS
</span><span class="line">        auth_pass 1111
</span><span class="line">    <span class="o">}</span>
</span><span class="line">    virtual_ipaddress <span class="o">{</span>
</span><span class="line">        192.168.203.107
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line">virtual_server 192.168.203.107 <span class="m">8080</span> <span class="o">{</span>
</span><span class="line">    delay_loop 6
</span><span class="line">    lb_algo rr
</span><span class="line">    lb_kind DR
</span><span class="line">    nat_mask 255.255.255.0
</span><span class="line">    persistence_timeout 50
</span><span class="line">    protocol TCP
</span><span class="line">
</span><span class="line">    real_server 192.168.203.93 <span class="m">8080</span> <span class="o">{</span>
</span><span class="line">        weight 1
</span><span class="line">        TCP_CHECK <span class="o">{</span>
</span><span class="line">            connect_timeout 3
</span><span class="line">            nb_get_retry 3
</span><span class="line">            delay_before_retry 3
</span><span class="line">        <span class="o">}</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    real_server 192.168.203.94 <span class="m">8080</span> <span class="o">{</span>
</span><span class="line">        weight 1
</span><span class="line">        TCP_CHECK <span class="o">{</span>
</span><span class="line">            connect_timeout 3
</span><span class="line">            nb_get_retry 3
</span><span class="line">            delay_before_retry 3
</span><span class="line">        <span class="o">}</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>2) 从WEB1_RealServer克隆一个WEB2_RealServer，将tomcat的index.html文件改为web2 192.168.203.94。
（这里的IP是我测试的，您的可以自定义）启动realserver.sh脚本。</p>

<p>3) OK，至此我们已经虚拟出2个LVS服务器，一对主从；2个WEB服务器，web1和web2。
接下来我们进行测试，看能否满足我们的初始需求。</p>

<h2 id="section-3">三、负载和可用性测试</h2>

<p>开启每个服务器的相关服务，关闭防火墙，我们开始进行测试。</p>

<p>测试LVS层</p>

<p>1）首先执行ip a命令，主服务器会存在一个虚拟IP，从服务器不会存在这个虚拟IP。现在浏览网页显示正常。虚拟IP如图所示：</p>

<pre><code>显示集群中服务器ip信息：ipvsadm -ln
查看日志：tail -f /var/log/messages
查看请求转发情况：ipvsadm -lcn | grep 虚拟IP
</code></pre>

<p>2）现在停掉LVS_MASTER的keepAlived服务，看LVS_BACKUP是否可以自动加上虚拟IP地址，并且开始转发请求。</p>

<p>（注意keepAlived的配置文件中有一个网卡设备，虚拟机的网卡设备可能是不一样的，有的是eth0，
有的是eth1，所以也是要改动的，否则从服务器的服务器很有可能服务不正常）
之后你通过命令：ip a去分别查看LVS_MASTER和LVS_BACKUP机器，结果正如预料一样，BACKUP立即接管了MASTER的工作。
切换很快，访问网页：http://192.168.203.107:8080也能正常显示。</p>

<p>3）恢复主服务器的keepAlived服务后，主服务器立刻接替了从服务器的工作，就不做截图了。和第1）个正常效果是一样的。</p>

<p>4）测试WEB服务器，看能否正常提供服务。先断掉WEB1，看下效果。</p>

<p>ipvsadm中的服务器列表，已经去掉了WEB1服务器，访问网页也只能访问到WEB2服务器了。</p>

<p>5）开启WEB1，关掉WEB2。测试正常。</p>

<h2 id="section-4">四、总结</h2>

<p>经过不断的测试，终于完成了这篇稿子，望大家能够指正。还有一点就是很多时候都是配置文件中的一些小毛病造成的，比如：</p>

<ol>
  <li>keepAlived中的通知邮箱好像必须要写，否则不正确；</li>
  <li>keepAlived中的网卡设备要注意，按照服务器的实际情况填写；</li>
  <li>使用时，必要的端口要打开，或者关掉防火墙。否则有事不提供服务；</li>
  <li>一些命令行的执行，少一些参数执行就可能会有一些问题。</li>
  <li>LINUX系统的目录结构也头疼，要不断的熟悉，否则也让你故意弄混了。</li>
</ol>

<p>—————————————————全文完——————————————–</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用PyInstaller打包Python程序]]></title>
    <link href="http://yidao620c.github.io/blog/20150423/pyinstaller.html"/>
    <updated>2015-04-23T10:22:26+08:00</updated>
    <id>http://yidao620c.github.io/blog/20150423/pyinstaller</id>
    <content type="html"><![CDATA[<h3 id="pyinstaller">PyInstaller介绍：</h3>
<p>PyInstaller是一个能将Python程序转换成单个可执行文件的程序，
操作系统支持Windows, Linux, Mac OS X, Solaris和AIX。并且很多包都支持开箱即用，不依赖环境。</p>

<p>环境为windows7操作系统，python2.7.8 virtual environment</p>

<p>官网：<a href="https://github.com/pyinstaller/pyinstaller">https://github.com/pyinstaller/pyinstaller</a></p>

<h3 id="section">详细步骤：</h3>
<p>1. win7下面先安装这个依赖：pywin32，下载下来后切换到venv2.7，然后使用easy_install xxx.exe安装</p>

<p>2. pip安装PyInstaller：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">pip install pyinstaller</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>3. 打包过程中可能会出现msvcp90.dll找不到的问题，
去<a href="http://cn.dll-files.com/msvcp90.dll.html">http://cn.dll-files.com/msvcp90.dll.html</a>下载第三个zip文件，
解压后放到C:\Windows\System32，如果是64位的还要放到C:\Windows\SysWOW64目录下。<!--more--></p>

<p>4. 再次运行报MSVCR90.dll找不到，同理去<a href="http://cn.dll-files.com/MSVCR90.dll.html">http://cn.dll-files.com/MSVCR90.dll.html</a>下载MSVCR90.dll，
放到C:\Windows\System32和C:\Windows\SysWOW64中。</p>

<p>5. 将你的整个程序先复制到某个临时文件夹下面，比如D:\tmp\core-wxpython，此目录下有个main.py是执行入口</p>

<p>6. 执行build命令，并添加必要的搜索路径，外加执行文件的图标：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">cd D:\tmp\core-wxpython
</span><span class="line">pyinstaller -F -w -i d:\tmp\main.ico main.py</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>如果还想添加自定义的依赖库，就要加上-p参数：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">pyinstaller -F -w -p D:\tmp\core-python\libs -i d:\tmp\main.ico main.py</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>参数说明：</p>

<pre><code>-F 表示生成单个可执行文件
-w 表示去掉控制台窗口，这在GUI界面时非常有用。不过如果是命令行程序的话那就把这个选项删除吧！
-p 表示你自己自定义需要加载的类路径，一般情况下用不到
-i 表示可执行文件的图标
</code></pre>

<p><em>注意的事情</em></p>

<p>1). 检查生成的\XXX\build\pyi.win32\XXX\warnXXX.txt(XXX是你的项目名）中，
是否缺少了必要的模块。如果有缺少的，那么去如上所述，添加必要的搜素路径，
使得pyinstaller在运行时，可以找到对应的模块并集成进来。</p>

<p>2). 此处我这里没有UPX，暂时没去折腾。估计是用UPX去压缩，压缩后所生成的exe文件的大小，会小得多。</p>

<p>7. 如果发现报错：pywintypes.error: (193, ‘LoadLibraryEx’… )
原因是添加图标后缀必须是xxx.ico才行，重新去网上下载一个ico格式的图片，再次运行就好了。</p>

<p>8. 我测试了一个使用wxpython写的gui程序，源码里面引用了一张图片，
使用wx.Image(os.path.abspath(<strong>file</strong>/me.jpg), wx.BITMAP_TYPE_JPEG)来加载，
然后打包成exe后发现找不到图片了，报错。</p>

<p>解决办法：</p>

<p>第一步，在程序中将资源文件都放到一个单独的文件夹中，比如项目根目录下面的resources</p>

<p>第二步，修改程序中引用这些资源文件比如图片的代码：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">resource_path</span><span class="p">(</span><span class="n">relative_path</span><span class="p">):</span>
</span><span class="line">    <span class="sd">&quot;&quot;&quot;定义一个读取相对路径的函数&quot;&quot;&quot;</span>
</span><span class="line">    <span class="k">if</span> <span class="nb">hasattr</span><span class="p">(</span><span class="n">sys</span><span class="p">,</span> <span class="s">&quot;_MEIPASS&quot;</span><span class="p">):</span>
</span><span class="line">        <span class="n">base_path</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">_MEIPASS</span>
</span><span class="line">    <span class="k">else</span><span class="p">:</span>
</span><span class="line">        <span class="n">base_path</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">abspath</span><span class="p">(</span><span class="s">&quot;.&quot;</span><span class="p">)</span>
</span><span class="line">    <span class="k">return</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">base_path</span><span class="p">,</span> <span class="n">relative_path</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>然后每次在获取图片的时候，这么引用它的目录：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">img</span> <span class="o">=</span> <span class="n">wx</span><span class="o">.</span><span class="n">Image</span><span class="p">(</span><span class="n">resource_path</span><span class="p">(</span><span class="s">&#39;resources/me.jpg&#39;</span><span class="p">),</span> <span class="n">wx</span><span class="o">.</span><span class="n">BITMAP_TYPE_JPEG</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>第三步，先运行第6步生成一个main.spec文件</p>

<p>第四步，修改main.spec文件：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c"># -*- mode: python -*-</span>
</span><span class="line"><span class="n">a</span> <span class="o">=</span> <span class="n">Analysis</span><span class="p">([</span><span class="s">&#39;main.py&#39;</span><span class="p">],</span>
</span><span class="line">             <span class="n">pathex</span><span class="o">=</span><span class="p">[</span><span class="s">&#39;d:</span><span class="se">\\</span><span class="s">tmp</span><span class="se">\\</span><span class="s">core-wxpython&#39;</span><span class="p">],</span>
</span><span class="line">             <span class="n">hiddenimports</span><span class="o">=</span><span class="p">[],</span>
</span><span class="line">             <span class="n">hookspath</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span>
</span><span class="line">             <span class="n">runtime_hooks</span><span class="o">=</span><span class="bp">None</span><span class="p">)</span>
</span><span class="line"><span class="n">pyz</span> <span class="o">=</span> <span class="n">PYZ</span><span class="p">(</span><span class="n">a</span><span class="o">.</span><span class="n">pure</span><span class="p">)</span>
</span><span class="line"><span class="n">exe</span> <span class="o">=</span> <span class="n">EXE</span><span class="p">(</span><span class="n">pyz</span><span class="p">,</span>
</span><span class="line">          <span class="n">a</span><span class="o">.</span><span class="n">scripts</span><span class="p">,</span>
</span><span class="line">          <span class="n">a</span><span class="o">.</span><span class="n">binaries</span><span class="p">,</span>
</span><span class="line">          <span class="n">a</span><span class="o">.</span><span class="n">zipfiles</span><span class="p">,</span>
</span><span class="line">          <span class="n">a</span><span class="o">.</span><span class="n">datas</span><span class="p">,</span>
</span><span class="line">          <span class="p">[(</span><span class="s">&#39;</span><span class="se">\\</span><span class="s">resources</span><span class="se">\\</span><span class="s">me.jpg&#39;</span><span class="p">,</span><span class="s">&#39;D:</span><span class="se">\\</span><span class="s">tmp</span><span class="se">\\</span><span class="s">core-wxpython</span><span class="se">\\</span><span class="s">resources</span><span class="se">\\</span><span class="s">me.jpg&#39;</span><span class="p">,</span><span class="s">&#39;DATA&#39;</span><span class="p">)],</span>
</span><span class="line">          <span class="n">name</span><span class="o">=</span><span class="s">&#39;main.exe&#39;</span><span class="p">,</span>
</span><span class="line">          <span class="n">debug</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
</span><span class="line">          <span class="n">strip</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span>
</span><span class="line">          <span class="n">upx</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
</span><span class="line">          <span class="n">console</span><span class="o">=</span><span class="bp">True</span> <span class="p">,</span> <span class="n">icon</span><span class="o">=</span><span class="s">&#39;d:</span><span class="se">\\</span><span class="s">tmp</span><span class="se">\\</span><span class="s">main.ico&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>注意：我在a.datas下面添加了那行配置，具体的路径自己去修改下。</p>

<p>上面是添加单个文件，如果有多个文件，可以一个个的添加。不过如果文件多了话，那么就使用下面的方法：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c"># -*- mode: python -*-</span>
</span><span class="line"><span class="n">a</span> <span class="o">=</span> <span class="n">Analysis</span><span class="p">([</span><span class="s">&#39;main.py&#39;</span><span class="p">],</span>
</span><span class="line">             <span class="n">pathex</span><span class="o">=</span><span class="p">[</span><span class="s">&#39;d:</span><span class="se">\\</span><span class="s">tmp</span><span class="se">\\</span><span class="s">core-wxpython&#39;</span><span class="p">],</span>
</span><span class="line">             <span class="n">hiddenimports</span><span class="o">=</span><span class="p">[],</span>
</span><span class="line">             <span class="n">hookspath</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span>
</span><span class="line">             <span class="n">runtime_hooks</span><span class="o">=</span><span class="bp">None</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">extra_datas</span><span class="p">(</span><span class="n">mydir</span><span class="p">):</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">rec_glob</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">files</span><span class="p">):</span>
</span><span class="line">        <span class="kn">import</span> <span class="nn">os</span>
</span><span class="line">        <span class="kn">import</span> <span class="nn">glob</span>
</span><span class="line">        <span class="k">for</span> <span class="n">d</span> <span class="ow">in</span> <span class="n">glob</span><span class="o">.</span><span class="n">glob</span><span class="p">(</span><span class="n">p</span><span class="p">):</span>
</span><span class="line">            <span class="k">if</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">isfile</span><span class="p">(</span><span class="n">d</span><span class="p">):</span>
</span><span class="line">                <span class="n">files</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">d</span><span class="p">)</span>
</span><span class="line">            <span class="n">rec_glob</span><span class="p">(</span><span class="s">&quot;</span><span class="si">%s</span><span class="s">/*&quot;</span> <span class="o">%</span> <span class="n">d</span><span class="p">,</span> <span class="n">files</span><span class="p">)</span>
</span><span class="line">    <span class="n">files</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class="line">    <span class="n">rec_glob</span><span class="p">(</span><span class="s">&quot;</span><span class="si">%s</span><span class="s">/*&quot;</span> <span class="o">%</span> <span class="n">mydir</span><span class="p">,</span> <span class="n">files</span><span class="p">)</span>
</span><span class="line">    <span class="n">extra_datas</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class="line">    <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="n">files</span><span class="p">:</span>
</span><span class="line">        <span class="n">extra_datas</span><span class="o">.</span><span class="n">append</span><span class="p">((</span><span class="n">f</span><span class="p">,</span> <span class="n">f</span><span class="p">,</span> <span class="s">&#39;DATA&#39;</span><span class="p">))</span>
</span><span class="line">
</span><span class="line">    <span class="k">return</span> <span class="n">extra_datas</span>
</span><span class="line">
</span><span class="line"><span class="c"># append the &#39;resources&#39; dir</span>
</span><span class="line"><span class="n">a</span><span class="o">.</span><span class="n">datas</span> <span class="o">+=</span> <span class="n">extra_datas</span><span class="p">(</span><span class="s">&#39;resources&#39;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">pyz</span> <span class="o">=</span> <span class="n">PYZ</span><span class="p">(</span><span class="n">a</span><span class="o">.</span><span class="n">pure</span><span class="p">)</span>
</span><span class="line"><span class="n">exe</span> <span class="o">=</span> <span class="n">EXE</span><span class="p">(</span><span class="n">pyz</span><span class="p">,</span>
</span><span class="line">          <span class="n">a</span><span class="o">.</span><span class="n">scripts</span><span class="p">,</span>
</span><span class="line">          <span class="n">a</span><span class="o">.</span><span class="n">binaries</span><span class="p">,</span>
</span><span class="line">          <span class="n">a</span><span class="o">.</span><span class="n">zipfiles</span><span class="p">,</span>
</span><span class="line">          <span class="n">a</span><span class="o">.</span><span class="n">datas</span><span class="p">,</span>
</span><span class="line">          <span class="n">name</span><span class="o">=</span><span class="s">&#39;main.exe&#39;</span><span class="p">,</span>
</span><span class="line">          <span class="n">debug</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
</span><span class="line">          <span class="n">strip</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span>
</span><span class="line">          <span class="n">upx</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
</span><span class="line">          <span class="n">console</span><span class="o">=</span><span class="bp">True</span> <span class="p">,</span> <span class="n">icon</span><span class="o">=</span><span class="s">&#39;d:</span><span class="se">\\</span><span class="s">tmp</span><span class="se">\\</span><span class="s">main.ico&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>它会把某个指定的文件下的所有文件递归的添加到最终的包中。省去很多事情！</p>

<p>第五步，执行：pyinstaller D:\tmp\core-wxpython\main.spec</p>

<p>然后就大功告成了！！！在dist目录下面有个main.exe单独的可执行文件，打开它吧。^_^</p>

<p>如果在执行过程中出错，或者双击打开没任何反应。
可以先去掉-w参数后，在控制台窗口打开这个可执行文件，会输出详细出错信息去调试。</p>

<h3 id="section-1">其他问题记录</h3>
<p>1. 找不到pkg_resources</p>

<pre><code>ImportError: No module named pkg_resources
</code></pre>

<p>解决办法是在安装pycrypto之前，先安装distribute库</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">curl</span> <span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">svn</span><span class="o">.</span><span class="n">apache</span><span class="o">.</span><span class="n">org</span><span class="o">/</span><span class="n">repos</span><span class="o">/</span><span class="n">asf</span><span class="o">/</span><span class="n">oodt</span><span class="o">/</span><span class="n">tools</span><span class="o">/</span><span class="n">oodtsite</span><span class="o">.</span><span class="n">publisher</span><span class="o">/</span><span class="n">trunk</span><span class="o">/</span><span class="n">distribute_setup</span><span class="o">.</span><span class="n">py</span> <span class="o">|</span> <span class="n">python</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>然后再安装windows下面对应的pycrypto库</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c"># http://www.voidspace.org.uk/python/modules.shtml#pycrypto</span>
</span><span class="line"><span class="n">easy_install</span> <span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">www</span><span class="o">.</span><span class="n">voidspace</span><span class="o">.</span><span class="n">org</span><span class="o">.</span><span class="n">uk</span><span class="o">/</span><span class="n">downloads</span><span class="o">/</span><span class="n">pycrypto26</span><span class="o">/</span><span class="n">pycrypto</span><span class="o">-</span><span class="mf">2.6</span><span class="o">.</span><span class="n">win</span><span class="o">-</span><span class="n">amd64</span><span class="o">-</span><span class="n">py2</span><span class="o">.</span><span class="mf">7.</span><span class="n">exe</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>2. 打包时加上-w选项去掉console时出错</p>

<p>不要在程序中使用任何print语句，或者是你将stdout重定向到一个日志、文件或任何其他非控制台地方。</p>

<p>最好的方法是利用日志功能，将输出定向到日志文件中去，在main函数开头添加如下代码：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">import</span> <span class="nn">logging</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">tempfile</span>
</span><span class="line"><span class="n">logging</span><span class="o">.</span><span class="n">basicConfig</span><span class="p">(</span><span class="n">level</span><span class="o">=</span><span class="n">logging</span><span class="o">.</span><span class="n">INFO</span><span class="p">,</span>
</span><span class="line">                    <span class="n">filename</span><span class="o">=</span><span class="n">tempfile</span><span class="o">.</span><span class="n">TemporaryFile</span><span class="p">()</span><span class="o">.</span><span class="n">name</span><span class="p">,</span>
</span><span class="line">                    <span class="n">format</span><span class="o">=</span><span class="s">&#39;</span><span class="si">%(asctime)s</span><span class="s"> </span><span class="si">%(message)s</span><span class="s">&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>用到logging的时候，需要配置日志到文件中，而不是console：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">import</span> <span class="nn">logging</span>
</span><span class="line"><span class="n">_LOGGING</span> <span class="o">=</span> <span class="n">logging</span><span class="o">.</span><span class="n">getLogger</span><span class="p">(</span><span class="n">__file__</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>3. pyinstaller用one file方式打包的程式如果有用到subprocess.Popen會有問題</p>

<p>问题参考：<a href="http://www.pyinstaller.org/ticket/597">http://www.pyinstaller.org/ticket/597</a></p>

<p>最後找到的方法是
<a href="http://code.activestate.com/recipes/578300-python-subprocess-hide-console-on-windows/">http://code.activestate.com/recipes/578300-python-subprocess-hide-console-on-windows/</a></p>

<p>建立一個隐藏窗口，就正常了~</p>

<p>最后用pyinstaller設one folder &amp; no console打包都不跳出小窗口了</p>

<p>解决办法就是自定义一个subprocess_call函数来代替subprocess的call调用，不适用Popen了：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">subprocess_call</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span><span class="line">    <span class="c"># also works for Popen. It creates a new *hidden* window,</span>
</span><span class="line">    <span class="c"># so it will work in frozen apps (.exe).</span>
</span><span class="line">    <span class="k">if</span> <span class="n">IS_WIN32</span><span class="p">:</span>
</span><span class="line">        <span class="n">_LOGGING</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s">&#39;subprocess_call==IS_WIN32&#39;</span><span class="p">)</span>
</span><span class="line">        <span class="n">startupinfo</span> <span class="o">=</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">STARTUPINFO</span><span class="p">()</span>
</span><span class="line">        <span class="n">startupinfo</span><span class="o">.</span><span class="n">dwFlags</span> <span class="o">=</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">CREATE_NEW_CONSOLE</span> <span class="o">|</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">STARTF_USESHOWWINDOW</span>
</span><span class="line">        <span class="n">startupinfo</span><span class="o">.</span><span class="n">wShowWindow</span> <span class="o">=</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">SW_HIDE</span>
</span><span class="line">        <span class="n">kwargs</span><span class="p">[</span><span class="s">&#39;startupinfo&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">startupinfo</span>
</span><span class="line">    <span class="n">retcode</span> <span class="o">=</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
</span><span class="line">    <span class="k">return</span> <span class="n">retcode</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>调用方法：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">exresult</span> <span class="o">=</span> <span class="n">subprocess_call</span><span class="p">(</span><span class="n">exe_command</span><span class="p">,</span> <span class="n">shell</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>这个方法会等命令执行完成，返回值为0表示正常结束！</p>

<p>4. 打包后不能放到中文路径下执行
解决办法是下载安装PyInstaller的中文支持库，安装后再重新执行pyinstaller打包命令：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">git</span> <span class="n">clone</span> <span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">github</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">dkw72n</span><span class="o">/</span><span class="n">pyinstaller</span><span class="o">.</span><span class="n">git</span>
</span><span class="line"><span class="n">python</span> <span class="n">setup</span><span class="o">.</span><span class="n">py</span> <span class="n">install</span>
</span><span class="line"><span class="n">pyinstaller</span> <span class="o">-</span><span class="n">F</span> <span class="o">-</span><span class="n">w</span> <span class="o">-</span><span class="n">i</span> <span class="n">d</span><span class="p">:</span>\<span class="n">tmp</span>\<span class="n">main</span><span class="o">.</span><span class="n">ico</span> <span class="n">main</span><span class="o">.</span><span class="n">py</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[fastjson对Date的处理]]></title>
    <link href="http://yidao620c.github.io/blog/20150422/fastjson-date.html"/>
    <updated>2015-04-22T13:45:15+08:00</updated>
    <id>http://yidao620c.github.io/blog/20150422/fastjson-date</id>
    <content type="html"><![CDATA[<p><strong>fastjson对日期的序列化方式：</strong></p>

<p>一种方法是通过注解</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="nd">@JSONField</span> <span class="o">(</span><span class="n">format</span><span class="o">=</span><span class="s">&quot;yyyy-MM-dd HH:mm:ss&quot;</span><span class="o">)</span>
</span><span class="line"><span class="kd">public</span> <span class="n">Date</span> <span class="n">birthday</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>另一种是通过SerializeConfig：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">private</span> <span class="kd">static</span> <span class="n">SerializeConfig</span> <span class="n">mapping</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">SerializeConfig</span><span class="o">();</span>
</span><span class="line"><span class="kd">private</span> <span class="kd">static</span> <span class="n">String</span> <span class="n">dateFormat</span><span class="o">;</span>
</span><span class="line"><span class="kd">static</span> <span class="o">{</span>
</span><span class="line">    <span class="n">dateFormat</span> <span class="o">=</span> <span class="s">&quot;yyyy-MM-dd HH:mm:ss&quot;</span><span class="o">;</span>
</span><span class="line">    <span class="n">mapping</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">Date</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="k">new</span> <span class="nf">SimpleDateFormatSerializer</span><span class="o">(</span><span class="n">dateFormat</span><span class="o">));</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>json字符串中使用单引号：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">String</span> <span class="n">text</span> <span class="o">=</span> <span class="n">JSON</span><span class="o">.</span><span class="na">toJSONString</span><span class="o">(</span><span class="n">object</span><span class="o">,</span> <span class="n">SerializerFeature</span><span class="o">.</span><span class="na">UseSingleQuotes</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<!--more-->
<p>字段显示不同的key：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">User</span> <span class="o">{</span>
</span><span class="line">    <span class="nd">@JSONField</span><span class="o">(</span><span class="n">name</span><span class="o">=</span><span class="s">&quot;ID&quot;</span><span class="o">)</span>
</span><span class="line">    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getId</span><span class="o">()</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="o">...;</span>
</span><span class="line"><span class="n">JSON</span><span class="o">.</span><span class="na">toJSONString</span><span class="o">(</span><span class="n">user</span><span class="o">);</span> <span class="c1">// {&quot;ID&quot;:001}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>类的反序列化 JavaBean：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">String</span> <span class="n">text</span> <span class="o">=</span> <span class="o">...;</span> <span class="c1">// {&quot;r&quot;:255,&quot;g&quot;:0,&quot;b&quot;:0,&quot;alpha&quot;:255}</span>
</span><span class="line"><span class="n">Color</span> <span class="n">color</span> <span class="o">=</span> <span class="n">JSON</span><span class="o">.</span><span class="na">parseObject</span><span class="o">(</span><span class="n">text</span><span class="o">,</span> <span class="n">Color</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>数组：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">String</span> <span class="n">text</span> <span class="o">=</span> <span class="o">...;</span> <span class="c1">// [{ ... }, { ... }]</span>
</span><span class="line"><span class="n">List</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span> <span class="n">users</span> <span class="o">=</span> <span class="n">JSON</span><span class="o">.</span><span class="na">parseArray</span><span class="o">(</span><span class="n">text</span><span class="o">,</span> <span class="n">User</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>泛型：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">String</span> <span class="n">text</span> <span class="o">=</span> <span class="o">...;</span> <span class="c1">// {&quot;name&quot;:{&quot;name&quot;:&quot;ljw&quot;,age:18}}</span>
</span><span class="line"><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">User</span><span class="o">&gt;</span> <span class="n">userMap</span> <span class="o">=</span> <span class="n">JSON</span><span class="o">.</span><span class="na">parseObject</span><span class="o">(</span><span class="n">text</span><span class="o">,</span> <span class="k">new</span> <span class="n">TypeReference</span><span class="o">&lt;</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">User</span><span class="o">&gt;&gt;()</span> <span class="o">{});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>自定义序列化代码示例:</strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">JsonUtil</span> <span class="o">{</span>
</span><span class="line">    <span class="kd">private</span> <span class="kd">static</span> <span class="n">SerializeConfig</span> <span class="n">mapping</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">SerializeConfig</span><span class="o">();</span>
</span><span class="line">    <span class="kd">private</span> <span class="kd">static</span> <span class="n">String</span> <span class="n">dateFormat</span><span class="o">;</span>
</span><span class="line">    <span class="kd">static</span> <span class="o">{</span>
</span><span class="line">        <span class="n">dateFormat</span> <span class="o">=</span> <span class="s">&quot;yyyy-MM-dd HH:mm:ss&quot;</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="cm">/**</span>
</span><span class="line"><span class="cm">     * 默认的处理时间</span>
</span><span class="line"><span class="cm">     *</span>
</span><span class="line"><span class="cm">     * @param jsonText</span>
</span><span class="line"><span class="cm">     * @return</span>
</span><span class="line"><span class="cm">     */</span>
</span><span class="line">    <span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">toJSON</span><span class="o">(</span><span class="n">Object</span> <span class="n">jsonText</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">return</span> <span class="n">JSON</span><span class="o">.</span><span class="na">toJSONString</span><span class="o">(</span><span class="n">jsonText</span><span class="o">,</span>
</span><span class="line">                <span class="n">SerializerFeature</span><span class="o">.</span><span class="na">WriteDateUseDateFormat</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="cm">/**</span>
</span><span class="line"><span class="cm">     * 自定义时间格式</span>
</span><span class="line"><span class="cm">     *</span>
</span><span class="line"><span class="cm">     * @param jsonText</span>
</span><span class="line"><span class="cm">     * @return</span>
</span><span class="line"><span class="cm">     */</span>
</span><span class="line">    <span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">toJSON</span><span class="o">(</span><span class="n">String</span> <span class="n">dateFormat</span><span class="o">,</span> <span class="n">String</span> <span class="n">jsonText</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="n">mapping</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">Date</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="k">new</span> <span class="nf">SimpleDateFormatSerializer</span><span class="o">(</span><span class="n">dateFormat</span><span class="o">));</span>
</span><span class="line">        <span class="k">return</span> <span class="n">JSON</span><span class="o">.</span><span class="na">toJSONString</span><span class="o">(</span><span class="n">jsonText</span><span class="o">,</span> <span class="n">mapping</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>自定义日期格式反序列化示例</strong></p>

<p>先自定义一个日期解析类：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyDateFormatDeserializer</span> <span class="kd">extends</span> <span class="n">DateFormatDeserializer</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">        <span class="kd">private</span> <span class="n">String</span> <span class="n">myFormat</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">        <span class="kd">public</span> <span class="nf">MyDateFormatDeserializer</span><span class="o">(</span><span class="n">String</span> <span class="n">myFormat</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="kd">super</span><span class="o">();</span>
</span><span class="line">            <span class="k">this</span><span class="o">.</span><span class="na">myFormat</span> <span class="o">=</span> <span class="n">myFormat</span><span class="o">;</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">
</span><span class="line">        <span class="nd">@Override</span>
</span><span class="line">        <span class="kd">protected</span> <span class="o">&lt;</span><span class="n">Date</span><span class="o">&gt;</span> <span class="n">Date</span> <span class="nf">cast</span><span class="o">(</span><span class="n">DefaultJSONParser</span> <span class="n">parser</span><span class="o">,</span> <span class="n">Type</span> <span class="n">clazz</span><span class="o">,</span> <span class="n">Object</span> <span class="n">fieldName</span><span class="o">,</span> <span class="n">Object</span> <span class="n">val</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="k">if</span> <span class="o">(</span><span class="n">myFormat</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">            <span class="k">if</span> <span class="o">(</span><span class="n">val</span> <span class="k">instanceof</span> <span class="n">String</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                <span class="n">String</span> <span class="n">strVal</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">val</span><span class="o">;</span>
</span><span class="line">                <span class="k">if</span> <span class="o">(</span><span class="n">strVal</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                    <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class="line">                <span class="o">}</span>
</span><span class="line">
</span><span class="line">                <span class="k">try</span> <span class="o">{</span>
</span><span class="line">                    <span class="k">return</span> <span class="o">(</span><span class="n">Date</span><span class="o">)</span> <span class="k">new</span> <span class="nf">SimpleDateFormat</span><span class="o">(</span><span class="n">myFormat</span><span class="o">).</span><span class="na">parse</span><span class="o">((</span><span class="n">String</span><span class="o">)</span><span class="n">val</span><span class="o">);</span>
</span><span class="line">                <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">ParseException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                    <span class="k">throw</span> <span class="k">new</span> <span class="nf">JSONException</span><span class="o">(</span><span class="s">&quot;parse error&quot;</span><span class="o">);</span>
</span><span class="line">                <span class="o">}</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">            <span class="k">throw</span> <span class="k">new</span> <span class="nf">JSONException</span><span class="o">(</span><span class="s">&quot;parse error&quot;</span><span class="o">);</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>User类</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">User</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class="line">    <span class="kd">public</span> <span class="kt">int</span> <span class="n">height</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">    <span class="nd">@JSONField</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">&quot;com-google-com&quot;</span><span class="o">)</span>
</span><span class="line">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="nd">@JSONField</span><span class="o">(</span><span class="n">format</span> <span class="o">=</span> <span class="s">&quot;yyyy-MM/dd HH:mm:ss&quot;</span><span class="o">)</span>
</span><span class="line">    <span class="kd">public</span> <span class="n">Date</span> <span class="n">birthday</span><span class="o">;</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>测试下：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="cm">/**</span>
</span><span class="line"><span class="cm"> * @param args</span>
</span><span class="line"><span class="cm"> * @throws IOException</span>
</span><span class="line"><span class="cm"> */</span>
</span><span class="line"><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span><span class="o">,</span> <span class="n">ParseException</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">    <span class="n">String</span> <span class="n">json</span> <span class="o">=</span> <span class="s">&quot;{\&quot;name\&quot;:\&quot;22323\&quot;, \&quot;age\&quot;: 1234,&quot;</span> <span class="o">+</span>
</span><span class="line">            <span class="s">&quot; \&quot;birthday\&quot;: \&quot;2012-12/12 12:12:12\&quot;}&quot;</span><span class="o">;</span>
</span><span class="line">    <span class="n">Test</span> <span class="n">t</span> <span class="o">=</span> <span class="n">JSON</span><span class="o">.</span><span class="na">parseObject</span><span class="o">(</span><span class="n">json</span><span class="o">,</span> <span class="n">Test</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">mapping</span><span class="o">,</span>
</span><span class="line">            <span class="n">JSON</span><span class="o">.</span><span class="na">DEFAULT_PARSER_FEATURE</span><span class="o">,</span> <span class="k">new</span> <span class="n">Feature</span><span class="o">[</span><span class="mi">0</span><span class="o">]);</span>
</span><span class="line">    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">t</span><span class="o">.</span><span class="na">name</span><span class="o">);</span>
</span><span class="line">    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">t</span><span class="o">.</span><span class="na">height</span><span class="o">);</span>
</span><span class="line">    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">t</span><span class="o">.</span><span class="na">birthday</span><span class="o">);</span>
</span><span class="line">    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span>
</span><span class="line">            <span class="k">new</span> <span class="nf">SimpleDateFormat</span><span class="o">(</span><span class="s">&quot;yyyy-MM/dd HH:mm:ss&quot;</span><span class="o">).</span><span class="na">parse</span><span class="o">(</span><span class="s">&quot;2012-12/12 12:12:12&quot;</span><span class="o">));</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>总结：</strong></p>

<p>对于JSONField注解，好像只对序列号的格式有影响，反序列化不管这个，不知道为什么，
只能自己写个解析类了，不过这样就更灵活了，可以在里面写很多处理逻辑，
比如json字符串里面日期格式并不是标准格式的时候，就可以先转成标准格式再去解析了。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django1.7开发博客（14）- 集成Xadmin]]></title>
    <link href="http://yidao620c.github.io/blog/20150421/simpleblog-14.html"/>
    <updated>2015-04-21T21:45:29+08:00</updated>
    <id>http://yidao620c.github.io/blog/20150421/simpleblog-14</id>
    <content type="html"><![CDATA[<h3 id="xadmin">Xadmin介绍</h3>
<p>xadmin是一个django的管理后台实现，使用了更加灵活的架构设计及Bootstrap UI框架，
目的是替换现有的admin，国人开发，有许多新的特性：</p>

<ul>
  <li>兼容 Django Admin</li>
  <li>使用 Bootstrap 作为 UI 框架</li>
  <li>编辑页面灵活布局</li>
  <li>主页面仪表盘及小部件</li>
  <li>过滤器强化</li>
  <li>数据导出</li>
  <li>强大的插件机制</li>
</ul>

<p>项目主页：<a href="http://sshwsfc.github.io/django-xadmin/">http://sshwsfc.github.io/django-xadmin/</a></p>

<p>在线demo: <a href="http://demo.xadmin.io/">http://demo.xadmin.io/</a></p>

<h3 id="django">与django的集成</h3>

<p>本篇以simpleblog项目为例，介绍下怎样在django中集成xadmin<!--more--></p>

<h4 id="python27">python2.7环境切换</h4>

<p>注意，前面的教程都是在python3.4环境下开放的。
而目前为止xadmin还只能支持python2，所以我们要在此项目基础上新建一个分支py27，
然后我们创建一个python2.7的virtual environment，切换到此环境下面即可。</p>

<h4 id="section">添加依赖</h4>

<p>在requirements.txt中添加如下的依赖，注意：要用到xadmin的django1.7分支</p>

<pre><code>django-reversion==1.8.5
xlwt==0.7.5
git+https://github.com/sshwsfc/django-xadmin.git@django1.7
</code></pre>

<h4 id="settingspy">修改settings.py</h4>

<p>增加xadmin的配置如下</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">ADMINS</span> <span class="o">=</span> <span class="p">(</span>
</span><span class="line">    <span class="c"># (&#39;Your Name&#39;, &#39;your_email@example.com&#39;),</span>
</span><span class="line"><span class="p">)</span>
</span><span class="line"><span class="n">MANAGERS</span> <span class="o">=</span> <span class="n">ADMINS</span>
</span><span class="line">
</span><span class="line"><span class="c"># Application definition</span>
</span><span class="line"><span class="n">INSTALLED_APPS</span> <span class="o">=</span> <span class="p">(</span>
</span><span class="line">    <span class="c"># ...</span>
</span><span class="line">    <span class="s">&#39;xadmin&#39;</span><span class="p">,</span>
</span><span class="line">    <span class="s">&#39;crispy_forms&#39;</span><span class="p">,</span>
</span><span class="line">    <span class="s">&#39;reversion&#39;</span><span class="p">,</span>
</span><span class="line">    <span class="c"># ...</span>
</span><span class="line"><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="xadmin-1">添加/xadmin的链接</h4>

<p>修改<code>mysite/urls.py</code>如下</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c">#!/usr/bin/env python</span>
</span><span class="line"><span class="c"># -*- encoding: utf-8 -*-</span>
</span><span class="line"><span class="kn">from</span> <span class="nn">django.conf.urls</span> <span class="kn">import</span> <span class="n">patterns</span><span class="p">,</span> <span class="n">include</span><span class="p">,</span> <span class="n">url</span>
</span><span class="line"><span class="c"># version模块自动注册需要版本控制的 Model</span>
</span><span class="line"><span class="kn">from</span> <span class="nn">xadmin.plugins</span> <span class="kn">import</span> <span class="n">xversion</span>
</span><span class="line"><span class="n">xversion</span><span class="o">.</span><span class="n">register_models</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="n">urlpatterns</span> <span class="o">=</span> <span class="n">patterns</span><span class="p">(</span>
</span><span class="line">    <span class="s">&#39;&#39;</span><span class="p">,</span>
</span><span class="line">    <span class="n">url</span><span class="p">(</span><span class="s">r&#39;xadmin/&#39;</span><span class="p">,</span> <span class="n">include</span><span class="p">(</span><span class="n">xadmin</span><span class="o">.</span><span class="n">site</span><span class="o">.</span><span class="n">urls</span><span class="p">),</span> <span class="n">name</span><span class="o">=</span><span class="s">&#39;xadmin&#39;</span><span class="p">),</span>
</span><span class="line">    <span class="c"># ...</span>
</span><span class="line"><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="adminxpy">创建adminx.py</h4>

<p>在blog/目录下创建adminx.py，内容如下</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c">#!/usr/bin/env python</span>
</span><span class="line"><span class="c"># -*- encoding: utf-8 -*-</span>
</span><span class="line"><span class="sd">&quot;&quot;&quot;</span>
</span><span class="line"><span class="sd">Topic: adminx定制类</span>
</span><span class="line"><span class="sd">Desc :</span>
</span><span class="line"><span class="sd">&quot;&quot;&quot;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">xadmin</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">xadmin.views</span> <span class="kn">as</span> <span class="nn">xviews</span>
</span><span class="line"><span class="kn">from</span> <span class="nn">.models</span> <span class="kn">import</span> <span class="n">Tag</span><span class="p">,</span> <span class="n">Category</span><span class="p">,</span> <span class="n">Post</span><span class="p">,</span> <span class="n">Comment</span><span class="p">,</span> <span class="n">Evaluate</span><span class="p">,</span> <span class="n">Page</span>
</span><span class="line"><span class="kn">from</span> <span class="nn">xadmin.layout</span> <span class="kn">import</span> <span class="n">Main</span><span class="p">,</span> <span class="n">TabHolder</span><span class="p">,</span> <span class="n">Tab</span><span class="p">,</span> <span class="n">Fieldset</span><span class="p">,</span> <span class="n">Row</span><span class="p">,</span> <span class="n">Col</span><span class="p">,</span> <span class="n">AppendedText</span><span class="p">,</span> <span class="n">Side</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">BaseSetting</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class="line">    <span class="n">enable_themes</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class="line">    <span class="n">use_bootswatch</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class="line"><span class="n">xadmin</span><span class="o">.</span><span class="n">site</span><span class="o">.</span><span class="n">register</span><span class="p">(</span><span class="n">xviews</span><span class="o">.</span><span class="n">BaseAdminView</span><span class="p">,</span> <span class="n">BaseSetting</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">AdminSettings</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class="line">    <span class="c"># 设置base_site.html的Title</span>
</span><span class="line">    <span class="n">site_title</span> <span class="o">=</span> <span class="s">&#39;博客管理后台&#39;</span>
</span><span class="line">    <span class="c"># 设置base_site.html的Footer</span>
</span><span class="line">    <span class="n">site_footer</span> <span class="o">=</span> <span class="s">&#39;Winhong Inc.&#39;</span>
</span><span class="line">    <span class="n">menu_style</span> <span class="o">=</span> <span class="s">&#39;default&#39;</span>
</span><span class="line">
</span><span class="line">    <span class="c"># 菜单设置</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">get_site_menu</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="k">return</span> <span class="p">(</span>
</span><span class="line">            <span class="p">{</span><span class="s">&#39;title&#39;</span><span class="p">:</span> <span class="s">&#39;博客管理&#39;</span><span class="p">,</span> <span class="s">&#39;perm&#39;</span><span class="p">:</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_model_perm</span><span class="p">(</span><span class="n">Page</span><span class="p">,</span> <span class="s">&#39;change&#39;</span><span class="p">),</span> <span class="s">&#39;menus&#39;</span><span class="p">:</span> <span class="p">(</span>
</span><span class="line">                <span class="p">{</span><span class="s">&#39;title&#39;</span><span class="p">:</span> <span class="s">&#39;所有页面&#39;</span><span class="p">,</span> <span class="s">&#39;icon&#39;</span><span class="p">:</span> <span class="s">&#39;fa fa-vimeo-square&#39;</span>
</span><span class="line">                    <span class="p">,</span> <span class="s">&#39;url&#39;</span><span class="p">:</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_model_url</span><span class="p">(</span><span class="n">Page</span><span class="p">,</span> <span class="s">&#39;changelist&#39;</span><span class="p">)},</span>
</span><span class="line">                <span class="p">{</span><span class="s">&#39;title&#39;</span><span class="p">:</span> <span class="s">&#39;分类目录&#39;</span><span class="p">,</span> <span class="s">&#39;icon&#39;</span><span class="p">:</span> <span class="s">&#39;fa fa-vimeo-square&#39;</span>
</span><span class="line">                    <span class="p">,</span> <span class="s">&#39;url&#39;</span><span class="p">:</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_model_url</span><span class="p">(</span><span class="n">Category</span><span class="p">,</span> <span class="s">&#39;changelist&#39;</span><span class="p">)},</span>
</span><span class="line">            <span class="p">)},</span>
</span><span class="line">        <span class="p">)</span>
</span><span class="line"><span class="n">xadmin</span><span class="o">.</span><span class="n">site</span><span class="o">.</span><span class="n">register</span><span class="p">(</span><span class="n">xviews</span><span class="o">.</span><span class="n">CommAdminView</span><span class="p">,</span> <span class="n">AdminSettings</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">xadmin</span><span class="o">.</span><span class="n">site</span><span class="o">.</span><span class="n">register</span><span class="p">(</span><span class="n">Page</span><span class="p">)</span>
</span><span class="line"><span class="n">xadmin</span><span class="o">.</span><span class="n">site</span><span class="o">.</span><span class="n">register</span><span class="p">(</span><span class="n">Category</span><span class="p">)</span>
</span><span class="line"><span class="c"># xadmin.site.register(Tag)</span>
</span><span class="line"><span class="c"># xadmin.site.register(Post)</span>
</span><span class="line"><span class="c"># xadmin.site.register(Comment)</span>
</span><span class="line"><span class="c"># xadmin.site.register(Evaluate)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>在这里，我们将所有的model都注册到xadmin中去，这样后台就能自动管理它们了。
并且自定义了后台的一些菜单、标题等等。具体的定制方法可以参考xadmin的官方文档。</p>

<h4 id="section-1">添加管理后台链接</h4>

<p>在<code>mysite/templates/mysite/base.html</code>模板中添加/xamdin的管理后台链接：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="o">&lt;</span><span class="n">div</span> <span class="nb">id</span><span class="o">=</span><span class="s">&quot;meta-2&quot;</span> <span class="n">class</span><span class="o">=</span><span class="s">&quot;widget widget_meta&quot;</span><span class="o">&gt;</span>
</span><span class="line">    <span class="o">&lt;</span><span class="n">h3</span><span class="o">&gt;</span><span class="err">功能</span><span class="o">&lt;/</span><span class="n">h3</span><span class="o">&gt;</span>
</span><span class="line">    <span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class="line">        <span class="p">{</span><span class="o">%</span> <span class="k">if</span> <span class="n">user</span><span class="o">.</span><span class="n">is_superuser</span> <span class="o">%</span><span class="p">}</span>
</span><span class="line">        <span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;/xadmin&quot;</span><span class="o">&gt;</span><span class="err">管理站点</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class="line">        <span class="p">{</span><span class="o">%</span> <span class="n">endif</span> <span class="o">%</span><span class="p">}</span>
</span><span class="line">        <span class="p">{</span><span class="o">%</span> <span class="k">if</span> <span class="n">user</span><span class="o">.</span><span class="n">is_authenticated</span> <span class="o">%</span><span class="p">}</span>
</span><span class="line">        <span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class="line">            <span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;{</span><span class="si">% u</span><span class="s">rl &#39;django.contrib.auth.views.logout&#39; %}&quot;</span><span class="o">&gt;</span><span class="err">登出</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span>
</span><span class="line">        <span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class="line">        <span class="p">{</span><span class="o">%</span> <span class="k">else</span> <span class="o">%</span><span class="p">}</span>
</span><span class="line">        <span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class="line">            <span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;{</span><span class="si">% u</span><span class="s">rl &#39;django.contrib.auth.views.login&#39; %}&quot;</span><span class="o">&gt;</span><span class="err">登录</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span>
</span><span class="line">        <span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class="line">        <span class="p">{</span><span class="o">%</span> <span class="n">endif</span> <span class="o">%</span><span class="p">}</span>
</span><span class="line">        <span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;#&quot;</span><span class="o">&gt;</span><span class="err">文章</span><span class="o">&lt;</span><span class="n">abbr</span> <span class="n">title</span><span class="o">=</span><span class="s">&quot;RSS&quot;</span><span class="o">&gt;</span><span class="n">RSS</span><span class="o">&lt;/</span><span class="n">abbr</span><span class="o">&gt;&lt;/</span><span class="n">a</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class="line">    <span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class="line"><span class="o">&lt;/</span><span class="n">div</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="section-2">自定义后台登陆页面</h4>

<p>新建<code>mysite/templates/registration/login.html</code>模板，将xadmin模块中的login.html复制过来，
修改其内容，改成自己想要的形式即可</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
</pre></td><td class="code"><pre><code class="html"><span class="line">{% load staticfiles %}
</span><span class="line">{% load i18n %}
</span><span class="line"><span class="nt">&lt;html&gt;</span>
</span><span class="line"><span class="nt">&lt;head&gt;</span>
</span><span class="line">    <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;viewport&quot;</span>
</span><span class="line">          <span class="na">content=</span><span class="s">&quot;width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0&quot;</span><span class="nt">&gt;</span>
</span><span class="line">    <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;description&quot;</span> <span class="na">content=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;</span>
</span><span class="line">    <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;author&quot;</span> <span class="na">content=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;</span>
</span><span class="line">    <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;robots&quot;</span> <span class="na">content=</span><span class="s">&quot;NONE,NOARCHIVE&quot;</span><span class="nt">&gt;</span>
</span><span class="line">    <span class="nt">&lt;title&gt;</span>用户登录 - SimpleBlog<span class="nt">&lt;/title&gt;</span>
</span><span class="line">    <span class="c">&lt;!--...中间省略...--&gt;</span>
</span><span class="line">    <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;{% static &#39;xadmin/vendor/jquery/jquery.js&#39; %}&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class="line"><span class="nt">&lt;/head&gt;</span>
</span><span class="line"><span class="nt">&lt;body</span> <span class="na">class=</span><span class="s">&quot;login&quot;</span><span class="nt">&gt;</span>
</span><span class="line"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;container&quot;</span><span class="nt">&gt;</span>
</span><span class="line">    <span class="nt">&lt;form</span> <span class="na">method=</span><span class="s">&quot;post&quot;</span> <span class="na">action=</span><span class="s">&quot;{% url &#39;django.contrib.auth.views.login&#39; %}&quot;</span><span class="nt">&gt;</span>
</span><span class="line">        {% csrf_token %}
</span><span class="line">        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;panel panel-default panel-single&quot;</span> <span class="na">id=</span><span class="s">&quot;panel-login&quot;</span><span class="nt">&gt;</span>
</span><span class="line">            <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;panel-heading&quot;</span><span class="nt">&gt;</span>
</span><span class="line">                <span class="nt">&lt;h2</span> <span class="na">class=</span><span class="s">&quot;form-signin-heading&quot;</span><span class="nt">&gt;</span>请登录<span class="nt">&lt;/h2&gt;</span>
</span><span class="line">            <span class="nt">&lt;/div&gt;</span>
</span><span class="line">            <span class="c">&lt;!--...中间省略...--&gt;</span>
</span><span class="line">        <span class="nt">&lt;/div&gt;</span>
</span><span class="line">    <span class="nt">&lt;/form&gt;</span>
</span><span class="line">
</span><span class="line"><span class="nt">&lt;/div&gt;</span>
</span><span class="line"><span class="c">&lt;!--...中间省略...--&gt;</span>
</span><span class="line"><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;{% static &#39;xadmin/js/xadmin.main.js&#39; %}&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class="line"><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;{% static &#39;xadmin/js/xadmin.responsive.js&#39; %}&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class="line"><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span>
</span><span class="line">        <span class="na">src=</span><span class="s">&quot;{% static &#39;xadmin/vendor/jquery-ui/jquery.ui.effect.js&#39; %}&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class="line"><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;{% static &#39;xadmin/js/xadmin.plugin.themes.js&#39; %}&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class="line">
</span><span class="line"><span class="nt">&lt;/body&gt;</span>
</span><span class="line"><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这些完成后，我们打开应用，访问<code>管理站点</code>链接，应该可以看到如下的登录页面</p>

<p><img src="http://yidaospace.qiniudn.com/dj110.png" alt="" /></p>

<p>登录后的效果</p>

<p><img src="http://yidaospace.qiniudn.com/dj111.jpg" alt="" /></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django1.7开发博客（13）- redis缓存]]></title>
    <link href="http://yidao620c.github.io/blog/20150421/simpleblog-13.html"/>
    <updated>2015-04-21T20:27:29+08:00</updated>
    <id>http://yidao620c.github.io/blog/20150421/simpleblog-13</id>
    <content type="html"><![CDATA[<h3 id="wiki">Wiki</h3>
<p>Redis 是一个高性能的key-value数据库。redis的出现，
很大程度补偿了memcached这类keyvalue存储的不足，在部分场合可以对关系数据库起到很好的补充作用。
它提供了Python，Ruby，Erlang，PHP客户端，使用很方便。</p>

<p>目前Redis已经发布了3.0版本，正式支持分布式，这个特性太强大，以至于你再不用就对不住自己了。</p>

<h3 id="section">性能测试</h3>
<p>服务器配置：Linux 2.6, Xeon X3320 2.5Ghz</p>

<p>SET操作每秒钟110000次，GET操作每秒钟81000次</p>

<p>stackoverflow网站使用Redis做为缓存服务器。</p>

<h3 id="redis">安装redis</h3>
<p>服务器安装篇我写了专门文章，
请参阅<a href="http://yidao620c.github.io/blog/20150418/redis-install.html">redis入门与安装</a></p>

<h3 id="django">django中的配置</h3>
<p>我们希望在本博客系统中，对于文章点击数、阅览数等数据实现缓存，提高效率。<!--more--></p>

<h4 id="requirementstxt">requirements.txt</h4>
<p>添加如下内容，方便部署到heroku上面</p>

<pre><code>redis==2.10.3
django-redis==3.7.2
APScheduler==3.0.1
</code></pre>

<h4 id="settingspy">settings.py配置</h4>
<p>新增内容</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">from</span> <span class="nn">urllib.parse</span> <span class="kn">import</span> <span class="n">urlparse</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">dj_database_url</span>
</span><span class="line">
</span><span class="line"><span class="n">redis_url</span> <span class="o">=</span> <span class="n">urlparse</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;REDISTOGO_URL&#39;</span><span class="p">,</span> <span class="s">&#39;redis://localhost:6959&#39;</span><span class="p">))</span>
</span><span class="line"><span class="n">CACHES</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">    <span class="s">&#39;default&#39;</span><span class="p">:</span> <span class="p">{</span>
</span><span class="line">        <span class="s">&#39;BACKEND&#39;</span><span class="p">:</span> <span class="s">&#39;redis_cache.cache.RedisCache&#39;</span><span class="p">,</span>
</span><span class="line">        <span class="s">&#39;LOCATION&#39;</span><span class="p">:</span> <span class="s">&#39;{0}:{1}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">redis_url</span><span class="o">.</span><span class="n">hostname</span><span class="p">,</span> <span class="n">redis_url</span><span class="o">.</span><span class="n">port</span><span class="p">),</span>
</span><span class="line">        <span class="s">&#39;OPTIONS&#39;</span><span class="p">:</span> <span class="p">{</span>
</span><span class="line">            <span class="s">&#39;DB&#39;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class="line">            <span class="s">&#39;PASSWORD&#39;</span><span class="p">:</span> <span class="n">redis_url</span><span class="o">.</span><span class="n">password</span><span class="p">,</span>
</span><span class="line">            <span class="s">&#39;CLIENT_CLASS&#39;</span><span class="p">:</span> <span class="s">&#39;redis_cache.client.DefaultClient&#39;</span><span class="p">,</span>
</span><span class="line">            <span class="s">&#39;PICKLE_VERSION&#39;</span><span class="p">:</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span>  <span class="c"># Use the latest protocol version</span>
</span><span class="line">            <span class="s">&#39;SOCKET_TIMEOUT&#39;</span><span class="p">:</span> <span class="mi">60</span><span class="p">,</span>  <span class="c"># in seconds</span>
</span><span class="line">            <span class="s">&#39;IGNORE_EXCEPTIONS&#39;</span><span class="p">:</span> <span class="bp">True</span><span class="p">,</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="n">SESSION_ENGINE</span> <span class="o">=</span> <span class="s">&#39;django.contrib.sessions.backends.cache&#39;</span>
</span><span class="line"><span class="n">SESSION_CACHE_ALIAS</span> <span class="o">=</span> <span class="s">&#39;default&#39;</span>
</span><span class="line">
</span><span class="line"><span class="c"># 本地开发配置放在local_settings.py中</span>
</span><span class="line"><span class="k">try</span><span class="p">:</span>
</span><span class="line">    <span class="kn">from</span> <span class="nn">.local_settings</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class="line"><span class="k">except</span> <span class="ne">ImportError</span><span class="p">:</span>
</span><span class="line">    <span class="k">pass</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="localsettingspy">local_settings.py配置</h4>
<p>这个是本地开发时候使用到的配置文件</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">DEBUG</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class="line">
</span><span class="line"><span class="n">CACHES</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">    <span class="s">&#39;default&#39;</span><span class="p">:</span> <span class="p">{</span>
</span><span class="line">        <span class="s">&#39;BACKEND&#39;</span><span class="p">:</span> <span class="s">&#39;redis_cache.cache.RedisCache&#39;</span><span class="p">,</span>
</span><span class="line">        <span class="s">&#39;LOCATION&#39;</span><span class="p">:</span> <span class="s">&#39;192.168.203.95:6379:1&#39;</span><span class="p">,</span>
</span><span class="line">        <span class="s">&#39;OPTIONS&#39;</span><span class="p">:</span> <span class="p">{</span>
</span><span class="line">            <span class="s">&#39;CLIENT_CLASS&#39;</span><span class="p">:</span> <span class="s">&#39;redis_cache.client.DefaultClient&#39;</span><span class="p">,</span>
</span><span class="line">            <span class="c"># &#39;PASSWORD&#39;: &#39;secretpassword&#39;,</span>
</span><span class="line">            <span class="s">&#39;PICKLE_VERSION&#39;</span><span class="p">:</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span>  <span class="c"># Use the latest protocol version</span>
</span><span class="line">            <span class="s">&#39;SOCKET_TIMEOUT&#39;</span><span class="p">:</span> <span class="mi">60</span><span class="p">,</span>  <span class="c"># in seconds</span>
</span><span class="line">            <span class="s">&#39;IGNORE_EXCEPTIONS&#39;</span><span class="p">:</span> <span class="bp">True</span><span class="p">,</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-1">使用方法</h3>

<h4 id="cachemanagerpy">cache_manager.py缓存管理器</h4>
<p>我们新建一个缓存管理器cache_manager.py，内容如下</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c">#!/usr/bin/env python</span>
</span><span class="line"><span class="c"># -*- encoding: utf-8 -*-</span>
</span><span class="line"><span class="sd">&quot;&quot;&quot;</span>
</span><span class="line"><span class="sd">Topic: redis缓存管理器</span>
</span><span class="line"><span class="sd">&quot;&quot;&quot;</span>
</span><span class="line"><span class="kn">from</span> <span class="nn">..models</span> <span class="kn">import</span> <span class="n">Post</span>
</span><span class="line"><span class="kn">from</span> <span class="nn">redis_cache</span> <span class="kn">import</span> <span class="n">get_redis_connection</span>
</span><span class="line"><span class="kn">from</span> <span class="nn">apscheduler.schedulers.background</span> <span class="kn">import</span> <span class="n">BackgroundScheduler</span>
</span><span class="line">
</span><span class="line"><span class="n">RUNNING_TIMER</span> <span class="o">=</span> <span class="bp">False</span>
</span><span class="line"><span class="n">REDIS_DB</span> <span class="o">=</span> <span class="n">get_redis_connection</span><span class="p">(</span><span class="s">&#39;default&#39;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">update_click</span><span class="p">(</span><span class="n">post</span><span class="p">):</span>
</span><span class="line">    <span class="sd">&quot;&quot;&quot; 更新点击数 &quot;&quot;&quot;</span>
</span><span class="line">    <span class="k">if</span> <span class="n">REDIS_DB</span><span class="o">.</span><span class="n">hexists</span><span class="p">(</span><span class="s">&quot;CLICKS&quot;</span><span class="p">,</span> <span class="n">post</span><span class="o">.</span><span class="n">id</span><span class="p">):</span>
</span><span class="line">        <span class="k">print</span><span class="p">(</span><span class="s">&#39;REDIS_DB.hexists...&#39;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">post</span><span class="o">.</span><span class="n">id</span><span class="p">))</span>
</span><span class="line">        <span class="n">REDIS_DB</span><span class="o">.</span><span class="n">hincrby</span><span class="p">(</span><span class="s">&#39;CLICKS&#39;</span><span class="p">,</span> <span class="n">post</span><span class="o">.</span><span class="n">id</span><span class="p">)</span>
</span><span class="line">    <span class="k">else</span><span class="p">:</span>
</span><span class="line">        <span class="k">print</span><span class="p">(</span><span class="s">&#39;REDIS_DB.not_hexists...&#39;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">post</span><span class="o">.</span><span class="n">id</span><span class="p">))</span>
</span><span class="line">        <span class="n">REDIS_DB</span><span class="o">.</span><span class="n">hset</span><span class="p">(</span><span class="s">&#39;CLICKS&#39;</span><span class="p">,</span> <span class="n">post</span><span class="o">.</span><span class="n">id</span><span class="p">,</span> <span class="n">post</span><span class="o">.</span><span class="n">click</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
</span><span class="line">    <span class="n">run_timer</span><span class="p">()</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">get_click</span><span class="p">(</span><span class="n">post</span><span class="p">):</span>
</span><span class="line">    <span class="sd">&quot;&quot;&quot; 获取点击数 &quot;&quot;&quot;</span>
</span><span class="line">    <span class="k">if</span> <span class="n">REDIS_DB</span><span class="o">.</span><span class="n">hexists</span><span class="p">(</span><span class="s">&quot;CLICKS&quot;</span><span class="p">,</span> <span class="n">post</span><span class="o">.</span><span class="n">id</span><span class="p">):</span>
</span><span class="line">        <span class="k">return</span> <span class="n">REDIS_DB</span><span class="o">.</span><span class="n">hget</span><span class="p">(</span><span class="s">&#39;CLICKS&#39;</span><span class="p">,</span> <span class="n">post</span><span class="o">.</span><span class="n">id</span><span class="p">)</span>
</span><span class="line">    <span class="k">else</span><span class="p">:</span>
</span><span class="line">        <span class="n">REDIS_DB</span><span class="o">.</span><span class="n">hset</span><span class="p">(</span><span class="s">&#39;CLICKS&#39;</span><span class="p">,</span> <span class="n">post</span><span class="o">.</span><span class="n">id</span><span class="p">,</span> <span class="n">post</span><span class="o">.</span><span class="n">click</span><span class="p">)</span>
</span><span class="line">        <span class="k">return</span> <span class="n">post</span><span class="o">.</span><span class="n">click</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">sync_click</span><span class="p">():</span>
</span><span class="line">    <span class="sd">&quot;&quot;&quot;同步文章点击数&quot;&quot;&quot;</span>
</span><span class="line">    <span class="k">print</span><span class="p">(</span><span class="s">&#39;同步文章点击数start....&#39;</span><span class="p">)</span>
</span><span class="line">    <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="n">REDIS_DB</span><span class="o">.</span><span class="n">hkeys</span><span class="p">(</span><span class="s">&#39;CLICKS&#39;</span><span class="p">):</span>
</span><span class="line">        <span class="k">try</span><span class="p">:</span>
</span><span class="line">            <span class="n">p</span> <span class="o">=</span> <span class="n">Post</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">k</span><span class="p">)</span>
</span><span class="line">            <span class="k">print</span><span class="p">(</span><span class="s">&#39;db_click={0}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">p</span><span class="o">.</span><span class="n">click</span><span class="p">))</span>
</span><span class="line">            <span class="n">cache_click</span> <span class="o">=</span> <span class="n">get_click</span><span class="p">(</span><span class="n">p</span><span class="o">.</span><span class="n">id</span><span class="p">)</span>
</span><span class="line">            <span class="k">print</span><span class="p">(</span><span class="s">&#39;cache_click={0}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">cache_click</span><span class="p">))</span>
</span><span class="line">            <span class="k">if</span> <span class="n">cache_click</span> <span class="o">!=</span> <span class="n">p</span><span class="o">.</span><span class="n">click</span><span class="p">:</span>
</span><span class="line">                <span class="n">p</span><span class="o">.</span><span class="n">click</span> <span class="o">=</span> <span class="n">get_click</span><span class="p">(</span><span class="n">p</span><span class="o">.</span><span class="n">id</span><span class="p">)</span>
</span><span class="line">                <span class="n">p</span><span class="o">.</span><span class="n">save</span><span class="p">()</span>
</span><span class="line">        <span class="k">except</span><span class="p">:</span>
</span><span class="line">            <span class="k">pass</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="viewspy">views.py修改</h4>
<p>然后我们修改view.py，在相应的action里使用这个cache_manager：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">from</span> <span class="nn">.commons</span> <span class="kn">import</span> <span class="n">cache_manager</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">post_list</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
</span><span class="line">    <span class="sd">&quot;&quot;&quot;所有已发布文章&quot;&quot;&quot;</span>
</span><span class="line">    <span class="n">posts</span> <span class="o">=</span> <span class="n">Post</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">annotate</span><span class="p">(</span><span class="n">num_comment</span><span class="o">=</span><span class="n">Count</span><span class="p">(</span><span class="s">&#39;comment&#39;</span><span class="p">))</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span>
</span><span class="line">        <span class="n">published_date__isnull</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span><span class="o">.</span><span class="n">prefetch_related</span><span class="p">(</span>
</span><span class="line">        <span class="s">&#39;category&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">prefetch_related</span><span class="p">(</span><span class="s">&#39;tags&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">order_by</span><span class="p">(</span><span class="s">&#39;-published_date&#39;</span><span class="p">)</span>
</span><span class="line">    <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">posts</span><span class="p">:</span>
</span><span class="line">        <span class="n">p</span><span class="o">.</span><span class="n">click</span> <span class="o">=</span> <span class="n">cache_manager</span><span class="o">.</span><span class="n">get_click</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>
</span><span class="line">    <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="s">&#39;blog/post_list.html&#39;</span><span class="p">,</span> <span class="p">{</span><span class="s">&#39;posts&#39;</span><span class="p">:</span> <span class="n">posts</span><span class="p">})</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">post_detail</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="n">pk</span><span class="p">):</span>
</span><span class="line">    <span class="k">try</span><span class="p">:</span>
</span><span class="line">        <span class="k">pass</span>
</span><span class="line">    <span class="k">except</span><span class="p">:</span>
</span><span class="line">        <span class="k">raise</span> <span class="n">Http404</span><span class="p">()</span>
</span><span class="line">    <span class="k">if</span> <span class="n">post</span><span class="o">.</span><span class="n">published_date</span><span class="p">:</span>
</span><span class="line">        <span class="n">cache_manager</span><span class="o">.</span><span class="n">update_click</span><span class="p">(</span><span class="n">post</span><span class="p">)</span>
</span><span class="line">        <span class="n">post</span><span class="o">.</span><span class="n">click</span> <span class="o">=</span> <span class="n">cache_manager</span><span class="o">.</span><span class="n">get_click</span><span class="p">(</span><span class="n">post</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>其他的我就不多演示了。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django1.7开发博客（12）- i18n国际化]]></title>
    <link href="http://yidao620c.github.io/blog/20150421/simpleblog-12.html"/>
    <updated>2015-04-21T19:27:29+08:00</updated>
    <id>http://yidao620c.github.io/blog/20150421/simpleblog-12</id>
    <content type="html"><![CDATA[<h3 id="wiki">Wiki</h3>
<p>国际化与本地化的目的为了能为各个不同的用户以他们最熟悉的语言和格式来显示网页。</p>

<p>Django能完美支持文本翻译、日期时间和数字的格式化、时区。</p>

<p>另外，Django还有两点优势：</p>

<ol>
  <li>允许开发者和模板作者指定他们哪些app应该被翻译或被格式化为本地形式。</li>
  <li>允许用户根据自己的偏好来实现本地化显示。翻译依据语言，格式化依据国家，
这些信息由浏览器中的<code>Accept-Language</code>头来决定。不过目前为止时区还未能实现。</li>
</ol>

<p>参考官方文档：<a href="https://docs.djangoproject.com/en/1.7/topics/i18n/">https://docs.djangoproject.com/en/1.7/topics/i18n/</a></p>

<h3 id="section">配置</h3>
<p>实际上django的国际化做的非常好了，配置很简单。</p>

<h4 id="settingspy">settings.py</h4>
<p>首先在settings中，添加如下内容：<!--more--></p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">from</span> <span class="nn">django.utils.translation</span> <span class="kn">import</span> <span class="n">ugettext_lazy</span> <span class="k">as</span> <span class="n">_</span>
</span><span class="line"><span class="n">LANGUAGES</span> <span class="o">=</span> <span class="p">(</span>
</span><span class="line">    <span class="p">(</span><span class="s">&#39;zh-cn&#39;</span><span class="p">,</span> <span class="n">_</span><span class="p">(</span><span class="s">&#39;Simplified Chinese&#39;</span><span class="p">)),</span>
</span><span class="line">    <span class="p">(</span><span class="s">&#39;en&#39;</span><span class="p">,</span> <span class="n">_</span><span class="p">(</span><span class="s">&#39;English&#39;</span><span class="p">)),</span>
</span><span class="line"><span class="p">)</span>
</span><span class="line"><span class="n">LOCALE_PATHS</span> <span class="o">=</span> <span class="p">(</span>
</span><span class="line">    <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">BASE_DIR</span><span class="p">,</span> <span class="s">&quot;locale&quot;</span><span class="p">),</span>
</span><span class="line"><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>通过<code>LANGUAGES</code>执行语言列表，<code>LOCALE_PATHS</code>指定国际化目录。</p>

<p>在项目根目录下面创建一个locale文件夹，然后使用命令创建国际化文件：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">django</span><span class="o">-</span><span class="n">admin</span><span class="o">.</span><span class="n">py</span> <span class="n">makemessages</span> <span class="o">-</span><span class="n">l</span> <span class="n">zh_CN</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>执行完后，locale文件夹下面创建<code>zh_CN/LC_MESSAGES/django.po</code>，里面的内容类似下面：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c"># SOME DESCRIPTIVE TITLE.</span>
</span><span class="line"><span class="c"># Copyright (C) YEAR THE PACKAGE&#39;S COPYRIGHT HOLDER</span>
</span><span class="line"><span class="c"># This file is distributed under the same license as the PACKAGE package.</span>
</span><span class="line"><span class="c"># FIRST AUTHOR &lt;EMAIL@ADDRESS&gt;, YEAR.</span>
</span><span class="line"><span class="c">#</span>
</span><span class="line"><span class="c">#, fuzzy</span>
</span><span class="line"><span class="n">msgid</span> <span class="s">&quot;&quot;</span>
</span><span class="line"><span class="n">msgstr</span> <span class="s">&quot;&quot;</span>
</span><span class="line"><span class="s">&quot;Project-Id-Version: PACKAGE VERSION</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class="line"><span class="s">&quot;Report-Msgid-Bugs-To: </span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class="line"><span class="s">&quot;POT-Creation-Date: 2014-11-26 11:45+0800</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class="line"><span class="s">&quot;PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class="line"><span class="s">&quot;Last-Translator: FULL NAME &lt;EMAIL@ADDRESS&gt;</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class="line"><span class="s">&quot;Language-Team: LANGUAGE &lt;LL@li.org&gt;</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class="line"><span class="s">&quot;MIME-Version: 1.0</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class="line"><span class="s">&quot;Content-Type: text/plain; charset=UTF-8</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class="line"><span class="s">&quot;Content-Transfer-Encoding: 8bit</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class="line"><span class="s">&quot;Plural-Forms: nplurals=1; plural=0;</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class="line">
</span><span class="line"><span class="c">#: .\mysite\settings.py:94</span>
</span><span class="line"><span class="n">msgid</span> <span class="s">&quot;Simplified Chinese&quot;</span>
</span><span class="line"><span class="n">msgstr</span> <span class="s">&quot;简体中文&quot;</span>
</span><span class="line">
</span><span class="line"><span class="c">#: .\mysite\settings.py:95</span>
</span><span class="line"><span class="n">msgid</span> <span class="s">&quot;English&quot;</span>
</span><span class="line"><span class="n">msgstr</span> <span class="s">&quot;English&quot;</span>
</span><span class="line">
</span><span class="line"><span class="c">#: base.html</span>
</span><span class="line"><span class="n">msgid</span> <span class="s">&quot;Simple Blog&quot;</span>
</span><span class="line"><span class="n">msgstr</span> <span class="s">&quot;极简博客&quot;</span>
</span><span class="line">
</span><span class="line"><span class="n">msgid</span> <span class="s">&quot;Hello&quot;</span>
</span><span class="line"><span class="n">msgstr</span> <span class="s">&quot;欢迎你&quot;</span>
</span><span class="line">
</span><span class="line"><span class="n">msgid</span> <span class="s">&quot;previous&quot;</span>
</span><span class="line"><span class="n">msgstr</span> <span class="s">&quot;上一页&quot;</span>
</span><span class="line">
</span><span class="line"><span class="n">msgid</span> <span class="s">&quot;next&quot;</span>
</span><span class="line"><span class="n">msgstr</span> <span class="s">&quot;下一页&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>将你页面上面需要翻译的内容写到这里面来即可。比如<code>previous</code>要翻译成<code>上一页</code>。</p>

<p>写好了所有的翻译后，再执行：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">django</span><span class="o">-</span><span class="n">admin</span><span class="o">.</span><span class="n">py</span> <span class="n">compilemessages</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>这时候会生成文件<code>zh_CN/LC_MESSAGES/django.mo</code>，这个是最终的目标文件了。</p>

<h3 id="section-1">使用</h3>
<p>我们用<code>base.html</code>来做演示，打开<code>mysite/templates/mysite/base.html</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
</pre></td><td class="code"><pre><code class="html"><span class="line">{% load staticfiles %}
</span><span class="line">{% load i18n %}
</span><span class="line"><span class="nt">&lt;html&gt;</span>
</span><span class="line"><span class="nt">&lt;head&gt;</span>
</span><span class="line">    <span class="nt">&lt;meta</span> <span class="na">http-equiv=</span><span class="s">&quot;Content-Type&quot;</span> <span class="na">content=</span><span class="s">&quot;text/html;charset=utf-8&quot;</span><span class="nt">/&gt;</span>
</span><span class="line">    <span class="nt">&lt;title&gt;</span>{% trans &#39;Simple Blog&#39;%}<span class="nt">&lt;/title&gt;</span>
</span><span class="line"><span class="nt">&lt;/head&gt;</span>
</span><span class="line"><span class="nt">&lt;body</span> <span class="na">class=</span><span class="s">&quot;customize-support&quot;</span><span class="nt">&gt;</span>
</span><span class="line"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;page-header&quot;</span><span class="nt">&gt;</span>
</span><span class="line">    {% if user.is_authenticated %}
</span><span class="line">        <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;{% url &#39;post_new&#39; %}&quot;</span> <span class="na">class=</span><span class="s">&quot;top-menu&quot;</span><span class="nt">&gt;&lt;span</span>
</span><span class="line">                <span class="na">class=</span><span class="s">&quot;glyphicon glyphicon-plus&quot;</span><span class="nt">&gt;&lt;/span&gt;&lt;/a&gt;</span>
</span><span class="line">        <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;{% url &#39;post_draft_list&#39; %}&quot;</span> <span class="na">class=</span><span class="s">&quot;top-menu&quot;</span><span class="nt">&gt;&lt;span</span>
</span><span class="line">                <span class="na">class=</span><span class="s">&quot;glyphicon glyphicon-edit&quot;</span><span class="nt">&gt;&lt;/span&gt;&lt;/a&gt;</span>
</span><span class="line">        <span class="nt">&lt;p</span> <span class="na">class=</span><span class="s">&quot;top-menu&quot;</span> <span class="na">style=</span><span class="s">&quot;font-size: 15pt;&quot;</span><span class="nt">&gt;</span>{% trans &#39;Hello&#39;%} {{ user.username }}
</span><span class="line">            <span class="nt">&lt;small&gt;</span><span class="ni">&amp;nbsp;</span><span class="nt">&lt;/small&gt;</span>
</span><span class="line">            <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;{% url &#39;django.contrib.auth.views.logout&#39; %}&quot;</span> <span class="na">class=</span><span class="s">&quot;top-menu&quot;</span><span class="nt">&gt;</span>
</span><span class="line">                <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;glyphicon glyphicon-log-out&quot;</span><span class="nt">&gt;&lt;/span&gt;&lt;/a&gt;</span>
</span><span class="line">        <span class="nt">&lt;/p&gt;</span>
</span><span class="line">    {% else %}
</span><span class="line">        <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;{% url &#39;django.contrib.auth.views.login&#39; %}&quot;</span> <span class="na">class=</span><span class="s">&quot;top-menu&quot;</span><span class="nt">&gt;</span>
</span><span class="line">            <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;glyphicon glyphicon-log-in&quot;</span><span class="nt">&gt;&lt;/span&gt;&lt;/a&gt;</span>
</span><span class="line">    {% endif %}
</span><span class="line">    <span class="nt">&lt;h1&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;{% url &#39;blog.views.post_list&#39; %}&quot;</span><span class="nt">&gt;</span>{% trans &#39;Simple Blog&#39;%}<span class="nt">&lt;/a&gt;&lt;/h1&gt;</span>
</span><span class="line"><span class="nt">&lt;/div&gt;</span>
</span><span class="line">...
</span><span class="line"><span class="nt">&lt;/body&gt;</span>
</span><span class="line"><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>注意<code>&lt;title&gt;{% trans 'Simple Blog'%}&lt;/title&gt;</code>这句，
如果用户选择中文，那么就会被翻译成<code>极简博客</code>。
这个在django.po文件中定义过。其他的内容也是类似，就不多说了。</p>

<p>好了，i18n国际化就是这么简单。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django1.7开发博客（11）- 富文本与代码高亮]]></title>
    <link href="http://yidao620c.github.io/blog/20150421/simpleblog-11.html"/>
    <updated>2015-04-21T18:27:29+08:00</updated>
    <id>http://yidao620c.github.io/blog/20150421/simpleblog-11</id>
    <content type="html"><![CDATA[<h2 id="tinymce">TinyMCE介绍</h2>
<p>TinyMCE是一个轻量级的基于浏览器的所见即所得编辑器，支持目前流行的各种浏览器，由JavaScript写成。
功能配置灵活简单（两行代码就可以将编辑器嵌入网页中），支持AJAX。另一特点是加载速度非常快。</p>

<p>django里引用TinyMCE富文本编辑器，其实很简单，前提是你知道django的静态文件配置。
其实这个我已经在前面文章提到过，可以回去再看看。</p>

<p>TinyMCE的官方网站是：<a href="http://www.tinymce.com/">http://www.tinymce.com/</a></p>

<p>下载地址：<a href="http://download.moxiecode.com/tinymce/tinymce_4.1.9.zip">http://download.moxiecode.com/tinymce/tinymce_4.1.9.zip</a></p>

<p>TinyMCE的最新版本是4.1.9，下面是官网截屏：</p>

<p><img src="http://yidaospace.qiniudn.com/tinymce.png" alt="" /></p>

<p>下载下来后，我们把它解压到工程的static/目录下面，如下图所示：<!--more--></p>

<p><img src="http://yidaospace.qiniudn.com/dj101.png" alt="" /></p>

<h2 id="section">安装原理</h2>
<p>安装的原理很简单，只需要在使用编辑器的页面里引用tinymce.min.js文件并初始化就可以了。
tinymce.min.js文件在tinymce项目里，
tinymce.min.js会根据初始配置里的信息找到需要用编辑器的html节点。</p>

<p>例如在post_edit.html页面使用编辑器，只需要在模板文件写下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class="html"><span class="line">{% load staticfiles %}
</span><span class="line">{% block header %}
</span><span class="line">    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;{% static &#39;tinymce/plugins/upload/plugin.css&#39; %}&quot;</span><span class="nt">&gt;</span>
</span><span class="line">    <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;{% static &#39;tinymce/tinymce.min.js&#39; %}&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class="line">    <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;</span>
</span><span class="line">        <span class="nx">tinymce</span><span class="p">.</span><span class="nx">init</span><span class="p">({</span>
</span><span class="line">            <span class="nx">selector</span><span class="o">:</span> <span class="s2">&quot;textarea&quot;</span><span class="p">,</span>
</span><span class="line">            <span class="c1">//width: 800,</span>
</span><span class="line">            <span class="nx">height</span><span class="o">:</span> <span class="mi">300</span><span class="p">,</span>
</span><span class="line">            <span class="nx">forced_root_block</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class="line">            <span class="nx">plugins</span><span class="o">:</span> <span class="p">[</span>
</span><span class="line">                <span class="s2">&quot;advlist autolink lists link image charmap print preview anchor sh4tinymce upload&quot;</span><span class="p">,</span>
</span><span class="line">                <span class="s2">&quot;searchreplace visualblocks code fullscreen&quot;</span><span class="p">,</span>
</span><span class="line">                <span class="s2">&quot;insertdatetime table contextmenu paste&quot;</span>
</span><span class="line">            <span class="p">],</span>
</span><span class="line">            <span class="nx">toolbar</span><span class="o">:</span> <span class="s2">&quot;insertfile undo redo | styleselect | bold italic | alignleft aligncenter&quot;</span> <span class="o">+</span>
</span><span class="line">            <span class="s2">&quot; alignright alignjustify | bullist numlist outdent indent | preview link image sh4tinymce&quot;</span>
</span><span class="line">        <span class="p">});</span>
</span><span class="line">    <span class="nt">&lt;/script&gt;</span>
</span><span class="line">{% endblock %}
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这段代码的含义是 初始化 tinyMCE编辑器，selector指需要将编辑器显示在html那个标签节点，
这里选了textareas。则表示<textareas>会变成编辑器所在的位置。</textareas></p>

<p>另外，我还自定义一下编辑器的高度、插件、菜单项目等。具体详细配置请参考官方文档，写的都比较清楚。</p>

<h2 id="tinymceaddmore">给TinyMCE增加一个addmore插件</h2>
<p>需求很简单，就是每次我写文章的时候需要插入某个<code>&lt;!--more--&gt;</code>标签，
这样可以在列表页面先只显示文章的一部分，然后碰到这个more标签就显示一个”点击阅读更多”的链接。</p>

<p>第一步，在tinymce/plugins文件下新增一个addmore文件夹，然后在里面新建一个plugin.min.js文件，
内容如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="html"><span class="line">tinymce.PluginManager.add(&quot;addmore&quot;, function (a) {
</span><span class="line">    a.addCommand(&quot;InsertMoreRule&quot;, function () {
</span><span class="line">        a.execCommand(&quot;mceInsertContent&quot;, !1, &quot;[!--more--]&quot;)
</span><span class="line">    }), a.addButton(&quot;addmore&quot;, {
</span><span class="line">        icon: &quot;addmore&quot;,
</span><span class="line">        tooltip: &quot;Insert More&quot;,
</span><span class="line">        cmd: &quot;InsertMoreRule&quot;
</span><span class="line">    }), a.addMenuItem(&quot;addmore&quot;, {
</span><span class="line">        icon: &quot;addmore&quot;,
</span><span class="line">        text: &quot;Insert More&quot;,
</span><span class="line">        cmd: &quot;InsertMoreRule&quot;,
</span><span class="line">        context: &quot;insert&quot;
</span><span class="line">    })
</span><span class="line">});
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>在post_edit.html中修改tinymce.init方法，plugins项目后面添加一个addmore：</p>

<pre><code>...
plugins: [
    "advlist autolink lists link image charmap print preview anchor sh4tinymce upload",
    "searchreplace visualblocks code fullscreen",
    "insertdatetime table contextmenu paste addmore"
],
...
</code></pre>

<p>再看看效果，没问题了。</p>

<h2 id="syntaxhighlighter">SyntaxHighlighter代码高亮</h2>
<p>程序员写博客当然少不了代码高亮，这个功能页很容易实现。有一款插件叫SyntaxHighlighter值的推荐。</p>

<p>项目主页：<a href="http://alexgorbatchev.com/SyntaxHighlighter/">http://alexgorbatchev.com/SyntaxHighlighter/</a></p>

<p>下载地址：<a href="http://alexgorbatchev.com/SyntaxHighlighter/download/download.php?sh_current">http://alexgorbatchev.com/SyntaxHighlighter/download/download.php?sh_current</a></p>

<p>下载下来后直接解压到static/目录下面，这个跟tinymce是一样的原理。</p>

<p><strong>使用方法</strong></p>

<p>只需要修改django页面的基础模板就行了，非常简单。</p>

<p>打开mysite/templates/mysite/base.html页面，引入syntaxhighlighter：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
</pre></td><td class="code"><pre><code class="html"><span class="line">{% load staticfiles %}
</span><span class="line">{% load i18n %}
</span><span class="line"><span class="nt">&lt;html&gt;</span>
</span><span class="line"><span class="nt">&lt;head&gt;</span>
</span><span class="line">    <span class="nt">&lt;meta</span> <span class="na">http-equiv=</span><span class="s">&quot;Content-Type&quot;</span> <span class="na">content=</span><span class="s">&quot;text/html;charset=utf-8&quot;</span><span class="nt">/&gt;</span>
</span><span class="line">    <span class="c">&lt;!-- Latest compiled and minified CSS --&gt;</span>
</span><span class="line">    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;{% static &#39;css/bootstrap.min.css&#39; %}&quot;</span><span class="nt">&gt;</span>
</span><span class="line">    <span class="c">&lt;!-- Optional theme --&gt;</span>
</span><span class="line">    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;{% static &#39;css/bootstrap-theme.min.css&#39; %}&quot;</span><span class="nt">&gt;</span>
</span><span class="line">    <span class="c">&lt;!-- Blog CSS--&gt;</span>
</span><span class="line">    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;{% static &#39;css/blog.css&#39; %}&quot;</span><span class="nt">&gt;</span>
</span><span class="line">    <span class="nt">&lt;link</span> <span class="na">type=</span><span class="s">&quot;text/css&quot;</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;{% static &#39;syntaxhighlighter/styles/shCoreDefault.css&#39; %}&quot;</span><span class="nt">/&gt;</span>
</span><span class="line">    <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;{% static &#39;syntaxhighlighter/scripts/shCore.js&#39; %}&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class="line">    <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;</span><span class="nx">SyntaxHighlighter</span><span class="p">.</span><span class="nx">all</span><span class="p">();</span><span class="nt">&lt;/script&gt;</span>
</span><span class="line">    <span class="c">&lt;!-- Latest compiled and minified JavaScript --&gt;</span>
</span><span class="line">    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;{% static &#39;js/jquery-1.11.1.min.js&#39; %}&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class="line">    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;{% static &#39;js/base.js&#39; %}&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class="line">    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;{% static &#39;js/bootstrap.min.js&#39; %}&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class="line">    {% block header %}
</span><span class="line">    {% endblock %}
</span><span class="line">    <span class="nt">&lt;title&gt;</span>{% trans &#39;Simple Blog&#39;%}<span class="nt">&lt;/title&gt;</span>
</span><span class="line"><span class="nt">&lt;/head&gt;</span>
</span><span class="line"><span class="nt">&lt;body</span> <span class="na">class=</span><span class="s">&quot;customize-support&quot;</span><span class="nt">&gt;</span>
</span><span class="line">中间省略...
</span><span class="line"><span class="nt">&lt;script </span><span class="na">class=</span><span class="s">&quot;javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;{% static &#39;syntaxhighlighter/scripts/shBrushJScript.js&#39; %}&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class="line"><span class="nt">&lt;script </span><span class="na">class=</span><span class="s">&quot;javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;{% static &#39;syntaxhighlighter/scripts/shBrushBash.js&#39; %}&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class="line"><span class="nt">&lt;script </span><span class="na">class=</span><span class="s">&quot;javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;{% static &#39;syntaxhighlighter/scripts/shBrushPhp.js&#39; %}&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class="line"><span class="nt">&lt;script </span><span class="na">class=</span><span class="s">&quot;javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;{% static &#39;syntaxhighlighter/scripts/shBrushJava.js&#39; %}&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class="line"><span class="nt">&lt;script </span><span class="na">class=</span><span class="s">&quot;javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;{% static &#39;syntaxhighlighter/scripts/shBrushSql.js&#39; %}&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class="line"><span class="nt">&lt;script </span><span class="na">class=</span><span class="s">&quot;javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;{% static &#39;syntaxhighlighter/scripts/shBrushXml.js&#39; %}&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class="line"><span class="nt">&lt;script </span><span class="na">class=</span><span class="s">&quot;javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;{% static &#39;syntaxhighlighter/scripts/shBrushPython.js&#39; %}&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class="line"><span class="nt">&lt;script </span><span class="na">class=</span><span class="s">&quot;javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;{% static &#39;syntaxhighlighter/scripts/shBrushCss.js&#39; %}&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class="line"><span class="nt">&lt;script </span><span class="na">class=</span><span class="s">&quot;javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;{% static &#39;syntaxhighlighter/scripts/shBrushCpp.js&#39; %}&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class="line"><span class="nt">&lt;/body&gt;</span>
</span><span class="line"><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>由于我们之前已经安装过了TinyMCE，这个跟它结合起来就非常好用了，因为TinyMCE自带有选择代码语言功能。</p>

<p>下面是我创建文章时，插入了一段python代码的示例：</p>

<p><img src="http://yidaospace.qiniudn.com/dj102.png" alt="" /></p>

<p>这个是保存后的效果：</p>

<p><img src="http://yidaospace.qiniudn.com/dj103.png" alt="" /></p>

<h2 id="section-1">最后一件事</h2>
<p>别忘了部署到Heroku上面和别人分享你的成果。</p>

<p>OK，到此为止，前台的各种功能已经差不多了，你能一直坚持学到这里很不错了，为你自己鼓掌吧。</p>

<p>后面还有一个重头戏，就是django的后台管理，我选择了更美观更好用的xamdin，敬请期待…</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django1.7开发博客（10）- 全文搜索]]></title>
    <link href="http://yidao620c.github.io/blog/20150421/simpleblog-10.html"/>
    <updated>2015-04-21T15:47:28+08:00</updated>
    <id>http://yidao620c.github.io/blog/20150421/simpleblog-10</id>
    <content type="html"><![CDATA[<h3 id="wiki">Wiki：</h3>
<p>Django本身不提供全文检索的功能，但django-haystack为其提供了全文检索的框架。
django-haystack能为Django提供whoosh,solr,Xapian和Elasticsearc四种全文检索引擎作为后端。
其中whoosh为纯python的实现，不是非常大型的应用，是没有问题的。
本文将介绍Django1.7中通过django-haystack与whoosh集成以及whoosh的中文支持。</p>

<h3 id="section">安装依赖：</h3>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">pip install django-haystack
</span><span class="line">pip install whoosh
</span><span class="line">pip install jieba</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-1">建立模型</h3>
<p>我们以文章为搜索目标，现在我的app名字为blog，
模型文件是mysite/blog/models.py ：<!--more--></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c"># coding=utf-8</span>
</span><span class="line"><span class="kn">from</span> <span class="nn">django.db</span> <span class="kn">import</span> <span class="n">models</span>
</span><span class="line"><span class="nd">@python_2_unicode_compatible</span>
</span><span class="line"><span class="k">class</span> <span class="nc">Post</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
</span><span class="line">    <span class="k">class</span> <span class="nc">Meta</span><span class="p">:</span>
</span><span class="line">        <span class="n">verbose_name</span> <span class="o">=</span> <span class="s">u&#39;文章&#39;</span>
</span><span class="line">        <span class="n">verbose_name_plural</span> <span class="o">=</span> <span class="s">u&#39;文章&#39;</span>
</span><span class="line">    <span class="c"># 作者</span>
</span><span class="line">    <span class="n">author</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">ForeignKey</span><span class="p">(</span><span class="n">User</span><span class="p">)</span>
</span><span class="line">    <span class="c"># 标题</span>
</span><span class="line">    <span class="n">title</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">200</span><span class="p">)</span>
</span><span class="line">    <span class="c"># 正文</span>
</span><span class="line">    <span class="n">text</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">TextField</span><span class="p">()</span>
</span><span class="line">    <span class="c"># 标签</span>
</span><span class="line">    <span class="n">tags</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">ManyToManyField</span><span class="p">(</span><span class="n">Tag</span><span class="p">)</span>
</span><span class="line">    <span class="c"># 分类目录</span>
</span><span class="line">    <span class="n">category</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">ForeignKey</span><span class="p">(</span><span class="n">Category</span><span class="p">)</span>
</span><span class="line">    <span class="c"># 点击量</span>
</span><span class="line">    <span class="n">click</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">IntegerField</span><span class="p">(</span><span class="n">default</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
</span><span class="line">    <span class="c"># 创建时间</span>
</span><span class="line">    <span class="n">created_date</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">DateTimeField</span><span class="p">(</span><span class="n">default</span><span class="o">=</span><span class="n">timezone</span><span class="o">.</span><span class="n">now</span><span class="p">)</span>
</span><span class="line">    <span class="c"># 发布时间</span>
</span><span class="line">    <span class="n">published_date</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">DateTimeField</span><span class="p">(</span><span class="n">blank</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">null</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">publish</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">published_date</span> <span class="o">=</span> <span class="n">timezone</span><span class="o">.</span><span class="n">now</span><span class="p">()</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">save</span><span class="p">()</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">__str__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">title</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="searchindexespy">1. search_indexes.py</h3>
<p>在app目录下建立一个search_indexes.py（mysite/blog/search_indexes.py）代码如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c">#!/usr/bin/env python</span>
</span><span class="line"><span class="c"># -*- encoding: utf-8 -*-</span>
</span><span class="line"><span class="kn">from</span> <span class="nn">models</span> <span class="kn">import</span> <span class="n">Post</span>
</span><span class="line"><span class="kn">from</span> <span class="nn">haystack</span> <span class="kn">import</span> <span class="n">indexes</span>
</span><span class="line"><span class="k">class</span> <span class="nc">PostIndex</span><span class="p">(</span><span class="n">indexes</span><span class="o">.</span><span class="n">SearchIndex</span><span class="p">,</span> <span class="n">indexes</span><span class="o">.</span><span class="n">Indexable</span><span class="p">):</span>
</span><span class="line">    <span class="n">text</span> <span class="o">=</span> <span class="n">indexes</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">document</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">use_template</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class="line">    <span class="c"># 对title字段进行索引</span>
</span><span class="line">    <span class="n">title</span> <span class="o">=</span> <span class="n">indexes</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">model_attr</span><span class="o">=</span><span class="s">&#39;title&#39;</span><span class="p">)</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">get_model</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="k">return</span> <span class="n">Post</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">index_queryset</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">using</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class="line">        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_model</span><span class="p">()</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">all</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><em>备注</em>：search_indexes.py文件名不能修改，否则报错：<code>No fields were found in any search_indexes.</code></p>

<h3 id="posttexttxt">2. post_text.txt</h3>
<p>因为在search_indexes.py使用了use_template=True，所以可以同时使用模板对索引字段进行定义。</p>

<p>如：<code>mysite/blog/templates/search/indexes/blog/post_text.txt</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="p"></span>
</span><span class="line"><span class="p"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="settingspy">3. settings.py</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c"># Application definition</span>
</span><span class="line"><span class="n">INSTALLED_APPS</span> <span class="o">=</span> <span class="p">(</span>
</span><span class="line">    <span class="o">...</span>
</span><span class="line">    <span class="s">&#39;haystack&#39;</span><span class="p">,</span>
</span><span class="line"><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="urlspy">4. urls.py</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">urlpatterns</span> <span class="o">=</span> <span class="n">patterns</span><span class="p">(</span>
</span><span class="line">    <span class="s">&#39;&#39;</span><span class="p">,</span>
</span><span class="line">    <span class="n">url</span><span class="p">(</span><span class="s">r&#39;^admin/&#39;</span><span class="p">,</span> <span class="n">include</span><span class="p">(</span><span class="n">admin</span><span class="o">.</span><span class="n">site</span><span class="o">.</span><span class="n">urls</span><span class="p">)),</span>
</span><span class="line">    <span class="n">url</span><span class="p">(</span><span class="s">r&#39;^xadmin/&#39;</span><span class="p">,</span> <span class="n">include</span><span class="p">(</span><span class="n">xadmin</span><span class="o">.</span><span class="n">site</span><span class="o">.</span><span class="n">urls</span><span class="p">),</span> <span class="n">name</span><span class="o">=</span><span class="s">&#39;xadmin&#39;</span><span class="p">),</span>
</span><span class="line">    <span class="n">url</span><span class="p">(</span><span class="s">r&#39;^accounts/login/$&#39;</span><span class="p">,</span> <span class="s">&#39;django.contrib.auth.views.login&#39;</span><span class="p">),</span>
</span><span class="line">    <span class="n">url</span><span class="p">(</span><span class="s">r&#39;^accounts/logout/$&#39;</span><span class="p">,</span> <span class="s">&#39;django.contrib.auth.views.logout&#39;</span><span class="p">,</span> <span class="p">{</span><span class="s">&#39;next_page&#39;</span><span class="p">:</span> <span class="s">&#39;/&#39;</span><span class="p">}),</span>
</span><span class="line">    <span class="n">url</span><span class="p">(</span><span class="s">r&#39;^search/&#39;</span><span class="p">,</span> <span class="n">include</span><span class="p">(</span><span class="s">&#39;haystack.urls&#39;</span><span class="p">)),</span>
</span><span class="line">    <span class="n">url</span><span class="p">(</span><span class="s">r&#39;&#39;</span><span class="p">,</span> <span class="n">include</span><span class="p">(</span><span class="s">&#39;blog.urls&#39;</span><span class="p">)),</span>
</span><span class="line"><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="jieba">5. jieba中文分词</h3>
<p>jieba其实已经提供了集成whoosh的ChineseAnalyzer，
也就是说不需要自己写ChineseAnalyzer了，直接在whoosh_backend.py中直接引用就好；
同时，不推荐将whoosh_backend.py放到Lib下面，这样移植性会有问题，自己的代码，还是放在项目下面为妙。</p>

<p>1. 将文件whoosh_backend.py拷贝到app下面，并重命名为whoosh_cn_backend.py，
如blog/whoosh_cn_backend.py。重点的改造有：</p>

<ul>
  <li>增加：</li>
</ul>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">from</span> <span class="nn">jieba.analyse</span> <span class="kn">import</span> <span class="n">ChineseAnalyzer</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<ul>
  <li>修改</li>
</ul>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">schema_fields</span><span class="p">[</span><span class="n">field_class</span><span class="o">.</span><span class="n">index_fieldname</span><span class="p">]</span> <span class="o">=</span> <span class="n">TEXT</span><span class="p">(</span><span class="n">stored</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">analyzer</span><span class="o">=</span><span class="n">ChineseAnalyzer</span><span class="p">(),</span>
</span><span class="line"> <span class="n">field_boost</span><span class="o">=</span><span class="n">field_class</span><span class="o">.</span><span class="n">boost</span><span class="p">,</span> <span class="n">sortable</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>2. 修改后端引擎，setting.py配置：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c"># full text search</span>
</span><span class="line"><span class="n">HAYSTACK_CONNECTIONS</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">    <span class="s">&#39;default&#39;</span><span class="p">:</span> <span class="p">{</span>
</span><span class="line">        <span class="s">&#39;ENGINE&#39;</span><span class="p">:</span> <span class="s">&#39;blog.whoosh_cn_backend.WhooshEngine&#39;</span><span class="p">,</span>
</span><span class="line">        <span class="s">&#39;PATH&#39;</span><span class="p">:</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">BASE_DIR</span><span class="p">,</span> <span class="s">&#39;whoosh_index&#39;</span><span class="p">),</span>
</span><span class="line">    <span class="p">},</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-2">6. 重建索引</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">python</span> <span class="n">manage</span><span class="o">.</span><span class="n">py</span> <span class="n">rebuild_index</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-3">7. 索引更新</h3>

<p>最简单的办法就是在settings.py中添加：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">HAYSTACK_SIGNAL_PROCESSOR</span> <span class="o">=</span> <span class="s">&#39;haystack.signals.RealtimeSignalProcessor&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-4">8. 自定义搜索示例</h3>

<p>(1) 先定义view：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">from</span> <span class="nn">haystack.forms</span> <span class="kn">import</span> <span class="n">SearchForm</span>
</span><span class="line"><span class="k">def</span> <span class="nf">full_search</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
</span><span class="line">    <span class="sd">&quot;&quot;&quot;全局搜索&quot;&quot;&quot;</span>
</span><span class="line">    <span class="n">keywords</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">GET</span><span class="p">[</span><span class="s">&#39;q&#39;</span><span class="p">]</span>
</span><span class="line">    <span class="n">sform</span> <span class="o">=</span> <span class="n">SearchForm</span><span class="p">(</span><span class="n">request</span><span class="o">.</span><span class="n">GET</span><span class="p">)</span>
</span><span class="line">    <span class="n">posts</span> <span class="o">=</span> <span class="n">sform</span><span class="o">.</span><span class="n">search</span><span class="p">()</span>
</span><span class="line">    <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="s">&#39;blog/post_search_list.html&#39;</span><span class="p">,</span>
</span><span class="line">                  <span class="p">{</span><span class="s">&#39;posts&#39;</span><span class="p">:</span> <span class="n">posts</span><span class="p">,</span> <span class="s">&#39;list_header&#39;</span><span class="p">:</span> <span class="s">&#39;关键字 </span><span class="se">\&#39;</span><span class="s">{}</span><span class="se">\&#39;</span><span class="s"> 搜索结果&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">keywords</span><span class="p">)})</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>(2) 然后在template页面中：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="html"><span class="line"><span class="c">&lt;!-- searchbox START --&gt;</span>
</span><span class="line"><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;searchbox&quot;</span><span class="nt">&gt;</span>
</span><span class="line">    <span class="nt">&lt;form</span> <span class="na">action=</span><span class="s">&quot;{% url &#39;blog.views.full_search&#39; %}&quot;</span> <span class="na">method=</span><span class="s">&quot;get&quot;</span><span class="nt">&gt;</span>
</span><span class="line">        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;content&quot;</span><span class="nt">&gt;</span>
</span><span class="line">            <span class="nt">&lt;label&gt;</span>
</span><span class="line">                <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">class=</span><span class="s">&quot;textfield searchtip&quot;</span> <span class="na">name=</span><span class="s">&quot;q&quot;</span> <span class="na">size=</span><span class="s">&quot;24&quot;</span> <span class="na">value=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;</span>
</span><span class="line">            <span class="nt">&lt;/label&gt;</span>
</span><span class="line">            <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span> <span class="na">class=</span><span class="s">&quot;button&quot;</span> <span class="na">value=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;</span>
</span><span class="line">        <span class="nt">&lt;/div&gt;</span>
</span><span class="line">    <span class="nt">&lt;/form&gt;</span>
</span><span class="line"><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>更详细内容请参考官方文档：<a href="http://django-haystack.readthedocs.org/en/latest/">http://django-haystack.readthedocs.org/en/latest/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java8中的lambda表达式]]></title>
    <link href="http://yidao620c.github.io/blog/20150421/java8-lambda.html"/>
    <updated>2015-04-21T15:42:11+08:00</updated>
    <id>http://yidao620c.github.io/blog/20150421/java8-lambda</id>
    <content type="html"><![CDATA[<p>2014年3月18日，Oracle终于发布Java8正式版。在新的版本里面加入了很多特性，
总共增加了55个新特性，其中最最吸引人的就是Lambdas表达式和Stream函数式编程，本文详细讲解这两个特性。</p>

<p>其他特性比如日期API，泛型，反射，注解，集合框架，并发，Nashorn引擎等等这里暂时就不详细介绍了。
具体可以参考：<a href="http://openjdk.java.net/projects/jdk8/features">http://openjdk.java.net/projects/jdk8/features</a></p>

<p>昨天参加了Oracle的Java8宣讲活动，有幸目睹了Simon Ritter的风采，写个总结来分享下。</p>

<p><strong>Java并发编程演变：</strong></p>
<style type="text/css">
.mytable {
    border-collapse: collapse;
    border: none;
}
.mytable td {
    border: solid #000 1px;
    padding: 5px;
}
</style>

<table class="mytable">
    <tbody>
    <tr>
    <td>版本</td>
    <td>发布年份</td>
    <td>并发技术</td>
    </tr>
    <tr>
    <td>1.4</td>
    <td>2002</td>
    <td>java.lang.Thread</td>
    </tr>
    <tr>
    <td>5</td>
    <td>2004</td>
    <td>java.util.concurrent(jsr166)</td>
    </tr>
    <tr>
    <td>6</td>
    <td>2006</td>
    <td>Phasers, etc(jsr166)</td>
    </tr>
    <tr>
    <td>7</td>
    <td>2011</td>
    <td>Fork/Join Framework(jsr166y)</td>
    </tr>
    <tr>
    <td>8</td>
    <td>2014</td>
    <td>Project Lambda</td>
    </tr>
    </tbody>
</table>

<p>先来一个小例子见识下Java8的威力！<!--more--></p>

<p><strong>一，传统的外部迭代处理代码：</strong></p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">List</span><span class="o">&lt;</span><span class="n">Student</span><span class="o">&gt;</span> <span class="n">students</span> <span class="o">=</span> <span class="o">...</span>
</span><span class="line"><span class="kt">double</span> <span class="n">highestScore</span> <span class="o">=</span> <span class="mf">0.0</span><span class="o">;</span>
</span><span class="line"><span class="k">for</span> <span class="o">(</span><span class="n">Student</span> <span class="n">s</span> <span class="o">:</span> <span class="n">students</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">    <span class="k">if</span> <span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">gradYear</span> <span class="o">==</span> <span class="mi">2011</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">if</span> <span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">score</span> <span class="o">&gt;</span> <span class="n">highestScore</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="n">highestScore</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">score</span><span class="o">;</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>传统的外部迭代主要问题：</p>

<ul>
  <li>程序员自己控制迭代，容易出问题！</li>
  <li>顺序执行：迭代从开始到结束一个一个的顺序迭代元素</li>
  <li>线程不安全，由于业务逻辑依靠可修改变量，容易产生竞态问题</li>
</ul>

<p><strong>二，基于Inner Classes的内部迭代：</strong></p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">List</span><span class="o">&lt;</span><span class="n">Student</span><span class="o">&gt;</span> <span class="n">students</span> <span class="o">=</span> <span class="o">...</span>
</span><span class="line"><span class="kt">double</span> <span class="n">highestScore</span> <span class="o">=</span> <span class="n">students</span><span class="o">.</span>
</span><span class="line">        <span class="nf">filter</span><span class="o">(</span><span class="k">new</span> <span class="n">Predicate</span><span class="o">&lt;</span><span class="n">Student</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class="line">            <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">op</span><span class="o">(</span><span class="n">Student</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                <span class="k">return</span> <span class="n">s</span><span class="o">.</span><span class="na">getGradYear</span><span class="o">()</span> <span class="o">==</span> <span class="mi">2011</span><span class="o">;</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">        <span class="o">}).</span>
</span><span class="line">        <span class="n">map</span><span class="o">(</span><span class="k">new</span> <span class="n">Mapper</span><span class="o">&lt;</span><span class="n">Student</span><span class="o">,</span><span class="n">Double</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class="line">            <span class="kd">public</span> <span class="n">Double</span> <span class="nf">extract</span><span class="o">(</span><span class="n">Student</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                <span class="k">return</span> <span class="n">s</span><span class="o">.</span><span class="na">getScore</span><span class="o">();</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">        <span class="o">}).</span>
</span><span class="line">        <span class="n">max</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>这种迭代形式已经具备了函数式特征。</p>

<p>优点：</p>

<ul>
  <li>迭代，过滤和累加器由核心库完成</li>
  <li>遍历操作可以并行执行</li>
  <li>遍历可以延迟执行</li>
  <li>线程安全 – 因为客户端的逻辑是无状态的</li>
</ul>

<p>缺点：</p>

<p>代码写的有点难看</p>

<p><strong>三，基于Lambdas的内部迭代：</strong></p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">SomeList</span><span class="o">&lt;</span><span class="n">Student</span><span class="o">&gt;</span> <span class="n">students</span> <span class="o">=</span> <span class="o">...</span>
</span><span class="line"><span class="kt">double</span> <span class="n">highestScore</span> <span class="o">=</span> <span class="n">students</span><span class="o">.</span>
</span><span class="line">        <span class="nf">filter</span><span class="o">(</span><span class="n">Student</span> <span class="n">s</span> <span class="o">-&gt;</span> <span class="n">s</span><span class="o">.</span><span class="na">getGradYear</span><span class="o">()</span> <span class="o">==</span> <span class="mi">2011</span><span class="o">).</span>
</span><span class="line">        <span class="n">map</span><span class="o">(</span><span class="n">Student</span> <span class="n">s</span> <span class="o">-&gt;</span> <span class="n">s</span><span class="o">.</span><span class="na">getScore</span><span class="o">()).</span>
</span><span class="line">        <span class="n">max</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这种写法可以算是完美了：^_^</p>

<ul>
  <li>可读性很好</li>
  <li>更加抽象化</li>
  <li>简单化后，自然就不容易出现bug了</li>
  <li>不再依赖可变变量</li>
  <li>很容易实现并行化</li>
</ul>

<p>进入正题 ~~</p>

<h3 id="lambda">Lambda篇</h3>

<p>Lambda表达式简单来讲就是匿名函数</p>

<ul>
  <li>就像一个方法一样，它又参数列表，一个返回类型，抛出的异常集和一个执行体</li>
  <li>但是跟方法不同的是，它不跟任何Class关联。</li>
</ul>

<p>也就是说，现在我们在Java的方法调用中不仅仅可以传值，还可以传动作(也就是函数)，这个有点类似于C语言的函数指针的概念了。</p>

<p>Lambda表达式的类型：</p>

<p>在Java中，到处都可以看到只有一个方法的接口，这种接口现在定义为函数式接口，
而Lambda表达式类型就是函数式接口，也就是只有一个方法的接口。</p>

<p>几个函数式接口的例子：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">interface</span> <span class="nc">Comparator</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span> <span class="kt">boolean</span> <span class="nf">compare</span><span class="o">(</span><span class="n">T</span> <span class="n">x</span><span class="o">,</span> <span class="n">T</span> <span class="n">y</span><span class="o">);</span> <span class="o">}</span>
</span><span class="line"><span class="kd">interface</span> <span class="nc">FileFilter</span> <span class="o">{</span> <span class="kt">boolean</span> <span class="nf">accept</span><span class="o">(</span><span class="n">File</span> <span class="n">x</span><span class="o">);</span> <span class="o">}</span>
</span><span class="line"><span class="kd">interface</span> <span class="nc">Runnable</span> <span class="o">{</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">();</span> <span class="o">}</span>
</span><span class="line"><span class="kd">interface</span> <span class="nc">ActionListener</span> <span class="o">{</span> <span class="kt">void</span> <span class="nf">actionPerformed</span><span class="o">(</span><span class="err">…</span><span class="o">);</span> <span class="o">}</span>
</span><span class="line"><span class="kd">interface</span> <span class="nc">Callable</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span> <span class="n">T</span> <span class="nf">call</span><span class="o">();</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>局部变量捕获：</strong></p>

<p>Lambda表达式可以引用上下文中的final等效局部变量。</p>

<p>final等效指的是变量的用法是final的，而不必声明为final，比如变量只赋值一次，那么它就是final等效的。</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kt">void</span> <span class="nf">expire</span><span class="o">(</span><span class="n">File</span> <span class="n">root</span><span class="o">,</span> <span class="kt">long</span> <span class="n">before</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">    <span class="n">root</span><span class="o">.</span><span class="na">listFiles</span><span class="o">(</span><span class="n">File</span> <span class="n">p</span> <span class="o">-&gt;</span> <span class="n">p</span><span class="o">.</span><span class="na">lastModified</span><span class="o">()</span> <span class="o">&lt;=</span> <span class="n">before</span><span class="o">);</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>this关键字：</strong></p>

<p>Lambda表达式中的this指的是包含这个Lambda的外部对象，而不是Lambda本身。
永远记住，Lambda表达式类型其实就是一个函数式接口。</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">class</span> <span class="nc">SessionManager</span> <span class="o">{</span>
</span><span class="line">    <span class="kt">long</span> <span class="n">before</span> <span class="o">=</span> <span class="o">...;</span>
</span><span class="line">    <span class="kt">void</span> <span class="nf">expire</span><span class="o">(</span><span class="n">File</span> <span class="n">root</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="c1">// refers to &#39;this.before&#39;, just like outside the lambda</span>
</span><span class="line">        <span class="n">root</span><span class="o">.</span><span class="na">listFiles</span><span class="o">(</span><span class="n">File</span> <span class="n">p</span> <span class="o">-&gt;</span> <span class="n">checkExpiry</span><span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="na">lastModified</span><span class="o">(),</span> <span class="k">this</span><span class="o">.</span><span class="na">before</span><span class="o">));</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">    <span class="kt">boolean</span> <span class="nf">checkExpiry</span><span class="o">(</span><span class="kt">long</span> <span class="n">time</span><span class="o">,</span> <span class="kt">long</span> <span class="n">expiry</span><span class="o">)</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><strong>类型推断：</strong></p>

<p>很多情况下，编译器都可以根据目标函数式接口的方法签名来推断参数类型。
在Collections接口中有个sort接口：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">static</span> <span class="n">T</span> <span class="kt">void</span> <span class="nf">sort</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">l</span><span class="o">,</span> <span class="n">Comparator</span><span class="o">&lt;?</span> <span class="kd">super</span> <span class="n">T</span><span class="o">&gt;</span> <span class="n">c</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>正常来讲，应该这么写：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="n">getList</span><span class="o">();</span>
</span><span class="line"><span class="n">Collections</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">list</span><span class="o">,</span> <span class="o">(</span><span class="n">String</span> <span class="n">x</span><span class="o">,</span> <span class="n">String</span> <span class="n">y</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">x</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">-</span> <span class="n">y</span><span class="o">.</span><span class="na">length</span><span class="o">());</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>借助类型推断，可以简化为：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="n">getList</span><span class="o">();</span>
</span><span class="line"><span class="n">Collections</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">list</span><span class="o">,</span> <span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">x</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">-</span> <span class="n">y</span><span class="o">.</span><span class="na">length</span><span class="o">());</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><strong>方法引用：</strong></p>

<p>方法引用可以让我们将一个方法作为一个Lambda表达式重复利用。</p>

<p>比如，java.io.FileFilter作为一个函数式接口，仅有一个方法：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kt">boolean</span> <span class="nf">accept</span><span class="o">(</span><span class="n">File</span> <span class="n">pathname</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>正常的Lambda表达式用法：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">FileFilter</span> <span class="n">x</span> <span class="o">=</span> <span class="n">File</span> <span class="n">f</span> <span class="o">-&gt;</span> <span class="n">f</span><span class="o">.</span><span class="na">canRead</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>通过方法引用，可以简化为：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">FileFilter</span> <span class="n">x</span> <span class="o">=</span> <span class="nl">File:</span><span class="o">:</span><span class="n">canRead</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>方法引用语法格式有以下三种：</p>

<pre><code>objectName::instanceMethod
ClassName::staticMethod
ClassName::instanceMethod
</code></pre>

<p>前两种方式类似，等同于把lambda表达式的参数直接当成instanceMethod|staticMethod的参数来调用。</p>

<p>比如 <code>System.out::println</code> 等同于 <code>x-&gt;System.out.println(x);</code>
<code>Math::max</code>等同于<code>(x, y)-&gt;Math.max(x,y)</code>。</p>

<p>最后一种方式，等同于把lambda表达式的第一个参数当成instanceMethod的目标对象，
其他剩余参数当成该方法的参数。比如<code>String::toLowerCase</code>等同于<code>x-&gt;x.toLowerCase()</code>。</p>

<p><strong>构造器引用：</strong></p>

<p>构造器引用语法如下：<code>ClassName::new</code>，把lambda表达式的参数当成ClassName构造器的参数 。
例如<code>BigDecimal::new</code>等同于<code>x-&gt;new BigDecimal(x)</code>。</p>

<p>和方法引用类似，构造器引用示例：</p>

<p>正常的Lambda表达式的构造器示例：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">Factory</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;</span> <span class="n">f</span> <span class="o">=</span> <span class="o">()</span> <span class="o">-&gt;</span> <span class="k">return</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>通过构造器引用，可以简化为：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">Factory</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;</span> <span class="n">f</span> <span class="o">=</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;::</span><span class="k">new</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>接口扩展：</strong></p>

<p>在Java中，接口是不能随便新增方法的，因为接口中一旦增加方法，那么所以实现类都必须重写。
可以在Interface中使用default关键字来增加一个新的接口方法，并提供一个默认实现。
接口的实现类可以不用管，也可以覆盖这个方法。</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">interface</span> <span class="nc">Collection</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class="line">    <span class="k">default</span> <span class="n">Stream</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="nf">stream</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="k">return</span> <span class="n">StreamSupport</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="n">spliterator</span><span class="o">());</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>还可以使用@FunctionalInterface这个注解来注解函数式接口，如果接口中多于一个抽象方法，编译器肯定报错。</p>

<p>更甚至，在Java8中，在接口中也可以增加静态方法了。</p>

<h3 id="stream">Stream篇</h3>

<p>许多的业务逻辑都需要聚集操作，比如按地区分类获取最优价值产品，按币种分类获取交易量。
之前版本的Java都是通过外部循环来完成这些操作，前面也说过了这种做法的很多弊端。</p>

<p>Java8给出完美解决方案：Lambda表达式+Stream API</p>

<p>Java中对Stream的定义：</p>

<pre><code>A sequence of elements supporting sequential and parallel aggregate operations.
</code></pre>

<p>我们来解读一下上面的那句话：</p>

<pre><code>- Stream是元素的集合，这点让Stream看起来用些类似Iterator；
– 可以支持顺序和并行的对原Stream进行汇聚的操作；
</code></pre>

<p>大家可以把Stream当成一个高级版本的Iterator。原始版本的Iterator，
用户只能一个一个的遍历元素并对其执行某些操作；高级版本的Stream，
用户只要给出需要对其包含的元素执行什么操作，
比如“过滤掉长度大于10的字符串”、“获取每个字符串的首字母”等，
具体这些操作如何应用到每个元素上，就给Stream就好了！（这个秘籍，一般人我不告诉他：））
大家看完这些可能对Stream还没有一个直观的认识，莫急，容我慢慢道来！</p>

<p>先解释下Stream管道：</p>

<p>Stream管道包含三部分，缺一不可：</p>

<ol>
  <li>stream源
    <ul>
      <li>零个或多个中间操作</li>
      <li>一个终止操作，产生一个结果或者一个副作用</li>
    </ul>
  </li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="n">transactions</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span>
</span><span class="line">        <span class="n">filter</span><span class="o">(</span><span class="n">t</span> <span class="o">-&gt;</span> <span class="n">t</span><span class="o">.</span><span class="na">getBuyer</span><span class="o">().</span><span class="na">getCity</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="err">“</span><span class="n">London</span><span class="err">”</span><span class="o">)).</span>
</span><span class="line">        <span class="n">mapToInt</span><span class="o">(</span><span class="nl">Transaction:</span><span class="o">:</span><span class="n">getPrice</span><span class="o">).</span>
</span><span class="line">        <span class="n">sum</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>transactions.stream() -&gt; stream源</p>

<p>filter/mapToInt -&gt; 中间操作</p>

<p>sum() -&gt; 产生结果</p>

<p>剖析Stream通用语法，再来看一个例子：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="c1">//Lists是Guava中的一个工具类</span>
</span><span class="line"><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">nums</span> <span class="o">=</span> <span class="n">Lists</span><span class="o">.</span><span class="na">newArrayList</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span><span class="kc">null</span><span class="o">,</span><span class="mi">3</span><span class="o">,</span><span class="mi">4</span><span class="o">,</span><span class="kc">null</span><span class="o">,</span><span class="mi">6</span><span class="o">);</span>
</span><span class="line"><span class="n">nums</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">filter</span><span class="o">(</span><span class="n">num</span> <span class="o">-&gt;</span> <span class="n">num</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">).</span><span class="na">count</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><img src="http://yidaospace.qiniudn.com/0001.jpg" alt="" /></p>

<p>图片就是对于Stream例子的一个解析，可以很清楚的看见：原本一条语句被三种颜色的框分割成了三个部分。
红色框中的语句是一个Stream的生命开始的地方，负责创建一个Stream实例；
绿色框中的语句是赋予Stream灵魂的地方，把一个Stream转换成另外一个Stream，
红框的语句生成的是一个包含所有nums变量的Stream，进过绿框的filter方法以后，
重新生成了一个过滤掉原nums列表所有null以后的Stream；
蓝色框中的语句是丰收的地方，把Stream的里面包含的内容按照某种算法来汇聚成一个值，
例子中是获取Stream中包含的元素个数。</p>

<p>在此我们总结一下使用Stream的基本步骤：</p>

<ol>
  <li>创建Stream；</li>
  <li>转换Stream，每次转换原有Stream对象不改变，返回一个新的Stream对象（<strong>可以有多次转换</strong>）；</li>
  <li>对Stream进行聚合（Reduce）操作，获取想要的结果；</li>
</ol>

<p><strong>stream源</strong></p>

<p>有很多方式可以产生stream源：</p>

<p>1. 从集合和数组产生：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">Collection</span><span class="o">.</span><span class="na">stream</span><span class="o">()</span>  <span class="c1">//接口default方法</span>
</span><span class="line"><span class="n">Collection</span><span class="o">.</span><span class="na">parallelStream</span><span class="o">()</span>  <span class="c1">//接口default方法</span>
</span><span class="line"><span class="n">Arrays</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="n">T</span> <span class="n">array</span><span class="o">)</span> <span class="n">or</span> <span class="n">Stream</span><span class="o">.</span><span class="na">of</span><span class="o">()</span>  <span class="c1">// 接口default方法或者是静态方法</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>2. 静态工厂方法：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">IntStream</span><span class="o">.</span><span class="na">range</span><span class="o">()</span>
</span><span class="line"><span class="n">Files</span><span class="o">.</span><span class="na">walk</span><span class="o">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>3. 使用Stream静态方法来创建Stream源</p>

<p>1) of方法：有两个overload方法，一个接受变长参数，一个接口单一值</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">Stream</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">integerStream</span> <span class="o">=</span> <span class="n">Stream</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">5</span><span class="o">);</span>
</span><span class="line"><span class="n">Stream</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">stringStream</span> <span class="o">=</span> <span class="n">Stream</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">&quot;taobao&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>2) generator方法：生成一个无限长度的Stream，
其元素的生成是通过给定的Supplier（这个接口可以看成一个对象的工厂，每次调用返回一个给定类型的对象）</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">Stream</span><span class="o">.</span><span class="na">generate</span><span class="o">(</span><span class="k">new</span> <span class="n">Supplier</span><span class="o">&lt;</span><span class="n">Double</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class="line">    <span class="nd">@Override</span>
</span><span class="line">    <span class="kd">public</span> <span class="n">Double</span> <span class="nf">get</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="k">return</span> <span class="n">Math</span><span class="o">.</span><span class="na">random</span><span class="o">();</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">});</span>
</span><span class="line"><span class="n">Stream</span><span class="o">.</span><span class="na">generate</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="n">Math</span><span class="o">.</span><span class="na">random</span><span class="o">());</span>
</span><span class="line"><span class="n">Stream</span><span class="o">.</span><span class="na">generate</span><span class="o">(</span><span class="nl">Math:</span><span class="o">:</span><span class="n">random</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>三条语句的作用都是一样的，只是使用了lambda表达式和方法引用的语法来简化代码。
每条语句其实都是生成一个无限长度的Stream，其中值是随机的。
这个无限长度Stream是懒加载，一般这种无限长度的Stream都会配合Stream的limit()方法来用。</p>

<p>4. iterate方法：也是生成无限长度的Stream</p>

<p>和generator不同的是，其元素的生成是重复对给定的种子值(seed)调用用户指定函数来生成的。
其中包含的元素可以认为是：seed，f(seed),f(f(seed))无限循环</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">Stream</span><span class="o">.</span><span class="na">iterate</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">item</span> <span class="o">-&gt;</span> <span class="n">item</span> <span class="o">+</span> <span class="mi">1</span><span class="o">).</span><span class="na">limit</span><span class="o">(</span><span class="mi">10</span><span class="o">).</span><span class="na">forEach</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>这段代码就是先获取一个无限长度的正整数集合的Stream，然后取出前10个打印。千万记住使用limit方法，不然会无限打印下去。</p>

<p><strong>转换Stream：</strong></p>

<p>转换Stream其实就是把一个Stream通过某些行为转换成一个新的Stream。Stream接口中定义了几个常用的转换方法，下面我们挑选几个常用的转换方法来解释。</p>

<ol>
  <li>distinct: 对于Stream中包含的元素进行去重操作（去重逻辑依赖元素的equals方法），新生成的Stream中没有重复的元素；</li>
  <li>filter: 对于Stream中包含的元素使用给定的过滤函数进行过滤操作，新生成的Stream只包含符合条件的元素；</li>
  <li>map: 对于Stream中包含的元素使用给定的转换函数进行转换操作，新生成的Stream只包含转换生成的元素。
这个方法有三个对于原始类型的变种方法，分别是：mapToInt，mapToLong和mapToDouble。
这三个方法也比较好理解，比如mapToInt就是把原始Stream转换成一个新的Stream，
这个新生成的Stream中的元素都是int类型。之所以会有这样三个变种方法，可以免除自动装箱/拆箱的额外消耗；</li>
  <li>flatMap：和map类似，不同的是其每个元素转换得到的是Stream对象，会把子Stream中的元素压缩到父集合中；</li>
  <li>peek: 生成一个包含原Stream的所有元素的新Stream，同时会提供一个消费函数（Consumer实例），新Stream每个元素被消费的时候都会执行给定的消费函数；</li>
  <li>limit: 对一个Stream进行截断操作，获取其前N个元素，如果原Stream中包含的元素个数小于N，那就获取其所有的元素；</li>
  <li>skip: 返回一个丢弃原Stream的前N个元素后剩下元素组成的新Stream，如果原Stream中包含的元素个数小于N，那么返回空Stream；</li>
</ol>

<p><strong>性能问题</strong></p>

<p>有些细心的同学可能会有这样的疑问：在对于一个Stream进行多次转换操作，每次都对Stream的每个元素进行转换，
而且是执行多次，这样时间复杂度就是一个for循环里把所有操作都做掉的N（转换的次数）倍啊。其实不是这样的，
转换操作都是lazy的，多个转换操作只会在汇聚操作的时候融合起来，一次循环完成。我们可以这样简单的理解，
Stream里有个操作函数的集合，每次转换操作就是把转换函数放入这个集合中，
在汇聚操作的时候循环Stream对应的集合，然后对每个元素执行所有的函数。</p>

<p><strong>聚集（Reduce）Stream</strong></p>

<p>可变汇聚</p>

<p>可变汇聚对应的只有一个方法：collect，正如其名字显示的，它可以把Stream中的要有元素收集到一个结果容器中（比如Collection）。</p>

<p>通用的collect方法的定义（还有其他override方法）：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="o">&lt;</span><span class="n">R</span><span class="o">&gt;</span> <span class="n">R</span> <span class="nf">collect</span><span class="o">(</span><span class="n">Supplier</span><span class="o">&lt;</span><span class="n">R</span><span class="o">&gt;</span> <span class="n">supplier</span><span class="o">,</span>
</span><span class="line">        <span class="n">BiConsumer</span><span class="o">&lt;</span><span class="n">R</span><span class="o">,</span> <span class="o">?</span> <span class="kd">super</span> <span class="n">T</span><span class="o">&gt;</span> <span class="n">accumulator</span><span class="o">,</span>
</span><span class="line">        <span class="n">BiConsumer</span><span class="o">&lt;</span><span class="n">R</span><span class="o">,</span> <span class="n">R</span><span class="o">&gt;</span> <span class="n">combiner</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>先来看看这三个参数的含义：Supplier supplier是一个工厂函数，用来生成一个新的容器；
BiConsumer accumulator也是一个函数，用来把Stream中的元素添加到结果容器中；
BiConsumer combiner还是一个函数，用来把中间状态的多个结果容器合并成为一个（并发的时候会用到）</p>

<p>还有好消息，Java8还给我们提供了Collector的工具类–[Collectors]</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">numsWithoutNull</span> <span class="o">=</span> <span class="n">nums</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">filter</span><span class="o">(</span><span class="n">num</span> <span class="o">-&gt;</span> <span class="n">num</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">).</span>
</span><span class="line">       <span class="n">collect</span><span class="o">(</span><span class="n">Collectors</span><span class="o">.</span><span class="na">toList</span><span class="o">());</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>其他汇聚</strong></p>

<p>reduce方法：reduce方法非常的通用，后面介绍的count，sum等都可以使用其实现。
reduce方法有三个override的方法，本文介绍两个最常用的，
先来看reduce方法的第一种形式，其方法定义如下：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">Optional</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="nf">reduce</span><span class="o">(</span><span class="n">BinaryOperator</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">accumulator</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>接受一个BinaryOperator类型的参数，在使用的时候我们可以用lambda表达式来。</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">ints</span> <span class="o">=</span> <span class="n">Lists</span><span class="o">.</span><span class="na">newArrayList</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="o">,</span><span class="mi">4</span><span class="o">,</span><span class="mi">5</span><span class="o">,</span><span class="mi">6</span><span class="o">,</span><span class="mi">7</span><span class="o">,</span><span class="mi">8</span><span class="o">,</span><span class="mi">9</span><span class="o">,</span><span class="mi">10</span><span class="o">);</span>
</span><span class="line"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;ints sum is:&quot;</span> <span class="o">+</span> <span class="n">ints</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">reduce</span><span class="o">((</span><span class="n">sum</span><span class="o">,</span> <span class="n">item</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">sum</span> <span class="o">+</span> <span class="n">item</span><span class="o">).</span><span class="na">get</span><span class="o">());</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>可以看到reduce方法接受一个函数，这个函数有两个参数，第一个参数是上次函数执行的返回值（也称为中间结果），
第二个参数是stream中的元素，这个函数把这两个值相加，得到的和会被赋值给下次执行这个函数的第一个参数。</p>

<p>reduce方法还有一个很常用的变种：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">T</span> <span class="nf">reduce</span><span class="o">(</span><span class="n">T</span> <span class="n">identity</span><span class="o">,</span> <span class="n">BinaryOperator</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">accumulator</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>这个定义了初值，不是默认的第一个位初值。</p>

<p>其他参数:</p>

<ul>
  <li>allMatch：是不是Stream中的所有元素都满足给定的匹配条件</li>
  <li>anyMatch：Stream中是否存在任何一个元素满足匹配条件</li>
  <li>findFirst: 返回Stream中的第一个元素，如果Stream为空，返回空Optional</li>
  <li>noneMatch：是不是Stream中的所有元素都不满足给定的匹配条件</li>
  <li>
    <table>
      <tbody>
        <tr>
          <td>max和min：使用给定的比较器（Operator），返回Stream中的最大</td>
          <td>最小值</td>
        </tr>
      </tbody>
    </table>
  </li>
</ul>

<p>其他Tips：</p>

<p>Optional防止空指针异常，考虑一个常见的嵌套调用：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">String</span> <span class="n">version</span> <span class="o">=</span> <span class="n">computer</span><span class="o">.</span><span class="na">getSoundcard</span><span class="o">().</span><span class="na">getUSB</span><span class="o">().</span><span class="na">getVersion</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>在之前的Java中，我们对于空指针需要这么做：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">String</span> <span class="n">version</span> <span class="o">=</span> <span class="s">&quot;UNKNOWN&quot;</span><span class="o">;</span>
</span><span class="line"><span class="k">if</span><span class="o">(</span><span class="n">computer</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">){</span>
</span><span class="line">    <span class="n">Soundcard</span> <span class="n">soundcard</span> <span class="o">=</span> <span class="n">computer</span><span class="o">.</span><span class="na">getSoundcard</span><span class="o">();</span>
</span><span class="line">    <span class="k">if</span><span class="o">(</span><span class="n">soundcard</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">){</span>
</span><span class="line">        <span class="n">USB</span> <span class="n">usb</span> <span class="o">=</span> <span class="n">soundcard</span><span class="o">.</span><span class="na">getUSB</span><span class="o">();</span>
</span><span class="line">        <span class="k">if</span><span class="o">(</span><span class="n">usb</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">){</span>
</span><span class="line">            <span class="n">version</span> <span class="o">=</span> <span class="n">usb</span><span class="o">.</span><span class="na">getVersion</span><span class="o">();</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>很显然，这个种做法太挫了！
Groovy语言里面有个?.的语法可以非常优雅的解决这个问题：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="groovy"><span class="line"><span class="n">String</span> <span class="n">version</span> <span class="o">=</span> <span class="n">computer</span><span class="o">?.</span><span class="na">getSoundcard</span><span class="o">()?.</span><span class="na">getUSB</span><span class="o">()?.</span><span class="na">getVersion</span><span class="o">()</span> <span class="o">?:</span> <span class="s2">&quot;UNKNOWN&quot;</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>当然了，Java8不能示弱啊，所以就有了Optional：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">Optional</span> <span class="n">computer</span> <span class="o">=</span> <span class="n">Optional</span><span class="o">.</span><span class="na">ofNullable</span><span class="o">(</span><span class="n">computer</span><span class="o">);</span>
</span><span class="line"><span class="n">String</span> <span class="n">name</span> <span class="o">=</span> <span class="n">computer</span><span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="nl">Computer:</span><span class="o">:</span><span class="n">getSoundcard</span><span class="o">)</span>
</span><span class="line">        <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="nl">Soundcard:</span><span class="o">:</span><span class="n">getUSB</span><span class="o">)</span>
</span><span class="line">        <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="nl">USB:</span><span class="o">:</span><span class="n">getVersion</span><span class="o">)</span>
</span><span class="line">        <span class="o">.</span><span class="na">orElse</span><span class="o">(</span><span class="s">&quot;UNKNOWN&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>关于Opational的更多信息，请参考<a href="http://www.oracle.com/technetwork/articles/java/java8-optional-2175753.html">Oracle官网</a></p>

<h3 id="section">结束语</h3>

<ol>
  <li>Java需要lambda表达式和Stream API，充分发挥多核并行的优势，大大提高核心库的运行速度。</li>
  <li>通过default关键字扩展接口来进行接口演变，同时保持向后兼容。</li>
  <li>通过lambda表达式，大大简化了集合类的操作</li>
  <li>Java8同时在语言、虚拟机、核心库方面做了大幅度的改进和优化，使得编程更简单，更快速。</li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django1.7开发博客（9）- 用户认证]]></title>
    <link href="http://yidao620c.github.io/blog/20150421/simpleblog-09.html"/>
    <updated>2015-04-21T14:47:47+08:00</updated>
    <id>http://yidao620c.github.io/blog/20150421/simpleblog-09</id>
    <content type="html"><![CDATA[<h2 id="section">安全问题</h2>
<p>你应该注意到了一点，当你去新建、修改和删除文章的时候并不需要登录，
这样的话任何浏览网站的用户都能随时修改和删除我的文章。这个可不是我想要的！</p>

<h2 id="section-1">编辑和删除的认证</h2>
<p>我们需要保护post_new, post_edit和post_publish这三个视图，只有登录用户才有权去执行。
django为我们提供了很好的帮助类，其实就是利用了python中的decorators技术。
django中认证的装饰器位于模块django.contrib.auth.decorators中，名称叫login_required。</p>

<p>编辑blog/views.py文件，在import部分添加如下的导入语句：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">from</span> <span class="nn">django.contrib.auth.decorators</span> <span class="kn">import</span> <span class="n">login_required</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>然后在post_new, post_edit和post_publish这三个函数上添加@login_required，
类似下面<!--more--></p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="nd">@login_required</span>
</span><span class="line"><span class="k">def</span> <span class="nf">post_new</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
</span><span class="line">    <span class="p">[</span><span class="o">...</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>好的，现在你再去访问下http://localhost:8000/post/new/，看看有啥变化。</p>

<p>注：如果你仍然能正常进入新建页面，那可能是你之前在admin界面登陆过。
那么你需要先退出，访问http://localhost:8000/admin/logout/可以退出，然后你再看下效果。</p>

<p>我刚刚添加的@login_required装饰器检测到你尚未登陆的时候会重定向到login页面，
但是我现在还没有定义login的模板页面，所以这时候会是404错误页面。</p>

<h2 id="section-2">用户登录</h2>
<p>django在用户认证方面做得很好了，我们只需要去使用它就行。</p>

<p>在mysite/urls.py文件中，添加下面一行</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">url</span><span class="p">(</span><span class="s">r&#39;^accounts/login/$&#39;</span><span class="p">,</span> <span class="s">&#39;django.contrib.auth.views.login&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>现在这个文件内容如下：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">from</span> <span class="nn">django.conf.urls</span> <span class="kn">import</span> <span class="n">patterns</span><span class="p">,</span> <span class="n">include</span><span class="p">,</span> <span class="n">url</span>
</span><span class="line">
</span><span class="line"><span class="kn">from</span> <span class="nn">django.contrib</span> <span class="kn">import</span> <span class="n">admin</span>
</span><span class="line"><span class="n">admin</span><span class="o">.</span><span class="n">autodiscover</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="n">urlpatterns</span> <span class="o">=</span> <span class="n">patterns</span><span class="p">(</span><span class="s">&#39;&#39;</span><span class="p">,</span>
</span><span class="line">    <span class="n">url</span><span class="p">(</span><span class="s">r&#39;^admin/&#39;</span><span class="p">,</span> <span class="n">include</span><span class="p">(</span><span class="n">admin</span><span class="o">.</span><span class="n">site</span><span class="o">.</span><span class="n">urls</span><span class="p">)),</span>
</span><span class="line">    <span class="n">url</span><span class="p">(</span><span class="s">r&#39;^accounts/login/$&#39;</span><span class="p">,</span> <span class="s">&#39;django.contrib.auth.views.login&#39;</span><span class="p">),</span>
</span><span class="line">    <span class="n">url</span><span class="p">(</span><span class="s">r&#39;&#39;</span><span class="p">,</span> <span class="n">include</span><span class="p">(</span><span class="s">&#39;blog.urls&#39;</span><span class="p">)),</span>
</span><span class="line"><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>然后我们再定义一个登陆页面，创建目录mysite/templates/registration，
并在里面新建模板文件login.html，内容如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
</pre></td><td class="code"><pre><code class="html"><span class="line">{% extends &quot;mysite/base.html&quot; %}
</span><span class="line">
</span><span class="line">{% block content %}
</span><span class="line">
</span><span class="line">    {% if form.errors %}
</span><span class="line">    <span class="nt">&lt;p&gt;</span>Your username and password didn&#39;t match. Please try again.<span class="nt">&lt;/p&gt;</span>
</span><span class="line">    {% endif %}
</span><span class="line">
</span><span class="line">    <span class="nt">&lt;form</span> <span class="na">method=</span><span class="s">&quot;post&quot;</span> <span class="na">action=</span><span class="s">&quot;{% url &#39;django.contrib.auth.views.login&#39; %}&quot;</span><span class="nt">&gt;</span>
</span><span class="line">    {% csrf_token %}
</span><span class="line">    <span class="nt">&lt;table&gt;</span>
</span><span class="line">    <span class="nt">&lt;tr&gt;</span>
</span><span class="line">        <span class="nt">&lt;td&gt;</span>{{ form.username.label_tag }}<span class="nt">&lt;/td&gt;</span>
</span><span class="line">        <span class="nt">&lt;td&gt;</span>{{ form.username }}<span class="nt">&lt;/td&gt;</span>
</span><span class="line">    <span class="nt">&lt;/tr&gt;</span>
</span><span class="line">    <span class="nt">&lt;tr&gt;</span>
</span><span class="line">        <span class="nt">&lt;td&gt;</span>{{ form.password.label_tag }}<span class="nt">&lt;/td&gt;</span>
</span><span class="line">        <span class="nt">&lt;td&gt;</span>{{ form.password }}<span class="nt">&lt;/td&gt;</span>
</span><span class="line">    <span class="nt">&lt;/tr&gt;</span>
</span><span class="line">    <span class="nt">&lt;/table&gt;</span>
</span><span class="line">
</span><span class="line">    <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span> <span class="na">value=</span><span class="s">&quot;login&quot;</span> <span class="nt">/&gt;</span>
</span><span class="line">    <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;hidden&quot;</span> <span class="na">name=</span><span class="s">&quot;next&quot;</span> <span class="na">value=</span><span class="s">&quot;{{ next }}&quot;</span> <span class="nt">/&gt;</span>
</span><span class="line">    <span class="nt">&lt;/form&gt;</span>
</span><span class="line">{% endblock %}
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>你可以看到我们仍然使用到了模板继承。这个时候可以定义一个mysite/templates/mysite/base.html，
把blog/templates/blog/base.html的内容复制给它即可。</p>

<p>不过我们需要在mysite/settings.py中再添加一个urls配置：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">LOGIN_REDIRECT_URL</span> <span class="o">=</span> <span class="s">&#39;/&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>这样的话当用户直接访问login页面后登录成功会重定向到文章列表页面去。</p>

<h2 id="section-3">改进显示</h2>
<p>现在的确只有登录用户才能修改和删除文章，但是未登录用户却能看到这些按钮，
这个是很不好的体验。现在如果是未登录用户的话就把这些按钮给隐藏掉。</p>

<p>因此我们修改mysite/templates/mysite/base.html如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="html"><span class="line"><span class="nt">&lt;body&gt;</span>
</span><span class="line">    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;page-header&quot;</span><span class="nt">&gt;</span>
</span><span class="line">        {% if user.is_authenticated %}
</span><span class="line">        <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;{% url &#39;post_new&#39; %}&quot;</span> <span class="na">class=</span><span class="s">&quot;top-menu&quot;</span><span class="nt">&gt;&lt;span</span> <span class="na">class=</span><span class="s">&quot;glyphicon glyphicon-plus&quot;</span><span class="nt">&gt;&lt;/span&gt;&lt;/a&gt;</span>
</span><span class="line">        <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;{% url &#39;post_draft_list&#39; %}&quot;</span> <span class="na">class=</span><span class="s">&quot;top-menu&quot;</span><span class="nt">&gt;&lt;span</span> <span class="na">class=</span><span class="s">&quot;glyphicon glyphicon-edit&quot;</span><span class="nt">&gt;&lt;/span&gt;&lt;/a&gt;</span>
</span><span class="line">        {% else %}
</span><span class="line">        <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;{% url &#39;django.contrib.auth.views.login&#39; %}&quot;</span> <span class="na">class=</span><span class="s">&quot;top-menu&quot;</span><span class="nt">&gt;&lt;span</span> <span class="na">class=</span><span class="s">&quot;glyphicon glyphicon-lock&quot;</span><span class="nt">&gt;&lt;/span&gt;&lt;/a&gt;</span>
</span><span class="line">        {% endif %}
</span><span class="line">        <span class="nt">&lt;h1&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;{% url &#39;blog.views.post_list&#39; %}&quot;</span><span class="nt">&gt;</span>Django Girls<span class="nt">&lt;/a&gt;&lt;/h1&gt;</span>
</span><span class="line">    <span class="nt">&lt;/div&gt;</span>
</span><span class="line">    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;content&quot;</span><span class="nt">&gt;</span>
</span><span class="line">        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;row&quot;</span><span class="nt">&gt;</span>
</span><span class="line">            <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;col-md-8&quot;</span><span class="nt">&gt;</span>
</span><span class="line">            {% block content %}
</span><span class="line">            {% endblock %}
</span><span class="line">            <span class="nt">&lt;/div&gt;</span>
</span><span class="line">        <span class="nt">&lt;/div&gt;</span>
</span><span class="line">    <span class="nt">&lt;/div&gt;</span>
</span><span class="line"><span class="nt">&lt;/body&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>然后修改blog/templates/blog/post_detail.html如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="html"><span class="line">{% extends &#39;blog/base.html&#39; %}
</span><span class="line">
</span><span class="line">{% block content %}
</span><span class="line">    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;date&quot;</span><span class="nt">&gt;</span>
</span><span class="line">        {% if post.published_date %}
</span><span class="line">            {{ post.published_date }}
</span><span class="line">        {% else %}
</span><span class="line">            {% if user.is_authenticated %}
</span><span class="line">                <span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">&quot;btn btn-default&quot;</span> <span class="na">href=</span><span class="s">&quot;{% url &#39;blog.views.post_publish&#39; pk=post.pk %}&quot;</span><span class="nt">&gt;</span>Publish<span class="nt">&lt;/a&gt;</span>
</span><span class="line">            {% endif %}
</span><span class="line">        {% endif %}
</span><span class="line">        {% if user.is_authenticated %}
</span><span class="line">            <span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">&quot;btn btn-default&quot;</span> <span class="na">href=</span><span class="s">&quot;{% url &#39;post_edit&#39; pk=post.pk %}&quot;</span><span class="nt">&gt;&lt;span</span> <span class="na">class=</span><span class="s">&quot;glyphicon glyphicon-pencil&quot;</span><span class="nt">&gt;&lt;/span&gt;&lt;/a&gt;</span>
</span><span class="line">            <span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">&quot;btn btn-default&quot;</span> <span class="na">href=</span><span class="s">&quot;{% url &#39;post_remove&#39; pk=post.pk %}&quot;</span><span class="nt">&gt;&lt;span</span> <span class="na">class=</span><span class="s">&quot;glyphicon glyphicon-remove&quot;</span><span class="nt">&gt;&lt;/span&gt;&lt;/a&gt;</span>
</span><span class="line">        {% endif %}
</span><span class="line">    <span class="nt">&lt;/div&gt;</span>
</span><span class="line">    <span class="nt">&lt;h1&gt;</span>{{ post.title }}<span class="nt">&lt;/h1&gt;</span>
</span><span class="line">    <span class="nt">&lt;p&gt;</span>{{ post.text|linebreaks }}<span class="nt">&lt;/p&gt;</span>
</span><span class="line">{% endblock %}
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section-4">用户注销</h2>
<p>当用户登录后显示欢迎语句，Hello ，然后后面跟一个logout链接。还是依靠django帮我们处理logout动作。</p>

<p>修改mysite/templates/mysite/base.html文件如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="html"><span class="line"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;page-header&quot;</span><span class="nt">&gt;</span>
</span><span class="line">    {% if user.is_authenticated %}
</span><span class="line">    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;{% url &#39;post_new&#39; %}&quot;</span> <span class="na">class=</span><span class="s">&quot;top-menu&quot;</span><span class="nt">&gt;&lt;span</span> <span class="na">class=</span><span class="s">&quot;glyphicon glyphicon-plus&quot;</span><span class="nt">&gt;&lt;/span&gt;&lt;/a&gt;</span>
</span><span class="line">    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;{% url &#39;post_draft_list&#39; %}&quot;</span> <span class="na">class=</span><span class="s">&quot;top-menu&quot;</span><span class="nt">&gt;&lt;span</span> <span class="na">class=</span><span class="s">&quot;glyphicon glyphicon-edit&quot;</span><span class="nt">&gt;&lt;/span&gt;&lt;/a&gt;</span>
</span><span class="line">    <span class="nt">&lt;p</span> <span class="na">class=</span><span class="s">&quot;top-menu&quot;</span><span class="nt">&gt;</span>Hello {{ user.username }}<span class="nt">&lt;small&gt;</span><span class="ni">&amp;nbsp;</span><span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;{% url &#39;django.contrib.auth.views.logout&#39; %}&quot;</span><span class="nt">&gt;</span>Log out<span class="nt">&lt;/a&gt;&lt;/p&gt;</span>
</span><span class="line">    {% else %}
</span><span class="line">    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;{% url &#39;django.contrib.auth.views.login&#39; %}&quot;</span> <span class="na">class=</span><span class="s">&quot;top-menu&quot;</span><span class="nt">&gt;&lt;span</span> <span class="na">class=</span><span class="s">&quot;glyphicon glyphicon-lock&quot;</span><span class="nt">&gt;&lt;/span&gt;&lt;/a&gt;</span>
</span><span class="line">    {% endif %}
</span><span class="line">    <span class="nt">&lt;h1&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;{% url &#39;blog.views.post_list&#39; %}&quot;</span><span class="nt">&gt;</span>Django Girls<span class="nt">&lt;/a&gt;&lt;/h1&gt;</span>
</span><span class="line"><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>很显然这时候logout肯定会报错。我们还得做些事情。</p>

<p>对于这方面的详细文档请参考：<a href="https://docs.djangoproject.com/en/1.7/topics/auth/default/">https://docs.djangoproject.com/en/1.7/topics/auth/default/</a></p>

<p>打开mysite/urls.py文件，添加一个logout配置：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">from</span> <span class="nn">django.conf.urls</span> <span class="kn">import</span> <span class="n">patterns</span><span class="p">,</span> <span class="n">include</span><span class="p">,</span> <span class="n">url</span>
</span><span class="line">
</span><span class="line"><span class="kn">from</span> <span class="nn">django.contrib</span> <span class="kn">import</span> <span class="n">admin</span>
</span><span class="line"><span class="n">admin</span><span class="o">.</span><span class="n">autodiscover</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="n">urlpatterns</span> <span class="o">=</span> <span class="n">patterns</span><span class="p">(</span><span class="s">&#39;&#39;</span><span class="p">,</span>
</span><span class="line">    <span class="n">url</span><span class="p">(</span><span class="s">r&#39;^admin/&#39;</span><span class="p">,</span> <span class="n">include</span><span class="p">(</span><span class="n">admin</span><span class="o">.</span><span class="n">site</span><span class="o">.</span><span class="n">urls</span><span class="p">)),</span>
</span><span class="line">    <span class="n">url</span><span class="p">(</span><span class="s">r&#39;^accounts/login/$&#39;</span><span class="p">,</span> <span class="s">&#39;django.contrib.auth.views.login&#39;</span><span class="p">),</span>
</span><span class="line">    <span class="n">url</span><span class="p">(</span><span class="s">r&#39;^accounts/logout/$&#39;</span><span class="p">,</span> <span class="s">&#39;django.contrib.auth.views.logout&#39;</span><span class="p">,</span> <span class="p">{</span><span class="s">&#39;next_page&#39;</span><span class="p">:</span> <span class="s">&#39;/&#39;</span><span class="p">}),</span>
</span><span class="line">    <span class="n">url</span><span class="p">(</span><span class="s">r&#39;&#39;</span><span class="p">,</span> <span class="n">include</span><span class="p">(</span><span class="s">&#39;blog.urls&#39;</span><span class="p">)),</span>
</span><span class="line"><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>如果访问网站时出现模板找不到错误，那么你就在mysite/settings.py中添加如下配置：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c"># TEMPLATE_DIRS</span>
</span><span class="line"><span class="n">TEMPLATE_DIRS</span> <span class="o">=</span> <span class="p">(</span>
</span><span class="line">    <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">BASE_DIR</span><span class="p">,</span> <span class="s">&#39;mysite/templates&#39;</span><span class="p">),</span>
</span><span class="line">    <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">BASE_DIR</span><span class="p">,</span> <span class="s">&#39;blog/templates&#39;</span><span class="p">),</span>
</span><span class="line"><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>好的，现在你已经可以达成如下的效果了：</p>

<ol>
  <li>需要一个用户名和密码登录系统</li>
  <li>在添加/编辑/删除/发布文章的时候需要登录</li>
  <li>也能注销</li>
</ol>

<p>这么说的话，这个博客系统算功能比较完善了！朋友，祝福你。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django1.7开发博客（8）- 继续完善]]></title>
    <link href="http://yidao620c.github.io/blog/20150421/simpleblog-08.html"/>
    <updated>2015-04-21T14:24:11+08:00</updated>
    <id>http://yidao620c.github.io/blog/20150421/simpleblog-08</id>
    <content type="html"><![CDATA[<p>到现在为止我们已经完成的差不多了，并且基本的东西都已经学到了，是时候用起来了。
我们的博客还有很多功能需要完善，下面抛砖引玉新增几个功能，还有其他功能等你自己去发现和实现。</p>

<h2 id="section">草稿箱</h2>
<p>之前我们新建文章的时候只是是保存到数据库，也就是仅仅保存了草稿，还没有对外发布，
在博客首页上面是看不到的，因为published_date字段为空。这里我们需要添加一个草稿箱的链接。还是四部曲。</p>

<p>第一步，添加一个链接：</p>

<p>打开mysite/templates/mysite/base.html文件，在</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="html"><span class="line"><span class="nt">&lt;h1&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;/&quot;</span><span class="nt">&gt;</span>Django Girls Blog<span class="nt">&lt;/a&gt;&lt;/h1&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>的上面一行添加如下链接：<!--more--></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="html"><span class="line"><span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;{% url &#39;post_draft_list&#39; %}&quot;</span> <span class="na">class=</span><span class="s">&quot;top-menu&quot;</span><span class="nt">&gt;</span>
</span><span class="line"><span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;glyphicon glyphicon-edit&quot;</span><span class="nt">&gt;&lt;/span&gt;&lt;/a&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>第二步就是配置urls，在blog/urls.py中添加：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">url</span><span class="p">(</span><span class="s">r&#39;^drafts/$&#39;</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">post_draft_list</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">&#39;post_draft_list&#39;</span><span class="p">),</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>第三步在blog/views.py中添加一个view：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">post_draft_list</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
</span><span class="line">    <span class="n">posts</span> <span class="o">=</span> <span class="n">Post</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span><span class="n">published_date__isnull</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span><span class="o">.</span><span class="n">order_by</span><span class="p">(</span><span class="s">&#39;-created_date&#39;</span><span class="p">)</span>
</span><span class="line">    <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="s">&#39;blog/post_draft_list.html&#39;</span><span class="p">,</span> <span class="p">{</span><span class="s">&#39;posts&#39;</span><span class="p">:</span> <span class="n">posts</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>第四步添加一个template，新建blog/templates/blog/post_draft_list.html，内容如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="html"><span class="line">{% extends &#39;blog/base.html&#39; %}
</span><span class="line">{% block content %}
</span><span class="line">    {% for post in posts %}
</span><span class="line">        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;post&quot;</span><span class="nt">&gt;</span>
</span><span class="line">            <span class="nt">&lt;p</span> <span class="na">class=</span><span class="s">&quot;date&quot;</span><span class="nt">&gt;</span>created: {{ post.created_date|date:&#39;d-m-Y&#39; }}<span class="nt">&lt;/p&gt;</span>
</span><span class="line">            <span class="nt">&lt;h1&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;{% url &#39;blog.views.post_detail&#39; pk=post.pk %}&quot;</span><span class="nt">&gt;</span>{{ post.title }}<span class="nt">&lt;/a&gt;&lt;/h1&gt;</span>
</span><span class="line">            <span class="nt">&lt;p&gt;</span>{{ post.text|truncatechars:200 }}<span class="nt">&lt;/p&gt;</span>
</span><span class="line">        <span class="nt">&lt;/div&gt;</span>
</span><span class="line">    {% endfor %}
</span><span class="line">{% endblock %}
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这个模板跟我们的post_list.html非常相似。</p>

<p>刷新首页，点击那个草稿箱链接，看看效果。</p>

<p><img src="http://yidaospace.qiniudn.com/dj024.jpg" alt="" /></p>

<h2 id="section-1">发布功能</h2>
<p>在文章详情页面添加一个发布的按钮，如果觉得合适的时候就能发布文章了。
每个新功能都是四部曲，你照着这四步做就行，你会发现越来越简单。</p>

<p>第一步在页面上添加一个链接或Form表单，这里我们添加一个链接。</p>

<p>打开blog/template/blog/post_detail.html，将下面这段</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="html"><span class="line">{% if post.published_date %}
</span><span class="line">    {{ post.published_date }}
</span><span class="line">{% endif %}
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>换成下面这段：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="html"><span class="line">{% if post.published_date %}
</span><span class="line">    {{ post.published_date }}
</span><span class="line">{% else %}
</span><span class="line">    <span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">&quot;btn btn-default&quot;</span> <span class="na">href=</span><span class="s">&quot;{% url &#39;blog.views.post_publish&#39; pk=post.pk %}&quot;</span><span class="nt">&gt;</span>Publish<span class="nt">&lt;/a&gt;</span>
</span><span class="line">{% endif %}
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这里增加了一个else语句，意思是如果没有发布日期的话就增加一个发布按钮。</p>

<p>第二步添加urls配置，打开blog/urls.py：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">url</span><span class="p">(</span><span class="s">r&#39;^post/(?P&lt;pk&gt;[0-9]+)/publish/$&#39;</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">post_publish</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">&#39;post_publish&#39;</span><span class="p">),</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>第三步视图，打开blog/views.py：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">post_publish</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="n">pk</span><span class="p">):</span>
</span><span class="line">    <span class="n">post</span> <span class="o">=</span> <span class="n">get_object_or_404</span><span class="p">(</span><span class="n">Post</span><span class="p">,</span> <span class="n">pk</span><span class="o">=</span><span class="n">pk</span><span class="p">)</span>
</span><span class="line">    <span class="n">post</span><span class="o">.</span><span class="n">publish</span><span class="p">()</span>
</span><span class="line">    <span class="k">return</span> <span class="n">redirect</span><span class="p">(</span><span class="s">&#39;blog.views.post_detail&#39;</span><span class="p">,</span> <span class="n">pk</span><span class="o">=</span><span class="n">pk</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>第四步模板，由于这次没有引入新的模板，所以这步省略。</p>

<p>刷新后看效果：</p>

<p><img src="http://yidaospace.qiniudn.com/dj025.jpg" alt="" /></p>

<p>发布之后的效果：</p>

<p><img src="http://yidaospace.qiniudn.com/dj026.jpg" alt="" /></p>

<p>注意观察发布前和发布后文章的发布日期那个位置的变化。并且发布后再去首页看看，文章已经可以正常显示了。</p>

<h2 id="section-2">删除功能</h2>
<p>最后当然需要一个删除功能了，还是四部曲！</p>

<p>第一步是在页面上添加链接，打开blog/templates/blog/post_detail.html，在编辑按钮下面一行添加如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="html"><span class="line"><span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">&quot;btn btn-default&quot;</span> <span class="na">href=</span><span class="s">&quot;{% url &#39;post_remove&#39; pk=post.pk %}&quot;</span><span class="nt">&gt;</span>
</span><span class="line"><span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;glyphicon glyphicon-remove&quot;</span><span class="nt">&gt;&lt;/span&gt;&lt;/a&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>第二步配置urls映射，打开blog/urls.py，添加如下一行：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">url</span><span class="p">(</span><span class="s">r&#39;^post/(?P&lt;pk&gt;[0-9]+)/remove/$&#39;</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">post_remove</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">&#39;post_remove&#39;</span><span class="p">),</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>第三步添加视图view，打开blog/views.py，添加一个视图函数：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">post_remove</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="n">pk</span><span class="p">):</span>
</span><span class="line">    <span class="n">post</span> <span class="o">=</span> <span class="n">get_object_or_404</span><span class="p">(</span><span class="n">Post</span><span class="p">,</span> <span class="n">pk</span><span class="o">=</span><span class="n">pk</span><span class="p">)</span>
</span><span class="line">    <span class="n">post</span><span class="o">.</span><span class="n">delete</span><span class="p">()</span>
</span><span class="line">    <span class="k">return</span> <span class="n">redirect</span><span class="p">(</span><span class="s">&#39;blog.views.post_list&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>第四步模板，由于这次又没有新的模板，所有这步省略。</p>

<p>OK，刷新页面看效果：</p>

<p><img src="http://yidaospace.qiniudn.com/dj027.jpg" alt="" /></p>

<p>删除后再去首页看，已经没有这篇文章了。</p>

<h2 id="section-3">分页功能</h2>
<p>在首页显示文章列表时候需要分页显示，这时候可以使用django的一个插件叫pagination</p>

<p>设置非常简单，简直是简单到变态。</p>

<p>settings.py文件中</p>

<ol>
  <li>INSTALLED_APPS增加’pagination’项</li>
</ol>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c"># Application definition</span>
</span><span class="line"><span class="n">INSTALLED_APPS</span> <span class="o">=</span> <span class="p">(</span>
</span><span class="line">    <span class="s">&#39;django.contrib.admin&#39;</span><span class="p">,</span>
</span><span class="line">    <span class="s">&#39;django.contrib.auth&#39;</span><span class="p">,</span>
</span><span class="line">    <span class="s">&#39;django.contrib.contenttypes&#39;</span><span class="p">,</span>
</span><span class="line">    <span class="s">&#39;django.contrib.sessions&#39;</span><span class="p">,</span>
</span><span class="line">    <span class="s">&#39;django.contrib.messages&#39;</span><span class="p">,</span>
</span><span class="line">    <span class="s">&#39;django.contrib.staticfiles&#39;</span><span class="p">,</span>
</span><span class="line">    <span class="s">&#39;blog&#39;</span><span class="p">,</span>
</span><span class="line">    <span class="s">&#39;pagination&#39;</span><span class="p">,</span>
</span><span class="line"><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<ol>
  <li>MIDDLEWARE_CLASSES增加’pagination.middleware.PaginationMiddleware’</li>
</ol>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">MIDDLEWARE_CLASSES</span> <span class="o">=</span> <span class="p">(</span>
</span><span class="line">    <span class="s">&#39;django.contrib.sessions.middleware.SessionMiddleware&#39;</span><span class="p">,</span>
</span><span class="line">    <span class="s">&#39;django.middleware.common.CommonMiddleware&#39;</span><span class="p">,</span>
</span><span class="line">    <span class="s">&#39;django.middleware.csrf.CsrfViewMiddleware&#39;</span><span class="p">,</span>
</span><span class="line">    <span class="s">&#39;django.contrib.auth.middleware.AuthenticationMiddleware&#39;</span><span class="p">,</span>
</span><span class="line">    <span class="s">&#39;django.contrib.auth.middleware.SessionAuthenticationMiddleware&#39;</span><span class="p">,</span>
</span><span class="line">    <span class="s">&#39;django.contrib.messages.middleware.MessageMiddleware&#39;</span><span class="p">,</span>
</span><span class="line">    <span class="s">&#39;django.middleware.clickjacking.XFrameOptionsMiddleware&#39;</span><span class="p">,</span>
</span><span class="line">    <span class="s">&#39;pagination.middleware.PaginationMiddleware&#39;</span><span class="p">,</span>
</span><span class="line"><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<ol>
  <li>TEMPLATE_CONTEXT_PROCESSORS增加’django.core.context_processors.request’</li>
</ol>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">TEMPLATE_CONTEXT_PROCESSORS</span> <span class="o">=</span> <span class="p">(</span>
</span><span class="line">    <span class="s">&quot;django.contrib.auth.context_processors.auth&quot;</span><span class="p">,</span>
</span><span class="line">    <span class="s">&quot;django.core.context_processors.debug&quot;</span><span class="p">,</span>
</span><span class="line">    <span class="s">&quot;django.core.context_processors.i18n&quot;</span><span class="p">,</span>
</span><span class="line">    <span class="s">&quot;django.core.context_processors.media&quot;</span><span class="p">,</span>
</span><span class="line">    <span class="s">&quot;django.core.context_processors.static&quot;</span><span class="p">,</span>
</span><span class="line">    <span class="s">&quot;django.core.context_processors.tz&quot;</span><span class="p">,</span>
</span><span class="line">    <span class="s">&quot;django.contrib.messages.context_processors.messages&quot;</span><span class="p">,</span>
</span><span class="line">    <span class="s">&quot;blog.commons.context_processors.custom_proc&quot;</span><span class="p">,</span>
</span><span class="line">    <span class="s">&quot;django.core.context_processors.request&quot;</span><span class="p">,</span>
</span><span class="line"><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<ol>
  <li>requirements.txt中增加依赖：</li>
</ol>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">django</span><span class="o">-</span><span class="n">pagination</span><span class="o">-</span><span class="n">py3</span><span class="o">==</span><span class="mf">1.1</span><span class="o">.</span><span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<ol>
  <li>修改post_list.html页面，增加autopaginate标签</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="p">{</span><span class="o">%</span> <span class="n">extends</span> <span class="s">&#39;mysite/base.html&#39;</span> <span class="o">%</span><span class="p">}</span>
</span><span class="line"><span class="p">{</span><span class="o">%</span> <span class="n">load</span> <span class="n">blog_tags</span> <span class="o">%</span><span class="p">}</span>
</span><span class="line"><span class="p">{</span><span class="o">%</span> <span class="n">load</span> <span class="n">pagination_tags</span> <span class="o">%</span><span class="p">}</span>
</span><span class="line"><span class="p">{</span><span class="o">%</span> <span class="n">block</span> <span class="n">content</span> <span class="o">%</span><span class="p">}</span>
</span><span class="line">    <span class="p">{</span><span class="o">%</span> <span class="k">if</span> <span class="n">list_header</span> <span class="o">%</span><span class="p">}</span>
</span><span class="line">        <span class="o">&lt;</span><span class="n">div</span> <span class="n">class</span><span class="o">=</span><span class="s">&quot;box&quot;</span><span class="o">&gt;</span><span class="p">{{</span> <span class="n">list_header</span> <span class="p">}}</span><span class="o">&lt;/</span><span class="n">div</span><span class="o">&gt;</span>
</span><span class="line">    <span class="p">{</span><span class="o">%</span> <span class="n">endif</span> <span class="o">%</span><span class="p">}</span>
</span><span class="line">    <span class="p">{</span><span class="o">%</span> <span class="n">autopaginate</span> <span class="n">posts</span> <span class="mi">10</span> <span class="o">%</span><span class="p">}</span>
</span><span class="line">    <span class="p">{</span><span class="o">%</span> <span class="k">for</span> <span class="n">post</span> <span class="ow">in</span> <span class="n">posts</span> <span class="o">%</span><span class="p">}</span>
</span><span class="line">        <span class="o">&lt;</span><span class="n">div</span> <span class="n">class</span><span class="o">=</span><span class="s">&quot;post&quot;</span><span class="o">&gt;</span>
</span><span class="line">            <span class="o">&lt;</span><span class="n">h2</span><span class="o">&gt;&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;{</span><span class="si">% u</span><span class="s">rl &#39;blog.views.post_detail&#39; pk=post.pk %}&quot;</span><span class="o">&gt;</span><span class="p">{{</span> <span class="n">post</span><span class="o">.</span><span class="n">title</span> <span class="p">}}</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;&lt;/</span><span class="n">h2</span><span class="o">&gt;</span>
</span><span class="line">            <span class="o">&lt;</span><span class="n">div</span> <span class="n">class</span><span class="o">=</span><span class="s">&quot;info&quot;</span><span class="o">&gt;</span>
</span><span class="line">                <span class="o">&lt;</span><span class="n">span</span> <span class="n">class</span><span class="o">=</span><span class="s">&quot;date&quot;</span><span class="o">&gt;</span><span class="p">{{</span> <span class="n">post</span><span class="o">.</span><span class="n">published_date</span><span class="o">|</span><span class="n">date</span><span class="p">:</span><span class="s">&#39;Y年m月d日&#39;</span> <span class="p">}}</span><span class="o">&lt;/</span><span class="n">span</span><span class="o">&gt;</span>
</span><span class="line">                <span class="o">&lt;</span><span class="n">span</span> <span class="n">class</span><span class="o">=</span><span class="s">&quot;comments&quot;</span><span class="o">&gt;</span>
</span><span class="line">                    <span class="p">{</span><span class="o">%</span> <span class="k">if</span> <span class="n">post</span><span class="o">.</span><span class="n">num_comment</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">%</span><span class="p">}</span>
</span><span class="line">                        <span class="p">{{</span> <span class="n">post</span><span class="o">.</span><span class="n">num_comment</span> <span class="p">}}</span> <span class="err">条评论</span>
</span><span class="line">                    <span class="p">{</span><span class="o">%</span> <span class="k">else</span> <span class="o">%</span><span class="p">}</span>
</span><span class="line">                        <span class="err">没有评论</span>
</span><span class="line">                    <span class="p">{</span><span class="o">%</span> <span class="n">endif</span> <span class="o">%</span><span class="p">}</span>
</span><span class="line">                <span class="o">&lt;/</span><span class="n">span</span><span class="o">&gt;</span>
</span><span class="line">                <span class="o">&lt;</span><span class="n">span</span> <span class="n">class</span><span class="o">=</span><span class="s">&quot;comments&quot;</span><span class="o">&gt;</span>
</span><span class="line">                    <span class="p">{{</span> <span class="n">post</span><span class="o">.</span><span class="n">click</span> <span class="p">}}</span> <span class="err">人阅读</span><span class="o">&amp;</span><span class="n">nbsp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">nbsp</span><span class="p">;</span>
</span><span class="line">                <span class="o">&lt;/</span><span class="n">span</span><span class="o">&gt;</span>
</span><span class="line">                <span class="o">&lt;</span><span class="n">div</span> <span class="n">class</span><span class="o">=</span><span class="s">&quot;fixed&quot;</span><span class="o">&gt;&lt;/</span><span class="n">div</span><span class="o">&gt;</span>
</span><span class="line">            <span class="o">&lt;/</span><span class="n">div</span><span class="o">&gt;</span>
</span><span class="line">            <span class="o">&lt;</span><span class="n">div</span> <span class="n">class</span><span class="o">=</span><span class="s">&quot;content&quot;</span><span class="o">&gt;</span>
</span><span class="line">                <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class="line">                    <span class="p">{</span><span class="o">%</span> <span class="n">autoescape</span> <span class="n">off</span> <span class="o">%</span><span class="p">}</span>
</span><span class="line">                        <span class="p">{{</span> <span class="n">post</span><span class="o">.</span><span class="n">text</span><span class="o">|</span><span class="n">more</span><span class="p">:</span><span class="n">post</span><span class="o">.</span><span class="n">id</span> <span class="p">}}</span>
</span><span class="line">                    <span class="p">{</span><span class="o">%</span> <span class="n">endautoescape</span> <span class="o">%</span><span class="p">}</span>
</span><span class="line">                <span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class="line">            <span class="o">&lt;/</span><span class="n">div</span><span class="o">&gt;</span>
</span><span class="line">            <span class="o">&lt;</span><span class="n">div</span> <span class="n">class</span><span class="o">=</span><span class="s">&quot;under&quot;</span><span class="o">&gt;</span>
</span><span class="line">                <span class="o">&lt;</span><span class="n">span</span> <span class="n">class</span><span class="o">=</span><span class="s">&quot;categories&quot;</span><span class="o">&gt;</span><span class="err">分类</span><span class="p">:</span> <span class="o">&lt;/</span><span class="n">span</span><span class="o">&gt;</span>
</span><span class="line">                <span class="o">&lt;</span><span class="n">span</span><span class="o">&gt;</span>
</span><span class="line">                    <span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;{</span><span class="si">% u</span><span class="s">rl &#39;blog.views.post_list_by_category&#39; cg=post.category.name %}&quot;</span>
</span><span class="line">                       <span class="n">rel</span><span class="o">=</span><span class="s">&quot;category tag&quot;</span><span class="o">&gt;</span><span class="p">{{</span> <span class="n">post</span><span class="o">.</span><span class="n">category</span><span class="o">.</span><span class="n">name</span> <span class="p">}}</span>
</span><span class="line">                    <span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span>
</span><span class="line">                <span class="o">&lt;/</span><span class="n">span</span><span class="o">&gt;</span>
</span><span class="line">                <span class="o">&lt;</span><span class="n">span</span> <span class="n">class</span><span class="o">=</span><span class="s">&quot;tags&quot;</span><span class="o">&gt;</span><span class="err">标签</span><span class="p">:</span> <span class="o">&lt;/</span><span class="n">span</span><span class="o">&gt;</span>
</span><span class="line">                <span class="o">&lt;</span><span class="n">span</span><span class="o">&gt;</span>
</span><span class="line">                    <span class="p">{</span><span class="o">%</span> <span class="k">for</span> <span class="n">tg</span> <span class="ow">in</span> <span class="n">post</span><span class="o">.</span><span class="n">tags</span><span class="o">.</span><span class="n">all</span> <span class="o">%</span><span class="p">}</span>
</span><span class="line">                        <span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;{</span><span class="si">% u</span><span class="s">rl &#39;blog.views.post_list_by_tag&#39; tag=tg.name %}&quot;</span>
</span><span class="line">                           <span class="n">rel</span><span class="o">=</span><span class="s">&quot;tag&quot;</span><span class="o">&gt;</span><span class="p">{{</span> <span class="n">tg</span><span class="o">.</span><span class="n">name</span> <span class="p">}}</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;&amp;</span><span class="n">nbsp</span><span class="p">;</span>
</span><span class="line">                    <span class="p">{</span><span class="o">%</span> <span class="n">endfor</span> <span class="o">%</span><span class="p">}</span>
</span><span class="line">                <span class="o">&lt;/</span><span class="n">span</span><span class="o">&gt;</span>
</span><span class="line">            <span class="o">&lt;/</span><span class="n">div</span><span class="o">&gt;</span>
</span><span class="line">        <span class="o">&lt;/</span><span class="n">div</span><span class="o">&gt;</span>
</span><span class="line">    <span class="p">{</span><span class="o">%</span> <span class="n">endfor</span> <span class="o">%</span><span class="p">}</span>
</span><span class="line">    <span class="p">{</span><span class="o">%</span> <span class="n">paginate</span> <span class="o">%</span><span class="p">}</span>
</span><span class="line"><span class="p">{</span><span class="o">%</span> <span class="n">endblock</span> <span class="o">%</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>刷新下列表首页，看看分页效果。</p>

<p>恭喜你，你可以大声对自己喊：我太棒了。^_^</p>
]]></content>
  </entry>
  
</feed>
