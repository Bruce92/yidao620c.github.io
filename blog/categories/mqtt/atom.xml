<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类目录：mqtt | 笨跑的一刀]]></title>
  <link href="http://yidao620c.github.io/blog/categories/mqtt/atom.xml" rel="self"/>
  <link href="http://yidao620c.github.io/"/>
  <updated>2015-05-17T20:07:25+08:00</updated>
  <id>http://yidao620c.github.io/</id>
  <author>
    <name><![CDATA[熊能]]></name>
    <email><![CDATA[yidao620@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[mqtt消息中间件mosquitto的安装和配置]]></title>
    <link href="http://yidao620c.github.io/blog/20150420/mosquitto-install.html"/>
    <updated>2015-04-20T16:33:07+08:00</updated>
    <id>http://yidao620c.github.io/blog/20150420/mosquitto-install</id>
    <content type="html"><![CDATA[<h3 id="wiki">Wiki</h3>
<p>Mosquitto是一个开源(BSD许可证)的消息代理，实现MQTT(消息队列遥测传输)协议版本3.1.1。</p>

<p>MQTT（MQ Telemetry Transport），消息队列遥测传输协议，轻量级的发布/订阅协议，
适用于一些条件比较苛刻的环境，进行低带宽、不可靠或间歇性的通信。目前已经是物联网消息通信事实上的标准协议了。</p>

<p>值得一提的是mqtt提供三种不同质量的消息服务：</p>

<ul>
  <li>“至多一次”：消息发布完全依赖底层 TCP/IP 网络。会发生消息丢失或重复。这一级别可用于如下情况，环境传感器数据，丢失一次读记录无所谓，因为不久后还会有第二次发送。</li>
  <li>“至少一次”：确保消息到达，但消息重复可能会发生。</li>
  <li>“只有一次”：确保消息到达一次。这一级别可用于如下情况，在计费系统中，消息重复或丢失会导致不正确的结果。</li>
</ul>

<h3 id="httpmosquittoorgdownload">安装：(参考官网 <a href="http://mosquitto.org/download/">http://mosquitto.org/download/</a>)</h3>

<p>服务器操作系统为CentOS6.4，使用最简单的yum安装</p>

<p>1，先加入yum源：</p>

<p>在<code>/etc/yum.repos.d/</code>目录中新建一个<code>mosquitto.repo</code>文件，里面写入：<!--more-->
<code>
[home_oojah_mqtt]
name=mqtt (CentOS_CentOS-6)
type=rpm-md
baseurl=http://download.opensuse.org/repositories/home:/oojah:/mqtt/CentOS_CentOS-6/
gpgcheck=1
gpgkey=http://download.opensuse.org/repositories/home:/oojah:/mqtt/CentOS_CentOS-6/repodata/repomd.xml.key
enabled=1
</code></p>

<p>2，开始安装
<code>bash
sudo yum search all mosquitto
sudo yum install mosquitto mosquitto-clients libmosquitto-devel libmosquittopp-devel python-mosquitto
</code></p>

<p>3，配置</p>

<p>安装完成之后，所有配置文件会被放置于/etc/mosquitto/目录下，
其中最重要的就是Mosquitto的配置文件，即mosquitto.conf，以下是详细的配置参数说明。
&#8220;`
# =================================================================
# General configuration
# =================================================================</p>

<h1 id="section">客户端心跳的间隔时间</h1>
<p>#retry_interval 20</p>

<h1 id="section-1">系统状态的刷新时间</h1>
<p>#sys_interval 10</p>

<h1 id="section-2">系统资源的回收时间，0表示尽快处理</h1>
<p>#store_clean_interval 10</p>

<h1 id="pid">服务进程的PID</h1>
<p>#pid_file /var/run/mosquitto.pid</p>

<h1 id="section-3">服务进程的系统用户</h1>
<p>#user mosquitto</p>

<h1 id="section-4">客户端心跳消息的最大并发数</h1>
<p>#max_inflight_messages 10</p>

<h1 id="section-5">客户端心跳消息缓存队列</h1>
<p>#max_queued_messages 100</p>

<h1 id="section-6">用于设置客户端长连接的过期时间，默认永不过期</h1>
<p>#persistent_client_expiration</p>

<h1 id="section-7">=================================================================</h1>
<p># Default listener
# =================================================================</p>

<h1 id="ip">服务绑定的IP地址</h1>
<p>#bind_address</p>

<h1 id="section-8">服务绑定的端口号</h1>
<p>#port 1883</p>

<h1 id="section-9">允许的最大连接数，-1表示没有限制</h1>
<p>#max_connections -1</p>

<h1 id="cafileca">cafile：CA证书文件</h1>
<p># capath：CA证书目录
# certfile：PEM证书文件
# keyfile：PEM密钥文件
#cafile
#capath
#certfile
#keyfile</p>

<h1 id="section-10">必须提供证书以保证数据安全性</h1>
<p>#require_certificate false</p>

<h1 id="requirecertificatetrueuseidentityasusernametrue">若require_certificate值为true，use_identity_as_username也必须为true</h1>
<p>#use_identity_as_username false</p>

<h1 id="pskpre-shared-key">启用PSK（Pre-shared-key）支持</h1>
<p>#psk_hint</p>

<h1 id="ssltslopenssl-ciphers">SSL/TSL加密算法，可以使用“openssl ciphers”命令获取</h1>
<p># as the output of that command.
#ciphers</p>

<h1 id="section-11">=================================================================</h1>
<p># Persistence
# =================================================================</p>

<h1 id="section-12">消息自动保存的间隔时间</h1>
<p>#autosave_interval 1800</p>

<h1 id="section-13">消息自动保存功能的开关</h1>
<p>#autosave_on_changes false</p>

<h1 id="section-14">持久化功能的开关</h1>
<p>persistence true</p>

<h1 id="db">持久化DB文件</h1>
<p>#persistence_file mosquitto.db</p>

<h1 id="db-1">持久化DB文件目录</h1>
<p>#persistence_location /var/lib/mosquitto/</p>

<h1 id="section-15">=================================================================</h1>
<p># Logging
# =================================================================</p>

<h1 id="stdoutstderrsyslogtopic">4种日志模式：stdout、stderr、syslog、topic</h1>
<p># none 则表示不记日志，此配置可以提升些许性能
log_dest none</p>

<h1 id="section-16">选择日志的级别（可设置多项）</h1>
<p>#log_type error
#log_type warning
#log_type notice
#log_type information</p>

<h1 id="section-17">是否记录客户端连接信息</h1>
<p>#connection_messages true</p>

<h1 id="section-18">是否记录日志时间</h1>
<p>#log_timestamp true</p>

<h1 id="section-19">=================================================================</h1>
<p># Security
# =================================================================</p>

<h1 id="id">客户端ID的前缀限制，可用于保证安全性</h1>
<p>#clientid_prefixes</p>

<h1 id="section-20">允许匿名用户</h1>
<p>#allow_anonymous true</p>

<h1 id="usernamepassword">用户/密码文件，默认格式：username:password</h1>
<p>#password_file</p>

<h1 id="pskidentitykey">PSK格式密码文件，默认格式：identity:key</h1>
<p>#psk_file</p>

<h1 id="pattern-write-sensorudata">pattern write sensor/%u/data</h1>
<p># ACL权限配置，常用语法如下：
# 用户限制：user <username>
# 话题限制：topic [read|write] <topic>
# 正则限制：pattern write sensor/%u/data
#acl_file</topic></username></p>

<h1 id="section-21">=================================================================</h1>
<p># Bridges
# =================================================================</p>

<h1 id="section-22">允许服务之间使用“桥接”模式（可用于分布式部署）</h1>
<p>#connection <name>
#address <host>[:<port>]
#topic <topic> [[[out | in | both] qos-level] local-prefix remote-prefix]</topic></port></host></name></p>

<h1 id="id-1">设置桥接的客户端ID</h1>
<p>#clientid</p>

<h1 id="section-23">桥接断开时，是否清除远程服务器中的消息</h1>
<p>#cleansession false</p>

<h1 id="section-24">是否发布桥接的状态信息</h1>
<p>#notifications true</p>

<h1 id="section-25">设置桥接模式下，消息将会发布到的话题地址</h1>
<p># $SYS/broker/connection/<clientid>/state
#notification_topic</clientid></p>

<h1 id="keepalive">设置桥接的keepalive数值</h1>
<p>#keepalive_interval 60</p>

<h1 id="automaticlazyonce">桥接模式，目前有三种：automatic、lazy、once</h1>
<p>#start_type automatic</p>

<h1 id="automatic">桥接模式automatic的超时时间</h1>
<p>#restart_timeout 30</p>

<h1 id="lazy">桥接模式lazy的超时时间</h1>
<p>#idle_timeout 60</p>

<h1 id="section-26">桥接客户端的用户名</h1>
<p>#username</p>

<h1 id="section-27">桥接客户端的密码</h1>
<p>#password</p>

<h1 id="bridgecafileca">bridge_cafile：桥接客户端的CA证书文件</h1>
<p># bridge_capath：桥接客户端的CA证书目录
# bridge_certfile：桥接客户端的PEM证书文件
# bridge_keyfile：桥接客户端的PEM密钥文件
#bridge_cafile
#bridge_capath
#bridge_certfile
#bridge_keyfile</p>

<h1 id="section-28">自己的配置可以放到以下目录中</h1>
<p>include_dir /etc/mosquitto/conf.d
&#8220;`</p>

<p>4，启动服务，两种方式</p>

<p><code>bash
mosquitto -c /etc/mosquitto/mosquitto.conf -d
sudo /etc/init.d/mosquitto start
</code></p>

<hr />

<h3 id="section-29">演示部分：</h3>
<p>前面已经开启了服务，如果没有请参考前面步骤。</p>

<p>一、开启另一个终端窗口，运行订阅程序mosquitto_sub:</p>

<p><em>注意</em>：</p>

<p>消息推送的发布和订阅要有主题，选项[-t] 主题，即：mosquitto -t 主题</p>

<p>如需指定用户名称则加选项[-i] 用户名，即：mosquitto_sub -t 主题 -i 订阅端
<code>
mosquitto_sub -t mqtt
</code></p>

<p>二、开启另一个终端窗口，运行发布程序mosquitto_pub:</p>

<p>指定消息推送的主题，发布端用户名和消息：</p>

<p><code>mosquitto_pub -t 主题 -i 发布端 -h 主机 -m 你好</code></p>

<p>*注意：如果消息中间有空格则消息要用引号括起来。
<code>
mosquitto_pub -t 主题 -i 发布端 -h host -m '我是发布端，你好。'
mosquitto_pub -h localhost -t mqtt -m "hello world."
</code></p>

<p>这时候前面那个订阅窗口就可以收到”hello world”的消息了。</p>

<p>演示成功！！！</p>

]]></content>
  </entry>
  
</feed>
