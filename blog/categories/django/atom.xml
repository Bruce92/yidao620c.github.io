<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类目录：django | 笨跑的一刀]]></title>
  <link href="http://yidao620c.github.io/blog/categories/django/atom.xml" rel="self"/>
  <link href="http://yidao620c.github.io/"/>
  <updated>2015-04-21T13:57:17+08:00</updated>
  <id>http://yidao620c.github.io/</id>
  <author>
    <name><![CDATA[熊能]]></name>
    <email><![CDATA[yidao620@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Django1.7开发博客（6）- 模板继承]]></title>
    <link href="http://yidao620c.github.io/blog/20150421/simpleblog-06.html"/>
    <updated>2015-04-21T11:44:21+08:00</updated>
    <id>http://yidao620c.github.io/blog/20150421/simpleblog-06</id>
    <content type="html"><![CDATA[<h3 id="section">什么是模板继承？</h3>
<p>就是网站的多个页面可以共享同一个页面布局或者是页面的某几个部分的内容。
通过这种方式你就需要在每个页面复制粘贴同样的代码了。
如果你想改变页面某个公共部分，你不需要每个页面的去修改，只需要修改一个模板就行了，
这样最大化复用，减少了冗余，也减少了出错的几率，而且你敲的代码也少了。</p>

<h3 id="base">创建一个base模板</h3>
<p>一个base模板就是你全站所有页面都会继承的最基本的网站框架模板。我们在blog/templates/blog/中创建一个base.html模板：</p>

<pre><code>blog
└───templates
    └───blog
            base.html
            post_list.html
</code></pre>

<p>打开base.html，然后将post_list.html的所有内容都复制过来，现在它的内容如下：<!--more-->
</p>

<p>&#8220;` html
{% load staticfiles %}</p>
<html>
<head>
<link rel="stylesheet" href="//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css" />
<link rel="stylesheet" href="//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap-theme.min.css" />
<script src="//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/js/bootstrap.min.js"></script>
<link href="http://fonts.googleapis.com/css?family=Lobster&amp;subset=latin,latin-ext" rel="stylesheet" type="text/css" />
<link rel="stylesheet" href="{% static 'css/blog.css' %}" />
<title>Django Girls Blog</title>
</head>
<body>
    <div class="page-header">
        <h1><a href="http://yidao620c.github.io/">Django Girls Blog</a></h1>
    </div>
    <div class="content">
        <div class="row">
            <div class="col-md-8">
                {% for post in posts %}
                    <div class="post">
                        <h1><a href="">{{ post.title }}</a></h1>
                        <p>published: {{ post.published_date }}</p>
                        <p>{{ post.text|linebreaks }}</p>
                    </div>
                {% endfor %}
            </div>
        </div>
    </div>
</body>
</html>
<p>&#8220;`

在base.html中，将…块替换成下面的：
</p>

<p>&#8220;` html</p>
<body>
    <div class="page-header">
        <h1><a href="http://yidao620c.github.io/">Django Girls Blog</a></h1>
    </div>
    <div class="content">
        <div class="row">
            <div class="col-md-8">
            &#123;% block content %}
            &#123;% endblock %}
            </div>
        </div>
    </div>
</body>
<p>&#8220;`
</p>

<p>我们其实就是将<code>{% for post in posts %}{% endfor %}</code>
替换成了<code>&amp;#123;% block content %}&amp;#123;% endblock %}</code>。
在base.html中我们创建了一个名字为content的block，其他页面可以通过继承base.html，
替换这个content块来生成新的页面，页面其他内容保持不变。</p>

<p>保存后，再修改post_list.html页面，只保留的内容：
</p>

<p><code>html
{% for post in posts %}
    &lt;div class="post"&gt;
        &lt;h1&gt;&lt;a href=""&gt;{{ post.title }}&lt;/a&gt;&lt;/h1&gt;
        &lt;p&gt;published: {{ post.published_date }}&lt;/p&gt;
        &lt;p&gt;{{ post.text|linebreaks }}&lt;/p&gt;
    &lt;/div&gt;
{% endfor %}
</code>

然后添加这句到post_list.html页面的最开始部分：
</p>

<p><code>
{% extends 'blog/base.html' %}
</code>

这句话的意思就是该模板继承自blog/base.html模板</p>

<p>还有一步就是要将刚刚的内容放到{% block content %}和
{% endblock content %}之间，这时候整个页面是这样的：
</p>

<p><code>html
{% extends 'blog/base.html' %}
&amp;#123;% block content %}
{% for post in posts %}
    &lt;div class="post"&gt;
        &lt;h1&gt;&lt;a href=""&gt;{{ post.title }}&lt;/a&gt;&lt;/h1&gt;
        &lt;p&gt;published: {{ post.published_date }}&lt;/p&gt;
        &lt;p&gt;{{ post.text|linebreaks }}&lt;/p&gt;
    &lt;/div&gt;
{% endfor %}
&amp;#123;% endblock content %}
</code>
</p>

<p>保存后刷新页面，看下是不是能正常工作：</p>

<p><img src="http://yidaospace.qiniudn.com/dj016.jpg" alt="" /></p>

<p>一切都OK…</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django1.7开发博客（5）- 页面美化]]></title>
    <link href="http://yidao620c.github.io/blog/20150421/simpleblog-05.html"/>
    <updated>2015-04-21T10:23:50+08:00</updated>
    <id>http://yidao620c.github.io/blog/20150421/simpleblog-05</id>
    <content type="html"><![CDATA[<h3 id="css">什么是css？</h3>
<p>css是一种用来描述某种标记语言写的web站点的样式语言。
这里我们并不想展开讨论，关于CSS我在这里推荐一个很不错的资源： <a href="http://www.codecademy.com/tracks/web">Codeacademy HTML &amp; CSS course</a></p>

<p>不想从头开始写，因为我们有现成的css框架，没必要重复造轮子。</p>

<h3 id="bootstrap">使用Bootstrap</h3>
<p>目前最流行的css框架非bootstrap莫属了，官网地址：<a href="http://getbootstrap.com/">http://getbootstrap.com/</a></p>

<p>只需要在你的html模板页面的开始部分添加下面几句就行了</p>

<p>&#8220;` html</p>
<link rel="stylesheet" href="//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css" />

<link rel="stylesheet" href="//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap-theme.min.css" />

<script src="//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/js/bootstrap.min.js"></script>

<p>&#8220;`</p>

<p>你的工程里面不需要引入任何的文件，因为这里直接引用了bootstrap公共的css和js文件。<!--more--></p>

<p>再次打开模板文件，效果如下：</p>

<p><img src="http://yidaospace.qiniudn.com/dj011.jpg" alt="" /></p>

<p>是不是感觉变美观了。^_^</p>

<h3 id="django">django静态文件</h3>
<p>这里我还将讲解下django中的静态文件。静态文件就是css、js、图片、视频等等那些内容不会改变的文件，不管任何时候，对于任何用户都是一样的。</p>

<p>css就是一种静态文件，为了自定义css，我们必须先再django中配置，你只需要配置一次就可以了。那让我们马上开始吧！</p>

<h3 id="django-1">django中配置静态文件</h3>
<p>首先我们需要创建一个目录来存储静态文件，在manage.py的同级目录中创建一个static文件夹</p>

<pre><code>mysite
├─── static
└─── manage.py
</code></pre>

<p>打开配置文件mysite/settings.py，在最后面添加如下配置：</p>

<p><code>python
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, "static"),
)
</code>
它告知django应该在哪个位置去查找静态文件。</p>

<h3 id="css-1">第一个CSS文件</h3>
<p>现在我们开始创建自己的css文件了，首先在static目录中新建一个css目录，然后在里面创建一个blog.css文件。目录结构如下</p>

<pre><code>static
└─── css
     └───blog.css
</code></pre>

<p>打开文件static/css/blog.css后，添加如下内容</p>

<p><code>css
h1 a {
    color: #FCA205;
}
</code>
h1 a是CSS选择器，上面的意思是在h1标签下的链接a的文字颜色会是#FCA205，其实就是橘黄色，颜色都是用十六进制表示的。</p>

<p>接下来我们要让模板加载静态css文件，打开blog/templates/blog/post_list.html，在最开始部分加入：
</p>

<p><code>
{% load staticfiles %}
</code>

然后在bootstrap引用的后面添加下面这句
</p>

<p>&#8220;`</p>
<link rel="stylesheet" href="{% static 'css/blog.css' %}" />

<p>&#8220;`

最后，整个模板文件类似这样：
</p>

<p>&#8220;` html
{% load staticfiles %}</p>
<html>
    <head>
        <title>Django Girls blog</title>
        <link rel="stylesheet" href="//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css" />
        <link rel="stylesheet" href="//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap-theme.min.css" />
        <script src="//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/js/bootstrap.min.js"></script>
        <link rel="stylesheet" href="{% static 'css/blog.css' %}" />
    </head>
    <body>
        <div>
            <h1><a href="http://yidao620c.github.io/">Django Girls Blog</a></h1>
        </div>

        {% for post in posts %}
            <div>
                <p>published: {{ post.published_date }}</p>
                <h1><a href="">{{ post.title }}</a></h1>
                <p>{{ post.text|linebreaks }}</p>
            </div>
        {% endfor %}
    </body>
</html>
<p>&#8220;`

OK，保存并刷新后看看效果</p>

<p><img src="http://yidaospace.qiniudn.com/dj012.jpg" alt="" /></p>

<p>我想要文字左边的边距大一点，这样会好看些。那么在blog.css中添加如下内容：</p>

<p><code>css
body {
    padding-left: 15px;
}
</code>
刷新页面后效果：</p>

<p><img src="http://yidaospace.qiniudn.com/dj013.jpg" alt="" /></p>

<p>我还想自定义文字标题的字体，在post_list.html模板的中添加如下一句</p>

<p>&#8220;` html</p>
<link href="http://fonts.googleapis.com/css?family=Lobster&amp;subset=latin,latin-ext" rel="stylesheet" type="text/css" />

<p>&#8220;`
这句会引入Google的一个字体Lobster，然后修改blog.css中的h1 a的样式如下：</p>

<p><code>css
h1 a {
    color: #FCA205;
    font-family: 'Lobster';
}
</code>
刷新后的效果：</p>

<p><img src="http://yidaospace.qiniudn.com/dj014.jpg" alt="" /></p>

<h3 id="cssclass">CSS中的class</h3>
<p>在CSS中有一个class的概念，它可以让你只改变HTML中某一部分的样式而不会影响到其他部分。</p>

<p>这里我们将区别标题头和文章本身的样式。</p>

<p>在post_list.html中添加如下的标题段：</p>

<p>&#8220;` html</p>
<div class="page-header">
    <h1><a href="http://yidao620c.github.io/">Django Girls Blog</a></h1>
</div>
<p>&#8220;`
文章列表段修改如下：
</p>

<p>&#8220;` html</p>
<div class="content">
    <div class="row">
        <div class="col-md-8">
            {% for post in posts %}
                <div class="post">
                    <h1><a href="">{{ post.title }}</a></h1>
                    <p>published: {{ post.published_date }}</p>
                    <p>{{ post.text|linebreaks }}</p>
                </div>
            {% endfor %}
        </div>
    </div>
</div>
<p>&#8220;`

blog.css样式修改如下：</p>

<p><code>css
.page-header {
    background-color: #ff9400;
    margin-top: 0;
    padding: 20px 20px 20px 40px;
}
.page-header h1, .page-header h1 a, .page-header h1 a:visited, .page-header h1 a:active {
    color: #ffffff;
    font-size: 36pt;
    text-decoration: none;
}
.content {
    margin-left: 40px;
}
h1, h2, h3, h4 {
    font-family: 'Lobster', cursive;
}
.date {
    float: right;
    color: #828282;
}
.save {
    float: right;
}
.post-form textarea, .post-form input {
    width: 100%;
}
.top-menu, .top-menu:hover, .top-menu:visited {
    color: #ffffff;
    float: right;
    font-size: 26pt;
    margin-right: 20px;
}
.post {
    margin-bottom: 70px;
}
.post h1 a, .post h1 a:visited {
    color: #000000;
}
</code>
保存这些文件后，刷新页面，看看，是不是很酷了：</p>

<p><img src="http://yidaospace.qiniudn.com/dj015.jpg" alt="" /></p>

<p>已经比较美观了。上面的css应该看起来不会那么难，可以自己试着去修改它，没关系的，反正出错了可以撤销。最好多练习才行。</p>

<p>下一节我将介绍django中模板的继承机制！</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django1.7开发博客（4）- 三部曲]]></title>
    <link href="http://yidao620c.github.io/blog/20150420/simpleblog-04.html"/>
    <updated>2015-04-20T19:16:02+08:00</updated>
    <id>http://yidao620c.github.io/blog/20150420/simpleblog-04</id>
    <content type="html"><![CDATA[<h3 id="section">什么是三部曲？</h3>
<p>其实在django中实现一个功能只需要三个步骤即可，这里我姑且叫它三部曲。</p>

<p>这三部曲就是：</p>

<ol>
  <li>定义urls映射</li>
  <li>定义views</li>
  <li>定义templates</li>
</ol>

<h3 id="url">什么是URL？</h3>
<p>URL就算一个WEB地址，你在浏览器输入这个地址，然后浏览器返回相应的网页给你。
比如http://djangogirls.com是一个URL，而127.0.0.1:8000同样也是个URL，默认就是http协议的。</p>

<h3 id="djangourl">Django中的URL工作原理</h3>
<p>我们打开mysite/urls.py文件，会发现类似下面这样：<!--more--></p>

<p>&#8220;` python
from django.conf.urls import patterns, include, url</p>

<p>from django.contrib import admin
admin.autodiscover()</p>

<p>urlpatterns = patterns(‘’,
    # Examples:
    # url(r’^$’, ‘mysite.views.home’, name=’home’),
    # url(r’^blog/’, include(‘blog.urls’)),</p>

<pre><code>url(r'^admin/', include(admin.site.urls)), ) ```
</code></pre>

<p>上面的两行注释先不要管，这个以后再用到。
django默认已经为我们添加了admin的URL配置。
当django碰到以admin/开头的URL的时候会去admin.site.urls里面去寻找对应的匹配。
所有和admin相关的urls配置都写在一个文件中，这样就便于管理了。</p>

<h3 id="section-1">正则表达式</h3>
<p>你可以看到上面的url用到了正则表达式，比如’^admin/’、’^$’等等，
django是通过正则式来匹配URL的。关于正则式这里不想展开太多。可以参考相关数据和教程。</p>

<h3 id="django-url">第一个django url配置</h3>
<p>现在我们要将http://127.0.0.1:8000/这个首页地址映射到一个显示最新文章列表的页面上面去。一般的博客首页基本都是这样的。</p>

<p>为了保持mysite/urls.py配置文件的简介，我们最好将博客的url配置放到单独的文件中。在mysite/urls.py中去将它引进来即可。</p>

<p>那么你的mysite/urls.py文件现在类似于这样了：
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">django.conf.urls</span> <span class="kn">import</span> <span class="n">patterns</span><span class="p">,</span> <span class="n">include</span><span class="p">,</span> <span class="n">url</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">from</span> <span class="nn">django.contrib</span> <span class="kn">import</span> <span class="n">admin</span>
</span><span class='line'><span class="n">admin</span><span class="o">.</span><span class="n">autodiscover</span><span class="p">()</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">urlpatterns</span> <span class="o">=</span> <span class="n">patterns</span><span class="p">(</span><span class="err">‘’</span><span class="p">,</span>
</span><span class='line'>    <span class="n">url</span><span class="p">(</span><span class="n">r</span><span class="err">’</span><span class="o">^</span><span class="n">admin</span><span class="o">/</span><span class="err">’</span><span class="p">,</span> <span class="n">include</span><span class="p">(</span><span class="n">admin</span><span class="o">.</span><span class="n">site</span><span class="o">.</span><span class="n">urls</span><span class="p">)),</span>
</span><span class='line'>    <span class="n">url</span><span class="p">(</span><span class="n">r</span><span class="err">’’</span><span class="p">,</span> <span class="n">include</span><span class="p">(</span><span class="err">‘</span><span class="n">blog</span><span class="o">.</span><span class="n">urls</span><span class="err">’</span><span class="p">)),</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3 id="blogurls">blog.urls</h3>
<p>创建文件blog/urls.py，然后加入下列内容
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">django.conf.urls</span> <span class="kn">import</span> <span class="n">patterns</span><span class="p">,</span> <span class="n">include</span><span class="p">,</span> <span class="n">url</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">.</span> <span class="kn">import</span> <span class="n">views</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">urlpatterns</span> <span class="o">=</span> <span class="n">patterns</span><span class="p">(</span><span class="err">‘’</span><span class="p">,</span>
</span><span class='line'>    <span class="n">url</span><span class="p">(</span><span class="n">r</span><span class="err">’</span><span class="o">^</span><span class="err">$’</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">post_list</span><span class="p">),</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>
现在我们将r’^$’的url映射到视图views.post_list。</p>

<p>不过你要是现在就访问首页http://127.0.0.1:8000/的话会报错的。</p>

<p><img src="http://yidaospace.qiniudn.com/dj006.jpg" alt="" /></p>

<p>为啥，因为你的视图views.post_list现在没有实现啊，找不到这个方法！</p>

<p>那么接下来我们就来讲解view的实现了。</p>

<h3 id="view">什么是view？</h3>
<p>view也叫视图，在django中它存放了实际的业务逻辑。这个跟我们通常所说的MVC中的view是不一样的。</p>

<p><strong>django的MTV模式</strong></p>

<p>这里我稍微解释下django的结构，一般我们称之为MTV模式：</p>

<ol>
  <li>M 代表模型（Model），即数据存取层。该层处理与数据相关的所有事务：如何存取、如何确认有效性、包含哪些行为以及数据之间的关系等。</li>
  <li>T 代表模板(Template)，即表现层。该层处理与表现相关的决定：如何在页面或其他类型文档中进行显示。</li>
  <li>V 代表视图（View），即业务逻辑层。该层包含存取模型及调取恰当模板的相关逻辑。你可以把它看作模型与模板之间的桥梁。</li>
</ol>

<p>那么通常意义的控制器Controller去哪里了呢，细心的童鞋应该会猜到了，那就是我们上一节所讲的urls.py配置文件。</p>

<p>一句话总结：URLconf+MTV构成了django的总体架构。</p>

<p><strong>blog/views.py</strong></p>

<p>这个文件初始内容是这样的：
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">django.shortcuts</span> <span class="kn">import</span> <span class="n">render</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="nb">id</span><span class="o">=</span><span class="s">&quot;create-your-views-here&quot;</span><span class="o">&gt;</span><span class="n">Create</span> <span class="n">your</span> <span class="n">views</span> <span class="n">here</span><span class="o">.&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="err">添加一个最简单的视图：</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">python</span>
</span><span class='line'><span class="k">def</span> <span class="nf">post_list</span><span class="p">(</span><span class="n">request</span><span class="p">):</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="s">&#39;blog/post_list.html&#39;</span><span class="p">,</span> <span class="p">{})</span> <span class="sb">``</span><span class="err">`</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">我们定义了一个方法</span><span class="n">post_list</span><span class="err">，它的参数是</span><span class="n">request</span><span class="err">，使用</span><span class="n">render</span><span class="err">函数返回一个</span><span class="n">html</span><span class="err">模板</span><span class="n">blog</span><span class="o">/</span><span class="n">post_list</span><span class="o">.</span><span class="n">html</span><span class="err">。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">接下来我们访问下首页，</span><span class="n">OMG</span><span class="err">，又出错了：</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;&lt;</span><span class="n">img</span> <span class="n">src</span><span class="o">=</span><span class="s">&quot;http://yidaospace.qiniudn.com/dj007.jpg&quot;</span> <span class="n">alt</span><span class="o">=</span><span class="s">&quot;&quot;</span> <span class="o">/&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">这次报的错是模板</span><span class="n">blog</span><span class="o">/</span><span class="n">post_list</span><span class="o">.</span><span class="n">html</span><span class="err">找不到。这个是显而易见的，因为我们根本还没有定义这个</span><span class="n">html</span><span class="err">模板。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">别着急，继续沿着教程往下看就行…</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h3</span> <span class="nb">id</span><span class="o">=</span><span class="s">&quot;section-2&quot;</span><span class="o">&gt;</span><span class="err">什么是模板？</span><span class="o">&lt;/</span><span class="n">h3</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">一个模板就是一个使用固定格式呈现动态内容的可重用的文件。</span>
</span><span class='line'><span class="err">比如你可以使用一个模板来写邮件，每封邮件可能有不同的内容，寄给不同的人，但是它们的格式是一样的。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Django</span><span class="err">中的模板使用</span><span class="n">HTML</span><span class="err">文件，至于神马是</span><span class="n">HTML</span><span class="err">，这个去参考下</span><span class="n">W3C</span><span class="err">或者自行</span><span class="n">google</span><span class="err">下，</span>
</span><span class='line'><span class="err">不过如果做</span><span class="n">web</span><span class="err">开发的人不懂</span><span class="n">HTML</span><span class="err">，请不要告诉别人我认识你。</span><span class="o">^</span><span class="n">_</span><span class="o">^&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;**</span> <span class="err">第一个模板</span> <span class="o">**&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">创建一个模板就是创建一个</span><span class="n">HTML</span><span class="err">文件。模板文件存储在</span><span class="n">blog</span><span class="o">/</span><span class="n">templates</span><span class="o">/</span><span class="n">blog</span><span class="err">目录下面，</span>
</span><span class='line'><span class="err">首先在</span><span class="n">blog</span><span class="err">目录下创建</span><span class="n">templates</span><span class="err">目录，然后再在</span><span class="n">templates</span><span class="err">目录下创建</span><span class="n">blog</span><span class="err">目录，至于为啥要这么做，</span>
</span><span class='line'><span class="err">先不用管，</span><span class="n">django</span><span class="err">里面很多目录都是约定好的，这个就跟</span><span class="n">maven</span><span class="err">是一样的，约定高于配置。</span>
</span><span class='line'><span class="err">所以你先照着做就是了。目录结构如下：</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">blog</span>
</span><span class='line'><span class="err">└───</span><span class="n">templates</span>
</span><span class='line'>    <span class="err">└───</span><span class="n">blog</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">然后在</span><span class="n">blog</span><span class="o">/</span><span class="n">templates</span><span class="o">/</span><span class="n">blog</span><span class="err">目录下创建一个</span><span class="n">post_list</span><span class="o">.</span><span class="n">html</span><span class="err">文件，现在里面还没有内容。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">这时候再次访问首页，效果如下：</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;&lt;</span><span class="n">img</span> <span class="n">src</span><span class="o">=</span><span class="s">&quot;http://yidaospace.qiniudn.com/dj008.jpg&quot;</span> <span class="n">alt</span><span class="o">=</span><span class="s">&quot;&quot;</span> <span class="o">/&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">一片空白，但没有报错了。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">在</span><span class="n">post_list</span><span class="o">.</span><span class="n">html</span><span class="err">中添加点东西：</span>
</span></code></pre></td></tr></table></div></figure> html</p>
<html>
    <p>Hi there!</p>
    <p>It works!</p>
</html>
<p>&#8220;`</p>

<p>再次访问http://192.168.203.95:8000/：</p>

<p><img src="http://yidaospace.qiniudn.com/dj009.jpg" alt="" /></p>

<h3 id="section-3">动态模板</h3>
<p>不过目前为止我们还只能显示静态的网页。怎样将文章列表在首页显示出来呢？</p>

<p>我们已经有了模型Post，有了模板post_list.html，怎样使得模型数据在模板中显示出来呢，
这个就是视图的功能了，实际上，django中的视图的作用就是连接模型和模板的桥梁。
在视图中，通过QuerySet将数据库中的数据检索出来，然后传递给模板，模板负责显示出来。</p>

<p>首先打开blog/views.py，它目前的内容是这样的：
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">django.shortcuts</span> <span class="kn">import</span> <span class="n">render</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">post_list</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="err">‘</span><span class="n">blog</span><span class="o">/</span><span class="n">post_list</span><span class="o">.</span><span class="n">html</span><span class="err">’</span><span class="p">,</span> <span class="p">{})</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="err">这时候我们将</span><span class="n">Post</span><span class="err">模型导入进来</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">python</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">django.shortcuts</span> <span class="kn">import</span> <span class="n">render</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">.models</span> <span class="kn">import</span> <span class="n">Post</span>
</span></code></pre></td></tr></table></div></figure>
注意我们还是用到了相对导入，这是python3的强大功能。</p>

<h3 id="queryset">QuerySet</h3>
<p>是时候请出QuerySet了，在模型和ORM小节我们已经介绍过。</p>

<p>现在我们想要将数据库中的文章都检索出来并且按照发布日期逆序排序，使得最新的文章放前面。
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">django.shortcuts</span> <span class="kn">import</span> <span class="n">render</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">.models</span> <span class="kn">import</span> <span class="n">Post</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">post_list</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
</span><span class='line'>    <span class="n">posts</span> <span class="o">=</span> <span class="n">Post</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span><span class="n">published_date__isnull</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span><span class="o">.</span><span class="n">order_by</span><span class="p">(</span><span class="err">‘</span><span class="o">-</span><span class="n">published_date</span><span class="err">’</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="err">‘</span><span class="n">blog</span><span class="o">/</span><span class="n">post_list</span><span class="o">.</span><span class="n">html</span><span class="err">’</span><span class="p">,</span> <span class="p">{</span><span class="err">‘</span><span class="n">posts</span><span class="err">’</span><span class="p">:</span> <span class="n">posts</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>
注意render函数中最后一个参数{‘posts’: posts}，这个就是用来给模板传递数据的。</p>

<h3 id="section-4">模板标签</h3>
<p>HTML页面只识别HTML标签，那么怎样让生成动态的内容呢？答案就是使用django自带的模板标签，
包括了判断、循环、管道等语法。我们已经获取了文章的列表了，那么可以使用for循环来生成相应的HTML页面：</p>

<p>&#8220;` html</p>
<html>
<head>
    <title>Django Girls Blog</title>
</head>
<body>
    <div>
        <h1><a href="http://yidao620c.github.io/">Django Girls Blog</a></h1>
    </div>
    
</body>
</html>
<p>&#8220;`</p>

<p>在<code>{% for %}</code> 和<code>{% endfor %}</code>之间会循环每个post，然后每次生成一段</p>

<p>现在再次访问首页，效果如下：</p>

<p><img src="http://yidaospace.qiniudn.com/dj010.jpg" alt="" /></p>

<h3 id="section-5">别忘了一件事</h3>
<p>别忘了把它push到heroku上面去。</p>

<p><code>
git add .
git commit -m '动态文章列表首页'
git push origin master
</code></p>

<p>恭喜你，目前为止基本的全程已经贯通了。打开admin后添加几篇文章，
记得填上发布日期，再刷新下首页，看会不会显示出来。</p>

<p>好了，这时候你可以出门左拐去小卖部给自己买点棒棒糖奖励下自己了！</p>

<p>不过我们的教程还没完，怎样让页面变得漂亮呢？请看下一节。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django1.7开发博客（3）- 部署]]></title>
    <link href="http://yidao620c.github.io/blog/20150420/simpleblog-03.html"/>
    <updated>2015-04-20T19:03:57+08:00</updated>
    <id>http://yidao620c.github.io/blog/20150420/simpleblog-03</id>
    <content type="html"><![CDATA[<p>到目前为止，你的网站只能在你自己的电脑上访问到。你需要将它发布到公网上去让地球上的人都能看到，那么要怎么做呢？</p>

<h3 id="heroku">Heroku简介</h3>
<p>Heroku是一个主机托管平台，对于访问量不是很大的小应用是免费的，正好适用于我们的这个例子。</p>

<p>Heroku官网上有一篇django的教程：
<a href="https://devcenter.heroku.com/articles/getting-started-with-django">getting started with django</a></p>

<p>这里我把它复制到这里来详细讲解一下。</p>

<h3 id="requirementstxt">requirements.txt文件</h3>
<p>我们需要创建一个requirements.txt文件来告知Heroku需要在服务器上创建哪些python包。</p>

<p>不过首先，Heroku需要我们在本地按照一些包。在python虚拟环境virtualenv下面执行：<!--more-->
<code>
(myvenv) [mango@centos mysite]$ pip install dj-database-url gunicorn whitenoise
</code>
然后，在mysite目录，也就是manage.py所在目录执行：
<code>
(myvenv) [mango@centos00 mysite]$ pip freeze &gt; requirements.txt
</code>
这条命令会新建一个requirements.txt文件，里面包含了工程的所有依赖包。</p>

<p>打开这个文件，添加下面这句话：
<code>
psycopg2==2.5.4
</code>
要想在Heroku上面运行，必须加上这句。</p>

<h3 id="procfile">Procfile文件</h3>
<p>另一个需要创建的文件就是Procfile，它告知Heroku在启动网站时需要执行的命令。
同样在manage.py所在目录，新建一个文件名为Procfile，添加如下内容：
<code>
web: gunicorn mysite.wsgi
</code>
这句话的意思就是我们将要部署一个web应用程序，并且我们通过执行 gunicorn mysite.wsgi命令来完成。</p>

<p>gunicorn是一个类似django的runserver的程序，但是功能更强大。</p>

<h3 id="runtimetxt">runtime.txt文件</h3>
<p>我们需要告知Heroku运行时的python版本，这里我们指定为3.4.2。新建runtime.txt，加入
<code>
python-3.4.2
</code></p>

<h3 id="mysitelocalsettingspy">mysite/local_settings.py文件</h3>
<p>由于我们本地开发使用的数据库跟服务器上部署时使用的数据库是不一样的。
那么我们需要创建一个local_settings.py来指定本地用的数据库。
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">os</span>
</span><span class='line'><span class="n">BASE_DIR</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">dirname</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">dirname</span><span class="p">(</span><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="nb">file</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="p">))</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">DATABASES</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="err">‘</span><span class="n">default</span><span class="err">’</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="err">‘</span><span class="n">ENGINE</span><span class="err">’</span><span class="p">:</span> <span class="err">‘</span><span class="n">django</span><span class="o">.</span><span class="n">db</span><span class="o">.</span><span class="n">backends</span><span class="o">.</span><span class="n">sqlite3</span><span class="err">’</span><span class="p">,</span>
</span><span class='line'>        <span class="err">‘</span><span class="n">NAME</span><span class="err">’</span><span class="p">:</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">BASE_DIR</span><span class="p">,</span> <span class="err">‘</span><span class="n">db</span><span class="o">.</span><span class="n">sqlite3</span><span class="err">’</span><span class="p">),</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">DEBUG</span> <span class="o">=</span> <span class="bp">True</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3 id="mysitesettingspy">mysite/settings.py文件</h3>
<p>另外我们还需要修改settings.py文件，在文件结尾添加如下几行
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">dj_database_url</span>
</span><span class='line'><span class="n">DATABASES</span><span class="p">[</span><span class="err">‘</span><span class="n">default</span><span class="err">’</span><span class="p">]</span> <span class="o">=</span>  <span class="n">dj_database_url</span><span class="o">.</span><span class="n">config</span><span class="p">()</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">SECURE_PROXY_SSL_HEADER</span> <span class="o">=</span> <span class="p">(</span><span class="err">‘</span><span class="n">HTTP_X_FORWARDED_PROTO</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="n">https</span><span class="err">’</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">ALLOWED_HOSTS</span> <span class="o">=</span> <span class="p">[</span><span class="err">‘</span><span class="o">*</span><span class="err">’</span><span class="p">]</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">STATIC_ROOT</span> <span class="o">=</span> <span class="err">‘</span><span class="n">staticfiles</span><span class="err">’</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">DEBUG</span> <span class="o">=</span> <span class="bp">False</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="err">然后再导入本地开发配置，也是在最后添加</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">python</span>
</span><span class='line'><span class="k">try</span><span class="p">:</span>
</span><span class='line'>    <span class="kn">from</span> <span class="nn">.local_settings</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'><span class="k">except</span> <span class="ne">ImportError</span><span class="p">:</span>
</span><span class='line'>    <span class="k">pass</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3 id="mysitewsgipy">mysite/wsgi.py文件</h3>
<p>打开mysite/wsgi.py文件，添加如下几行到最后：
<code>python
from whitenoise.django import DjangoWhiteNoise
application = DjangoWhiteNoise(application)
</code>
OK，工程配置修改做完了。</p>

<h3 id="heroku-1">Heroku账号</h3>
<p>首先你需要安装Heroku toolbelt，教程地址：<a href="https://toolbelt.heroku.com/">https://toolbelt.heroku.com/</a></p>

<p>两句话搞定：
<code>
wget -qO- https://toolbelt.heroku.com/install.sh | sh
echo 'PATH="/usr/local/heroku/bin:$PATH"' &gt;&gt; ~/.profile
</code>
然后申请一个账号：<a href="https://id.heroku.com/signup/www-home-top">https://id.heroku.com/signup/www-home-top</a></p>

<p>登录：
<code>
heroku login
</code>
如果报bad URI错误的话，那么代理设置必须是http://192.168.203.91:3128/这样的完整形式。
<code>
[mango@centos00 work]$ heroku login
Enter your Heroku credentials.
Email: yidao620@gmail.com
Password (typing will be hidden):
Your Heroku account does not have a public ssh key uploaded.
Found an SSH public key at /home/mango/.ssh/id_rsa.pub
Would you like to upload it to Heroku? [Yn] Y
Uploading SSH public key /home/mango/.ssh/id_rsa.pub... done
Authentication successful.
</code></p>

<h3 id="gitignore">.gitignore文件</h3>
<p>我们并不想将所有文件都上传到服务器上，
比如我们本地设置local_setttings.py，数据库文件等。
在我们工程主目录下面创建一个.gitignore文件，内容如下</p>

<pre><code>myvenv
__pycache__
*.pyc
staticfiles
local_settings.py
db.sqlite3
</code></pre>

<h3 id="heroku-2">部署到Heroku</h3>
<p>第一步先创建一个工程
<code>
(myvenv) [mango@centos00 mysite]$ heroku create yidaoblog
</code>
返回结果</p>

<pre><code>Creating yidaoblog... done, stack is cedar
https://yidaoblog.herokuapp.com/ | git@heroku.com:yidaoblog.git
</code></pre>

<p>请记住上面的地址git@heroku.com:yidaoblog.git</p>

<p>第二步初始化git本地仓库提交，并添加上面的远程仓库地址
<code>
[mango@centos00 mysite]$ git init
初始化空的 Git 版本库于 /home/mango/work/djangogirls/mysite/.git/
[mango@centos00 mysite]$ git add .
[mango@centos00 mysite]$ git commit -m 'yidao blog by django.'
[mango@centos00 mysite]$ git remote add origin git@heroku.com:yidaoblog.git
</code></p>

<p>第三步push工程
<code>
[mango@centos00 mysite]$ git push origin master
</code></p>

<p>最后得到类似下面的输出：</p>

<pre><code>Successfully installed Django dj-database-url gunicorn whitenoise psycopg2
     Cleaning up...

-----&gt; Preparing static assets
       Running collectstatic...
       61 static files copied to '/app/staticfiles'.

-----&gt; Discovering process types
       Procfile declares types -&gt; web

-----&gt; Compressing... done, 39.6MB
-----&gt; Launching... done, v5
       https://yidaoblog.herokuapp.com/ deployed to Heroku

To git@heroku.com:yidaoblog.git
 * [new branch]      master -&gt; master
</code></pre>

<p>大功告成。</p>

<h3 id="section">访问应用</h3>
<p>让Heroku启动你的应用
<code>
$ heroku ps:scale web=1 --app yidaoblog
</code>
启动一个实例即可</p>

<p>同步数据库（这一步是必须要做的，否则会报500错误）：
<code>
$ heroku run:detached python manage.py migrate --app yidaoblog
</code>
不过我运行后，只是表结构同步了，本地数据并没有同步，所以还要进行数据同步。
试了好多教程都不尽如人意。最后一个最好的方案是本地直接使用postgresql开发，然后使用import技术。</p>

<p>参考教程： <a href="https://devcenter.heroku.com/articles/heroku-postgres-import-export">https://devcenter.heroku.com/articles/heroku-postgres-import-export</a></p>

<p>如果本地要使用postgresql开发的话，local_settings.py文件需要修改如下：
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">os</span>
</span><span class='line'><span class="n">BASE_DIR</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">dirname</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">dirname</span><span class="p">(</span><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="nb">file</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="p">))</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">DATABASES</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="err">‘</span><span class="n">default</span><span class="err">’</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="err">‘</span><span class="n">ENGINE</span><span class="err">’</span><span class="p">:</span> <span class="err">‘</span><span class="n">django</span><span class="o">.</span><span class="n">db</span><span class="o">.</span><span class="n">backends</span><span class="o">.</span><span class="n">postgresql_psycopg2</span><span class="err">’</span><span class="p">,</span>
</span><span class='line'>        <span class="err">‘</span><span class="n">NAME</span><span class="err">’</span><span class="p">:</span> <span class="err">‘</span><span class="n">django</span><span class="err">’</span><span class="p">,</span>
</span><span class='line'>        <span class="err">‘</span><span class="n">USER</span><span class="err">’</span><span class="p">:</span> <span class="err">‘</span><span class="n">postgres</span><span class="err">’</span><span class="p">,</span>
</span><span class='line'>        <span class="err">‘</span><span class="n">PASSWORD</span><span class="err">’</span><span class="p">:</span> <span class="err">‘</span><span class="n">postgres</span><span class="err">’</span><span class="p">,</span>
</span><span class='line'>        <span class="err">‘</span><span class="n">HOST</span><span class="err">’</span><span class="p">:</span> <span class="err">‘</span><span class="mf">192.168</span><span class="o">.</span><span class="mf">203.95</span><span class="err">’</span><span class="p">,</span>
</span><span class='line'>        <span class="err">‘</span><span class="n">PORT</span><span class="err">’</span><span class="p">:</span> <span class="err">‘</span><span class="mi">5432</span><span class="err">’</span><span class="p">,</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">DEBUG</span> <span class="o">=</span> <span class="bp">True</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3 id="centos6postgresql93">在CentOS6上面安装postgresql9.3</h3>
<p><code>
sudo yum install python-devel
export PATH=/usr/pgsql-9.3/bin/:$PATH
pip install psycopg2
</code>
出现pg_config命令找不到的时候可以先find：
<code>
sudo find /usr -name pg_config
</code>
然后添加到PATH中去：
<code>
export PATH=/usr/pgsql-9.3/bin/:$PATH
</code>
使用postgres用户登录后备份数据库：
<code>
su - postgres(postgres)
pg_dump dbname &gt; /tmp/mydb.txt
</code>
将输出的mydb.txt放到某个静态文件服务器上，必须在公网上可访问，比如七牛存储。
为什么我没有选择AWS S3呢？原因你肯定懂得啦，就算我有了梯子还是不行，
弄了一下午还是没成功，快气晕了。哎…</p>

<p>使用如下命令进行数据同步：
<code>
heroku pgbackups:restore DATABASE_URL 'http://yidaospace.qiniudn.com/mydb.txt'
</code>
期间需要你输入你的app名字来确认，并且还需要给你的app添加一个免费的addon：
<code>
heroku addons:add pgbackups
</code>
查看日志：
<code>
(myvenv) [mango@centos00 mysite]$ heroku logs
</code>
查看启动的实例
<code>
[mango@centos00 mysite]$ heroku ps
=== web (1X): `gunicorn mysite.wsgi`
web.1: up 2014/11/04 09:40:43 (~ 7m ago)
</code></p>

<p>打开浏览器访问吧！ Enjoy it…</p>

<p>输入网址 https://yidaoblog.herokuapp.com/admin 后的界面如下：</p>

<p><img src="http://yidaospace.qiniudn.com/dj005.jpg" alt="" /></p>

<p>停止应用的命令
<code>
heroku ps:scale web=0 --app yidaoblog
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django1.7开发博客（2）- 模型]]></title>
    <link href="http://yidao620c.github.io/blog/20150420/simpleblog-02.html"/>
    <updated>2015-04-20T18:49:57+08:00</updated>
    <id>http://yidao620c.github.io/blog/20150420/simpleblog-02</id>
    <content type="html"><![CDATA[<h3 id="section">什么是模型？</h3>
<p>django的模型就是用于在数据库中存储的某种类型的对象。在我们的博客系统中，
发表的文章就是一个模型，需要存储在数据库中。
这里我们使用django默认的sqlite3库，对于我们的这个小系统而言已经足够了。</p>

<h3 id="section-1">创建一个应用</h3>
<p>在django中有两个概念需要弄清楚。一个是工程（project）的概念，一个是应用（application）的概念。
它们的关系是：一个工程中包含多个应用。每个应用都是独立的，应用通过setting.py注册到工程中来就可以使用了。
这样可以解耦合，并且好的应用也可以复用。很好的模块化设计！</p>

<p>在manage.py文件所在目录，执行下面命令：
<code>
(myvenv) [mango@centos00 mysite]$ python manage.py startapp blog
</code>
你会看到一个新的blog文件夹被创建，并且下面多了许多文件，目前结构如下：<!--more--></p>

<pre><code>mysite
├── mysite
|       __init__.py
|       settings.py
|       urls.py
|       wsgi.py
├── manage.py
└── blog
    ├── migrations
    |       __init__.py
    ├── __init__.py
    ├── admin.py
    ├── models.py
    ├── tests.py
    └── views.py
</code></pre>

<p>然后在setting.py中注册这个应用</p>

<p><code>python
INSTALLED_APPS = (
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'blog',
)
</code></p>

<h3 id="section-2">创建一个博客文章的模型</h3>
<p>在blog/models.py中定义所有的模型，用vim打开后添加下面的内容
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">django.db</span> <span class="kn">import</span> <span class="n">models</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">django.utils</span> <span class="kn">import</span> <span class="n">timezone</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">django.contrib.auth.models</span> <span class="kn">import</span> <span class="n">User</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">class</span> <span class="nc">Post</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
</span><span class='line'>    <span class="n">author</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">ForeignKey</span><span class="p">(</span><span class="n">User</span><span class="p">)</span>
</span><span class='line'>    <span class="n">title</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">200</span><span class="p">)</span>
</span><span class='line'>    <span class="n">text</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">TextField</span><span class="p">()</span>
</span><span class='line'>    <span class="n">created_date</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">DateTimeField</span><span class="p">(</span><span class="n">default</span><span class="o">=</span><span class="n">timezone</span><span class="o">.</span><span class="n">now</span><span class="p">)</span>
</span><span class='line'>    <span class="n">published_date</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">DateTimeField</span><span class="p">(</span><span class="n">blank</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">null</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">publish</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">published_date</span> <span class="o">=</span> <span class="n">timezone</span><span class="o">.</span><span class="n">now</span><span class="p">()</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">save</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">__str__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">title</span> <span class="sb">``</span><span class="err">`</span> <span class="err">我们定义了作者，标题，文章内容，创建时间，发布时间等。还添加了一个</span><span class="n">publish</span><span class="err">方法用于保存发布。</span> <span class="err">每个字段都需要定义它的类型，这里的几个类型解释如下：</span>
</span><span class='line'>
</span><span class='line'><span class="n">CharField</span><span class="err">：普通的文本</span>
</span><span class='line'><span class="n">TextField</span><span class="err">：长文本</span>
</span><span class='line'><span class="n">DateTimeField</span><span class="err">：日期时间类型</span>
</span><span class='line'><span class="n">ForeignKey</span><span class="err">：外键类型</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">详细的字段类型说明请参考官方文档：</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;https://docs.djangoproject.com/en/1.7/ref/models/fields/#field-types&quot;</span><span class="o">&gt;</span><span class="n">field</span><span class="o">-</span><span class="n">types</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="err">在数据库中为模型生成表结构：</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">每次我们新建了一个模型后，需要在数据库中添加对应的表。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">第一步是先让</span><span class="n">django</span><span class="err">感知到我们刚刚已经创建了一个新的模型：</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="p">(</span><span class="n">myvenv</span><span class="p">)</span> <span class="p">[</span><span class="n">mango</span><span class="nd">@centos00</span> <span class="n">mysite</span><span class="p">]</span><span class="err">$</span> <span class="n">python</span> <span class="n">manage</span><span class="o">.</span><span class="n">py</span> <span class="n">makemigrations</span> <span class="n">blog</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="err">输出如下：</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Migrations</span> <span class="k">for</span> <span class="s">&#39;blog&#39;</span><span class="p">:</span>
</span><span class='line'>  <span class="mo">0001</span><span class="n">_initial</span><span class="o">.</span><span class="n">py</span><span class="p">:</span>
</span><span class='line'>    <span class="o">-</span> <span class="n">Create</span> <span class="n">model</span> <span class="n">Post</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">这时候</span><span class="n">django</span><span class="err">已经为我们准备好了数据库更新的</span><span class="n">sql</span><span class="err">文件。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">第二步是让</span><span class="n">django</span><span class="err">帮我们执行这些文件：</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="p">(</span><span class="n">myvenv</span><span class="p">)</span> <span class="p">[</span><span class="n">mango</span><span class="nd">@centos00</span> <span class="n">mysite</span><span class="p">]</span><span class="err">$</span> <span class="n">python</span> <span class="n">manage</span><span class="o">.</span><span class="n">py</span> <span class="n">migrate</span> <span class="n">blog</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="err">输出如下：</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Operations</span> <span class="n">to</span> <span class="n">perform</span><span class="p">:</span>
</span><span class='line'>  <span class="n">Apply</span> <span class="nb">all</span> <span class="n">migrations</span><span class="p">:</span> <span class="n">blog</span>
</span><span class='line'><span class="n">Running</span> <span class="n">migrations</span><span class="p">:</span>
</span><span class='line'>  <span class="n">Applying</span> <span class="n">blog</span><span class="o">.</span><span class="mo">0001</span><span class="n">_initial</span><span class="o">...</span> <span class="n">OK</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">OK</span><span class="err">，这时候数据库中已经有</span><span class="n">post</span><span class="err">这张表了。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h3</span> <span class="nb">id</span><span class="o">=</span><span class="s">&quot;orm&quot;</span><span class="o">&gt;</span><span class="err">对象关系映射</span><span class="n">ORM</span><span class="o">&lt;/</span><span class="n">h3</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">下面我们看看</span><span class="n">django</span><span class="err">的</span><span class="n">ORM</span><span class="err">是怎样和数据库打交道的。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">首先解释下</span><span class="n">QuerySet</span><span class="err">，它是某个模型的对象列表，用来从数据库中读取数据，过滤和排序等等。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h3</span> <span class="nb">id</span><span class="o">=</span><span class="s">&quot;djangodjango-shell&quot;</span><span class="o">&gt;</span><span class="n">Django</span><span class="err">控制台</span><span class="n">Django</span> <span class="n">Shell</span><span class="o">&lt;/</span><span class="n">h3</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">执行以下命令可以打开</span><span class="n">django</span><span class="err">的控制台</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="p">(</span><span class="n">myvenv</span><span class="p">)</span> <span class="p">[</span><span class="n">mango</span><span class="nd">@centos00</span> <span class="n">mysite</span><span class="p">]</span><span class="err">$</span> <span class="n">python</span> <span class="n">manage</span><span class="o">.</span><span class="n">py</span> <span class="n">shell</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">查询所有的博客文章</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="kn">from</span> <span class="nn">blog.models</span> <span class="kn">import</span> <span class="n">Post</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">Post</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">all</span><span class="p">()</span>
</span><span class='line'><span class="p">[]</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">这时候肯定是空的，因为我们还没有任何数据。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">下面我们去新建几篇文章</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">先要创建一个用户，因为</span><span class="n">Post</span><span class="err">里面有</span><span class="n">User</span><span class="err">外键</span>
</span></code></pre></td></tr></table></div></figure>
»&gt; from django.contrib.auth.models import User
»&gt; User.objects.create(username=’ola’)</p>
<user: ola="">
&gt;&gt;&gt; User.objects.all()
[<user: ola="">]
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="err">然后添加文章：</span>
</span></code></pre></td></tr></table></div></figure>
&gt;&gt;&gt; user = User.objects.get(username=&#8217;ola&#8217;)
&gt;&gt;&gt; Post.objects.create(author = user, title = &#8216;Sample title&#8217;, text = &#8216;Test&#8217;)
<post: sample="" title="">
&gt;&gt;&gt; Post.objects.all()
[<post: sample="" title="">]
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">**</span><span class="err">文章过滤</span><span class="o">**</span>
</span><span class='line'>
</span><span class='line'><span class="err">先像前面那样再添加几篇文章，此处省略七十二个字…</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>
&gt;&gt;&gt; Post.objects.filter(author=user)
[<post: sample="" title="">, <post: cool="" day="" aha="">, <post: lilei="" and="" hanmeimei="">, <post: happy="" boy="">]
&gt;&gt;&gt; Post.objects.filter(title__contains=&#8217;LiLei&#8217;)
[<post: lilei="" and="" hanmeimei="">]
&gt;&gt;&gt; Post.objects.filter(published_date__isnull=False)
[]
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="err">最后的输出表示所有的文章</span><span class="n">published_date</span><span class="err">都是空的。我想改变这个情况。可以这样做</span>
</span></code></pre></td></tr></table></div></figure>
&gt;&gt;&gt; post = Post.objects.get(id=1)
&gt;&gt;&gt; post.publish()
&gt;&gt;&gt; Post.objects.filter(published_date__isnull=False)
[<post: sample="" title="">]
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">**</span><span class="err">结果排序</span><span class="o">**</span>
</span><span class='line'>
</span><span class='line'><span class="err">还可以根据某个或某几个字段来排序检索结果</span>
</span></code></pre></td></tr></table></div></figure>
&gt;&gt;&gt; Post.objects.order_by(&#8216;created_date&#8217;)
[<post: sample="" title="">, <post: cool="" day="" aha="">, <post: lilei="" and="" hanmeimei="">, <post: happy="" boy="">]
&gt;&gt;&gt; Post.objects.order_by(&#8216;-created_date&#8217;)
[<post: happy="" boy="">, <post: lilei="" and="" hanmeimei="">, <post: cool="" day="" aha="">, <post: sample="" title="">]
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">OK</span><span class="err">，目前为止你应该对</span><span class="n">django</span><span class="err">的</span><span class="n">ORM</span><span class="err">有了大体的了解了。</span>
</span><span class='line'>
</span><span class='line'><span class="err">请用</span><span class="nb">exit</span><span class="p">()</span><span class="err">退出</span><span class="n">django</span><span class="err">的控制台</span>
</span></code></pre></td></tr></table></div></figure>
&gt;&gt;&gt; exit()
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">### 利用django admin修改模型</span>
</span><span class='line'><span class="err">在上面我们已经创建了</span><span class="n">Post</span><span class="err">模型并且通过</span><span class="n">django</span><span class="err">控制台来添加修改模型。</span>
</span><span class='line'><span class="err">然后我们使用</span><span class="n">django</span><span class="err">自带的</span><span class="n">web</span><span class="err">管理界面</span><span class="n">admin</span><span class="err">来在页面上修改模型数据。</span>
</span><span class='line'>
</span><span class='line'><span class="c">### 模型注册</span>
</span><span class='line'><span class="err">首先我们需要在</span><span class="n">admin</span><span class="err">中注册对应的模型，打开</span><span class="n">blog</span><span class="o">/</span><span class="n">admin</span><span class="o">.</span><span class="n">py</span><span class="err">文件，修改如下</span>
</span></code></pre></td></tr></table></div></figure> python
from django.contrib import admin
from .models import Post

admin.site.register(Post)
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="err">注意上面的</span><span class="kn">from</span> <span class="nn">.models</span> <span class="kn">import</span> <span class="n">Post</span><span class="err">，使用到了</span><span class="n">python3</span><span class="err">的相对导入。</span>
</span><span class='line'>
</span><span class='line'><span class="c">### 运行服务器</span>
</span><span class='line'><span class="err">一切都这么简单，接下来我们启动服务器</span>
</span></code></pre></td></tr></table></div></figure>
(myvenv) [mango@centos mysite]$ python manage.py runserver 192.168.203.95:8000
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="err">打开链接：</span><span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="mf">192.168</span><span class="o">.</span><span class="mf">203.95</span><span class="p">:</span><span class="mi">8000</span><span class="o">/</span><span class="n">admin</span><span class="o">/</span>
</span><span class='line'>
</span><span class='line'><span class="err">看到下面的界面：</span>
</span><span class='line'>
</span><span class='line'><span class="err">!</span><span class="p">[](</span><span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">yidaospace</span><span class="o">.</span><span class="n">qiniudn</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">dj002</span><span class="o">.</span><span class="n">jpg</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c">### 添加管理员</span>
</span><span class='line'>
</span><span class='line'><span class="err">不过你需要一个管理员才能登录。运行</span><span class="n">python</span> <span class="n">manage</span><span class="o">.</span><span class="n">py</span> <span class="n">createsuperuser</span><span class="err">可以创建管理员账号。</span>
</span></code></pre></td></tr></table></div></figure>
(myvenv) [mango@centos00 mysite]$ python manage.py createsuperuser
Username (leave blank to use &#8216;mango&#8217;): admin
Email address: admin@gmail.com
Password:
Password (again):
Superuser created successfully.
&#8220;`

我创建了一个admin/admin的账户。这时候登录

![](http://yidaospace.qiniudn.com/dj003.jpg)

点击Posts修改或者增加等等，确保里面至少2个又published_date，这个后面会用到。

![](http://yidaospace.qiniudn.com/dj004.jpg)

更多关于django admin的内容，参考官方文档：[admin](https://docs.djangoproject.com/en/1.7/ref/contrib/admin/)

### 接下来呢？
先别急嘛，坐下来喝杯咖啡先。到现在为止你已经前进了很远了。

</post:></post:></post:></post:></post:></post:></post:></post:></post:></post:></post:></post:></post:></post:></post:></post:></user:></user:>
]]></content>
  </entry>
  
</feed>
