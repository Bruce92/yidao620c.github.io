<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类目录：simpleblog | 笨跑的一刀]]></title>
  <link href="http://yidao620c.github.io/blog/categories/simpleblog/atom.xml" rel="self"/>
  <link href="http://yidao620c.github.io/"/>
  <updated>2015-04-24T15:11:56+08:00</updated>
  <id>http://yidao620c.github.io/</id>
  <author>
    <name><![CDATA[熊能]]></name>
    <email><![CDATA[yidao620@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Django1.7开发博客（11）- 富文本与代码高亮]]></title>
    <link href="http://yidao620c.github.io/blog/20150421/simpleblog-11.html"/>
    <updated>2015-04-21T18:27:29+08:00</updated>
    <id>http://yidao620c.github.io/blog/20150421/simpleblog-11</id>
    <content type="html"><![CDATA[<h2 id="tinymce">TinyMCE介绍</h2>
<p>TinyMCE是一个轻量级的基于浏览器的所见即所得编辑器，支持目前流行的各种浏览器，由JavaScript写成。
功能配置灵活简单（两行代码就可以将编辑器嵌入网页中），支持AJAX。另一特点是加载速度非常快。</p>

<p>django里引用TinyMCE富文本编辑器，其实很简单，前提是你知道django的静态文件配置。
其实这个我已经在前面文章提到过，可以回去再看看。</p>

<p>TinyMCE的官方网站是：<a href="http://www.tinymce.com/">http://www.tinymce.com/</a></p>

<p>下载地址：<a href="http://download.moxiecode.com/tinymce/tinymce_4.1.9.zip">http://download.moxiecode.com/tinymce/tinymce_4.1.9.zip</a></p>

<p>TinyMCE的最新版本是4.1.9，下面是官网截屏：</p>

<p><img src="http://yidaospace.qiniudn.com/tinymce.png" alt="" /></p>

<p>下载下来后，我们把它解压到工程的static/目录下面，如下图所示：<!--more--></p>

<p><img src="http://yidaospace.qiniudn.com/dj101.png" alt="" /></p>

<h2 id="section">安装原理</h2>
<p>安装的原理很简单，只需要在使用编辑器的页面里引用tinymce.min.js文件并初始化就可以了。
tinymce.min.js文件在tinymce项目里，
tinymce.min.js会根据初始配置里的信息找到需要用编辑器的html节点。</p>

<p>例如在post_edit.html页面使用编辑器，只需要在模板文件写下：</p>

<p></p>

<p><code>html
{% load staticfiles %}
{% block header %}
    &lt;link rel="stylesheet" href="{% static 'tinymce/plugins/upload/plugin.css' %}"&gt;
    &lt;script type="text/javascript" src="{% static 'tinymce/tinymce.min.js' %}"&gt;&lt;/script&gt;
    &lt;script type="text/javascript"&gt;
        tinymce.init({
            selector: "textarea",
            //width: 800,
            height: 300,
            forced_root_block: false,
            plugins: [
                "advlist autolink lists link image charmap print preview anchor sh4tinymce upload",
                "searchreplace visualblocks code fullscreen",
                "insertdatetime table contextmenu paste"
            ],
            toolbar: "insertfile undo redo | styleselect | bold italic | alignleft aligncenter" +
            " alignright alignjustify | bullist numlist outdent indent | preview link image sh4tinymce"
        });
    &lt;/script&gt;
{% endblock %}
</code>
</p>

<p>这段代码的含义是 初始化 tinyMCE编辑器，selector指需要将编辑器显示在html那个标签节点，
这里选了textareas。则表示<textareas>会变成编辑器所在的位置。</textareas></p>

<p>另外，我还自定义一下编辑器的高度、插件、菜单项目等。具体详细配置请参考官方文档，写的都比较清楚。</p>

<h2 id="tinymceaddmore">给TinyMCE增加一个addmore插件</h2>
<p>需求很简单，就是每次我写文章的时候需要插入某个<code>&lt;!--more--&gt;</code>标签，
这样可以在列表页面先只显示文章的一部分，然后碰到这个more标签就显示一个”点击阅读更多”的链接。</p>

<p>第一步，在tinymce/plugins文件下新增一个addmore文件夹，然后在里面新建一个plugin.min.js文件，
内容如下：</p>

<p><code>
tinymce.PluginManager.add("addmore", function (a) {
    a.addCommand("InsertMoreRule", function () {
        a.execCommand("mceInsertContent", !1, "[!--more--]")
    }), a.addButton("addmore", {
        icon: "addmore",
        tooltip: "Insert More",
        cmd: "InsertMoreRule"
    }), a.addMenuItem("addmore", {
        icon: "addmore",
        text: "Insert More",
        cmd: "InsertMoreRule",
        context: "insert"
    })
});
</code></p>

<p>在post_edit.html中修改tinymce.init方法，plugins项目后面添加一个addmore：</p>

<pre><code>...
plugins: [
    "advlist autolink lists link image charmap print preview anchor sh4tinymce upload",
    "searchreplace visualblocks code fullscreen",
    "insertdatetime table contextmenu paste addmore"
],
...
</code></pre>

<p>再看看效果，没问题了。</p>

<h2 id="syntaxhighlighter">SyntaxHighlighter代码高亮</h2>
<p>程序员写博客当然少不了代码高亮，这个功能页很容易实现。有一款插件叫SyntaxHighlighter值的推荐。</p>

<p>项目主页：<a href="http://alexgorbatchev.com/SyntaxHighlighter/">http://alexgorbatchev.com/SyntaxHighlighter/</a></p>

<p>下载地址：<a href="http://alexgorbatchev.com/SyntaxHighlighter/download/download.php?sh_current">http://alexgorbatchev.com/SyntaxHighlighter/download/download.php?sh_current</a></p>

<p>下载下来后直接解压到static/目录下面，这个跟tinymce是一样的原理。</p>

<p><strong>使用方法</strong></p>

<p>只需要修改django页面的基础模板就行了，非常简单。</p>

<p>打开mysite/templates/mysite/base.html页面，引入syntaxhighlighter：
</p>

<p>&#8220;` html
{% load staticfiles %}
{% load i18n %}</p>
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
    <!-- Latest compiled and minified CSS -->
    <link rel="stylesheet" href="{% static 'css/bootstrap.min.css' %}" />
    <!-- Optional theme -->
    <link rel="stylesheet" href="{% static 'css/bootstrap-theme.min.css' %}" />
    <!-- Blog CSS-->
    <link rel="stylesheet" href="{% static 'css/blog.css' %}" />
    <link type="text/css" rel="stylesheet" href="{% static 'syntaxhighlighter/styles/shCoreDefault.css' %}" />
    <script type="text/javascript" src="{% static 'syntaxhighlighter/scripts/shCore.js' %}"></script>
    <script type="text/javascript">SyntaxHighlighter.all();</script>
    <!-- Latest compiled and minified JavaScript -->
    <script src="{% static 'js/jquery-1.11.1.min.js' %}"></script>
    <script src="{% static 'js/base.js' %}"></script>
    <script src="{% static 'js/bootstrap.min.js' %}"></script>
    {% block header %}
    {% endblock %}
    <title>{% trans &#8216;Simple Blog&#8217;%}</title>
</head>
<body class="customize-support">
中间省略&#8230;
<script class="javascript" src="{% static 'syntaxhighlighter/scripts/shBrushJScript.js' %}"></script>
<script class="javascript" src="{% static 'syntaxhighlighter/scripts/shBrushBash.js' %}"></script>
<script class="javascript" src="{% static 'syntaxhighlighter/scripts/shBrushPhp.js' %}"></script>
<script class="javascript" src="{% static 'syntaxhighlighter/scripts/shBrushJava.js' %}"></script>
<script class="javascript" src="{% static 'syntaxhighlighter/scripts/shBrushSql.js' %}"></script>
<script class="javascript" src="{% static 'syntaxhighlighter/scripts/shBrushXml.js' %}"></script>
<script class="javascript" src="{% static 'syntaxhighlighter/scripts/shBrushPython.js' %}"></script>
<script class="javascript" src="{% static 'syntaxhighlighter/scripts/shBrushCss.js' %}"></script>
<script class="javascript" src="{% static 'syntaxhighlighter/scripts/shBrushCpp.js' %}"></script>
</body>
</html>
<p>&#8220;`
</p>

<p>由于我们之前已经安装过了TinyMCE，这个跟它结合起来就非常好用了，因为TinyMCE自带有选择代码语言功能。</p>

<p>下面是我创建文章时，插入了一段python代码的示例：</p>

<p><img src="http://yidaospace.qiniudn.com/dj102.png" alt="" /></p>

<p>这个是保存后的效果：</p>

<p><img src="http://yidaospace.qiniudn.com/dj103.png" alt="" /></p>

<h2 id="section-1">最后一件事</h2>
<p>别忘了部署到Heroku上面和别人分享你的成果。</p>

<p>OK，到此为止，前台的各种功能已经差不多了，你能一直坚持学到这里很不错了，为你自己鼓掌吧。</p>

<p>后面还有一个重头戏，就是django的后台管理，我选择了更美观更好用的xamdin，敬请期待…</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django1.7开发博客（10）- 全文搜索]]></title>
    <link href="http://yidao620c.github.io/blog/20150421/simpleblog-10.html"/>
    <updated>2015-04-21T15:47:28+08:00</updated>
    <id>http://yidao620c.github.io/blog/20150421/simpleblog-10</id>
    <content type="html"><![CDATA[<h3 id="wiki">Wiki：</h3>
<p>Django本身不提供全文检索的功能，但django-haystack为其提供了全文检索的框架。
django-haystack能为Django提供whoosh,solr,Xapian和Elasticsearc四种全文检索引擎作为后端。
其中whoosh为纯python的实现，不是非常大型的应用，是没有问题的。
本文将介绍Django1.7中通过django-haystack与whoosh集成以及whoosh的中文支持。</p>

<h3 id="section">安装依赖：</h3>
<p><code>
pip install django-haystack
pip install whoosh
pip install jieba
</code></p>

<h3 id="section-1">建立模型</h3>
<p>我们以文章为搜索目标，现在我的app名字为blog，
模型文件是mysite/blog/models.py ：<!--more--></p>

<p>&#8220;` python
# coding=utf-8
from django.db import models
@python_2_unicode_compatible
class Post(models.Model):
    class Meta:
        verbose_name = u’文章’
        verbose_name_plural = u’文章’
    # 作者
    author = models.ForeignKey(User)
    # 标题
    title = models.CharField(max_length=200)
    # 正文
    text = models.TextField()
    # 标签
    tags = models.ManyToManyField(Tag)
    # 分类目录
    category = models.ForeignKey(Category)
    # 点击量
    click = models.IntegerField(default=0)
    # 创建时间
    created_date = models.DateTimeField(default=timezone.now)
    # 发布时间
    published_date = models.DateTimeField(blank=True, null=True)</p>

<pre><code>def publish(self):
    self.published_date = timezone.now()
    self.save()

def __str__(self):
    return self.title ```
</code></pre>

<h3 id="searchindexespy">1. search_indexes.py</h3>
<p>在app目录下建立一个search_indexes.py（mysite/blog/search_indexes.py）代码如下：</p>

<p>&#8220;` python
#!/usr/bin/env python
# -<em>- encoding: utf-8 -</em>-
from models import Post
from haystack import indexes
class PostIndex(indexes.SearchIndex, indexes.Indexable):
    text = indexes.CharField(document=True, use_template=True)
    # 对title字段进行索引
    title = indexes.CharField(model_attr=’title’)
    def get_model(self):
        return Post</p>

<pre><code>def index_queryset(self, using=None):
    return self.get_model().objects.all() ```
</code></pre>

<p><em>备注</em>：search_indexes.py文件名不能修改，否则报错：<code>No fields were found in any search_indexes.</code></p>

<h3 id="posttexttxt">2. post_text.txt</h3>
<p>因为在search_indexes.py使用了use_template=True，所以可以同时使用模板对索引字段进行定义。</p>

<p>如：<code>mysite/blog/templates/search/indexes/blog/post_text.txt</code>:</p>

<p><code>


</code></p>

<h3 id="settingspy">3. settings.py</h3>

<p><code>python
# Application definition
INSTALLED_APPS = (
    ...
    'haystack',
)
</code></p>

<h3 id="urlspy">4. urls.py</h3>

<p><code>python
urlpatterns = patterns(
    '',
    url(r'^admin/', include(admin.site.urls)),
    url(r'^xadmin/', include(xadmin.site.urls), name='xadmin'),
    url(r'^accounts/login/$', 'django.contrib.auth.views.login'),
    url(r'^accounts/logout/$', 'django.contrib.auth.views.logout', {'next_page': '/'}),
    url(r'^search/', include('haystack.urls')),
    url(r'', include('blog.urls')),
)
</code></p>

<h3 id="jieba">5. jieba中文分词</h3>
<p>jieba其实已经提供了集成whoosh的ChineseAnalyzer，
也就是说不需要自己写ChineseAnalyzer了，直接在whoosh_backend.py中直接引用就好；
同时，不推荐将whoosh_backend.py放到Lib下面，这样移植性会有问题，自己的代码，还是放在项目下面为妙。</p>

<p>1. 将文件whoosh_backend.py拷贝到app下面，并重命名为whoosh_cn_backend.py，
如blog/whoosh_cn_backend.py。重点的改造有：</p>

<ul>
  <li>增加：
<code>python
from jieba.analyse import ChineseAnalyzer
</code></li>
  <li>修改
<code>python
schema_fields[field_class.index_fieldname] = TEXT(stored=True, analyzer=ChineseAnalyzer(),
 field_boost=field_class.boost, sortable=True)
</code>
2. 修改后端引擎，setting.py配置：</li>
</ul>

<p><code>python
# full text search
HAYSTACK_CONNECTIONS = {
    'default': {
        'ENGINE': 'blog.whoosh_cn_backend.WhooshEngine',
        'PATH': os.path.join(BASE_DIR, 'whoosh_index'),
    },
}
</code>
### 6. 重建索引</p>

<p><code>python
python manage.py rebuild_index
</code>
### 7. 索引更新
最简单的办法就是在settings.py中添加：
<code>python
HAYSTACK_SIGNAL_PROCESSOR = 'haystack.signals.RealtimeSignalProcessor'
</code>
### 8. 自定义搜索示例
(1) 先定义view：</p>

<p><code>python
from haystack.forms import SearchForm
def full_search(request):
    """全局搜索"""
    keywords = request.GET['q']
    sform = SearchForm(request.GET)
    posts = sform.search()
    return render(request, 'blog/post_search_list.html',
                  {'posts': posts, 'list_header': '关键字 \'{}\' 搜索结果'.format(keywords)})
</code></p>

<p>(2) 然后在template页面中：
</p>

<p>&#8220;` html
<!-- searchbox START --></p>
<div id="searchbox">
    <form action="{% url 'blog.views.full_search' %}" method="get">
        <div class="content">
            <label>
                <input type="text" class="textfield searchtip" name="q" size="24" value="" />
            </label>
            <input type="submit" class="button" value="" />
        </div>
    </form>
</div>
<p>&#8220;`
</p>

<p>更详细内容请参考官方文档：<a href="http://django-haystack.readthedocs.org/en/latest/">http://django-haystack.readthedocs.org/en/latest/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django1.7开发博客（9）- 用户认证]]></title>
    <link href="http://yidao620c.github.io/blog/20150421/simpleblog-09.html"/>
    <updated>2015-04-21T14:47:47+08:00</updated>
    <id>http://yidao620c.github.io/blog/20150421/simpleblog-09</id>
    <content type="html"><![CDATA[<h2 id="section">安全问题</h2>
<p>你应该注意到了一点，当你去新建、修改和删除文章的时候并不需要登录，
这样的话任何浏览网站的用户都能随时修改和删除我的文章。这个可不是我想要的！</p>

<h2 id="section-1">编辑和删除的认证</h2>
<p>我们需要保护post_new, post_edit和post_publish这三个视图，只有登录用户才有权去执行。
django为我们提供了很好的帮助类，其实就是利用了python中的decorators技术。
django中认证的装饰器位于模块django.contrib.auth.decorators中，名称叫login_required。</p>

<p>编辑blog/views.py文件，在import部分添加如下的导入语句：
<code>python
from django.contrib.auth.decorators import login_required
</code></p>

<p>然后在post_new, post_edit和post_publish这三个函数上添加@login_required，
类似下面<!--more-->
<code>python
@login_required
def post_new(request):
    [...]
</code></p>

<p>好的，现在你再去访问下http://localhost:8000/post/new/，看看有啥变化。</p>

<p>注：如果你仍然能正常进入新建页面，那可能是你之前在admin界面登陆过。
那么你需要先退出，访问http://localhost:8000/admin/logout/可以退出，然后你再看下效果。</p>

<p>我刚刚添加的@login_required装饰器检测到你尚未登陆的时候会重定向到login页面，
但是我现在还没有定义login的模板页面，所以这时候会是404错误页面。</p>

<h2 id="section-2">用户登录</h2>
<p>django在用户认证方面做得很好了，我们只需要去使用它就行。</p>

<p>在mysite/urls.py文件中，添加下面一行
<code>python
url(r'^accounts/login/$', 'django.contrib.auth.views.login')
</code>
现在这个文件内容如下：
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">django.conf.urls</span> <span class="kn">import</span> <span class="n">patterns</span><span class="p">,</span> <span class="n">include</span><span class="p">,</span> <span class="n">url</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">from</span> <span class="nn">django.contrib</span> <span class="kn">import</span> <span class="n">admin</span>
</span><span class='line'><span class="n">admin</span><span class="o">.</span><span class="n">autodiscover</span><span class="p">()</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">urlpatterns</span> <span class="o">=</span> <span class="n">patterns</span><span class="p">(</span><span class="err">‘’</span><span class="p">,</span>
</span><span class='line'>    <span class="n">url</span><span class="p">(</span><span class="n">r</span><span class="err">’</span><span class="o">^</span><span class="n">admin</span><span class="o">/</span><span class="err">’</span><span class="p">,</span> <span class="n">include</span><span class="p">(</span><span class="n">admin</span><span class="o">.</span><span class="n">site</span><span class="o">.</span><span class="n">urls</span><span class="p">)),</span>
</span><span class='line'>    <span class="n">url</span><span class="p">(</span><span class="n">r</span><span class="err">’</span><span class="o">^</span><span class="n">accounts</span><span class="o">/</span><span class="n">login</span><span class="o">/</span><span class="err">$’</span><span class="p">,</span> <span class="err">‘</span><span class="n">django</span><span class="o">.</span><span class="n">contrib</span><span class="o">.</span><span class="n">auth</span><span class="o">.</span><span class="n">views</span><span class="o">.</span><span class="n">login</span><span class="err">’</span><span class="p">),</span>
</span><span class='line'>    <span class="n">url</span><span class="p">(</span><span class="n">r</span><span class="err">’’</span><span class="p">,</span> <span class="n">include</span><span class="p">(</span><span class="err">‘</span><span class="n">blog</span><span class="o">.</span><span class="n">urls</span><span class="err">’</span><span class="p">)),</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>然后我们再定义一个登陆页面，创建目录mysite/templates/registration，
并在里面新建模板文件login.html，内容如下：</p>

<p></p>

<p>&#8220;` html
{% extends “mysite/base.html” %}</p>

<p>{% block content %}</p>

<pre><code>{% if form.errors %}
&lt;p&gt;Your username and password didn't match. Please try again.&lt;/p&gt;
{% endif %}

&lt;form method="post" action="{% url 'django.contrib.auth.views.login' %}"&gt;
{% csrf_token %}
&lt;table&gt;
&lt;tr&gt;
    &lt;td&gt;{{ form.username.label_tag }}&lt;/td&gt;
    &lt;td&gt;{{ form.username }}&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;{{ form.password.label_tag }}&lt;/td&gt;
    &lt;td&gt;{{ form.password }}&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;input type="submit" value="login" /&gt;
&lt;input type="hidden" name="next" value="{{ next }}" /&gt;
&lt;/form&gt; {% endblock %} ``` 
</code></pre>

<p>你可以看到我们仍然使用到了模板继承。这个时候可以定义一个mysite/templates/mysite/base.html，
把blog/templates/blog/base.html的内容复制给它即可。</p>

<p>不过我们需要在mysite/settings.py中再添加一个urls配置：
<code>python
LOGIN_REDIRECT_URL = '/'
</code>
这样的话当用户直接访问login页面后登录成功会重定向到文章列表页面去。</p>

<h2 id="section-3">改进显示</h2>
<p>现在的确只有登录用户才能修改和删除文章，但是未登录用户却能看到这些按钮，
这个是很不好的体验。现在如果是未登录用户的话就把这些按钮给隐藏掉。</p>

<p>因此我们修改mysite/templates/mysite/base.html如下：
</p>

<p>&#8220;` html</p>
<body>
    <div class="page-header">
        {% if user.is_authenticated %}
        <a href="{% url 'post_new' %}" class="top-menu"><span class="glyphicon glyphicon-plus"></span></a>
        <a href="{% url 'post_draft_list' %}" class="top-menu"><span class="glyphicon glyphicon-edit"></span></a>
        {% else %}
        <a href="{% url 'django.contrib.auth.views.login' %}" class="top-menu"><span class="glyphicon glyphicon-lock"></span></a>
        {% endif %}
        <h1><a href="{% url 'blog.views.post_list' %}">Django Girls</a></h1>
    </div>
    <div class="content">
        <div class="row">
            <div class="col-md-8">
            {% block content %}
            {% endblock %}
            </div>
        </div>
    </div>
</body>
<p>&#8220;`
</p>

<p>然后修改blog/templates/blog/post_detail.html如下：
</p>

<p>&#8220;` html
{% extends ‘blog/base.html’ %}</p>

<p>{% block content %}
    &lt;div class=&#8221;date&#8221;&gt;
        {% if post.published_date %}
            {{ post.published_date }}
        {% else %}
            {% if user.is_authenticated %}
                <a class="btn btn-default" href="{% url 'blog.views.post_publish' pk=post.pk %}">Publish</a>
            {% endif %}
        {% endif %}
        {% if user.is_authenticated %}
            <a class="btn btn-default" href="{% url 'post_edit' pk=post.pk %}"><span class="glyphicon glyphicon-pencil"></span></a>
            <a class="btn btn-default" href="{% url 'post_remove' pk=post.pk %}"><span class="glyphicon glyphicon-remove"></span></a>
        {% endif %}
    &lt;/div&gt;
    &lt;h1&gt;{{ post.title }}&lt;/h1&gt;
    &lt;p&gt;{{ post.text|linebreaks }}&lt;/p&gt;
{% endblock %}
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="p">{</span><span class="o">%</span> <span class="n">endraw</span> <span class="o">%</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h2</span> <span class="nb">id</span><span class="o">=</span><span class="s">&quot;section-4&quot;</span><span class="o">&gt;</span><span class="err">用户注销</span><span class="o">&lt;/</span><span class="n">h2</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">当用户登录后显示欢迎语句，</span><span class="n">Hello</span> <span class="err">，然后后面跟一个</span><span class="n">logout</span><span class="err">链接。还是依靠</span><span class="n">django</span><span class="err">帮我们处理</span><span class="n">logout</span><span class="err">动作。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">修改</span><span class="n">mysite</span><span class="o">/</span><span class="n">templates</span><span class="o">/</span><span class="n">mysite</span><span class="o">/</span><span class="n">base</span><span class="o">.</span><span class="n">html</span><span class="err">文件如下：</span>
</span><span class='line'><span class="p">{</span><span class="o">%</span> <span class="n">raw</span> <span class="o">%</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="sb">``</span><span class="err">`</span> <span class="n">html</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">div</span> <span class="n">class</span><span class="o">=</span><span class="s">&quot;page-header&quot;</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="p">{</span><span class="o">%</span> <span class="k">if</span> <span class="n">user</span><span class="o">.</span><span class="n">is_authenticated</span> <span class="o">%</span><span class="p">}</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;{</span><span class="si">% u</span><span class="s">rl &#39;post_new&#39; %}&quot;</span> <span class="n">class</span><span class="o">=</span><span class="s">&quot;top-menu&quot;</span><span class="o">&gt;&lt;</span><span class="n">span</span> <span class="n">class</span><span class="o">=</span><span class="s">&quot;glyphicon glyphicon-plus&quot;</span><span class="o">&gt;&lt;/</span><span class="n">span</span><span class="o">&gt;&lt;/</span><span class="n">a</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;{</span><span class="si">% u</span><span class="s">rl &#39;post_draft_list&#39; %}&quot;</span> <span class="n">class</span><span class="o">=</span><span class="s">&quot;top-menu&quot;</span><span class="o">&gt;&lt;</span><span class="n">span</span> <span class="n">class</span><span class="o">=</span><span class="s">&quot;glyphicon glyphicon-edit&quot;</span><span class="o">&gt;&lt;/</span><span class="n">span</span><span class="o">&gt;&lt;/</span><span class="n">a</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">p</span> <span class="n">class</span><span class="o">=</span><span class="s">&quot;top-menu&quot;</span><span class="o">&gt;</span><span class="n">Hello</span> <span class="p">{{</span> <span class="n">user</span><span class="o">.</span><span class="n">username</span> <span class="p">}}</span><span class="o">&lt;</span><span class="n">small</span><span class="o">&gt;&amp;</span><span class="n">nbsp</span><span class="p">;</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;{</span><span class="si">% u</span><span class="s">rl &#39;django.contrib.auth.views.logout&#39; %}&quot;</span><span class="o">&gt;</span><span class="n">Log</span> <span class="n">out</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="p">{</span><span class="o">%</span> <span class="k">else</span> <span class="o">%</span><span class="p">}</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;{</span><span class="si">% u</span><span class="s">rl &#39;django.contrib.auth.views.login&#39; %}&quot;</span> <span class="n">class</span><span class="o">=</span><span class="s">&quot;top-menu&quot;</span><span class="o">&gt;&lt;</span><span class="n">span</span> <span class="n">class</span><span class="o">=</span><span class="s">&quot;glyphicon glyphicon-lock&quot;</span><span class="o">&gt;&lt;/</span><span class="n">span</span><span class="o">&gt;&lt;/</span><span class="n">a</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="p">{</span><span class="o">%</span> <span class="n">endif</span> <span class="o">%</span><span class="p">}</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;{</span><span class="si">% u</span><span class="s">rl &#39;blog.views.post_list&#39; %}&quot;</span><span class="o">&gt;</span><span class="n">Django</span> <span class="n">Girls</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


很显然这时候logout肯定会报错。我们还得做些事情。

对于这方面的详细文档请参考：&lt;https://docs.djangoproject.com/en/1.7/topics/auth/default/&gt;

打开mysite/urls.py文件，添加一个logout配置：
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">django.conf.urls</span> <span class="kn">import</span> <span class="n">patterns</span><span class="p">,</span> <span class="n">include</span><span class="p">,</span> <span class="n">url</span>
</span><span class='line'>
</span><span class='line'><span class="kn">from</span> <span class="nn">django.contrib</span> <span class="kn">import</span> <span class="n">admin</span>
</span><span class='line'><span class="n">admin</span><span class="o">.</span><span class="n">autodiscover</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">urlpatterns</span> <span class="o">=</span> <span class="n">patterns</span><span class="p">(</span><span class="s">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">url</span><span class="p">(</span><span class="s">r&#39;^admin/&#39;</span><span class="p">,</span> <span class="n">include</span><span class="p">(</span><span class="n">admin</span><span class="o">.</span><span class="n">site</span><span class="o">.</span><span class="n">urls</span><span class="p">)),</span>
</span><span class='line'>    <span class="n">url</span><span class="p">(</span><span class="s">r&#39;^accounts/login/$&#39;</span><span class="p">,</span> <span class="s">&#39;django.contrib.auth.views.login&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="n">url</span><span class="p">(</span><span class="s">r&#39;^accounts/logout/$&#39;</span><span class="p">,</span> <span class="s">&#39;django.contrib.auth.views.logout&#39;</span><span class="p">,</span> <span class="p">{</span><span class="s">&#39;next_page&#39;</span><span class="p">:</span> <span class="s">&#39;/&#39;</span><span class="p">}),</span>
</span><span class='line'>    <span class="n">url</span><span class="p">(</span><span class="s">r&#39;&#39;</span><span class="p">,</span> <span class="n">include</span><span class="p">(</span><span class="s">&#39;blog.urls&#39;</span><span class="p">)),</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>
如果访问网站时出现模板找不到错误，那么你就在mysite/settings.py中添加如下配置：
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># TEMPLATE_DIRS</span>
</span><span class='line'><span class="n">TEMPLATE_DIRS</span> <span class="o">=</span> <span class="p">(</span>
</span><span class='line'>    <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">BASE_DIR</span><span class="p">,</span> <span class="s">&#39;mysite/templates&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">BASE_DIR</span><span class="p">,</span> <span class="s">&#39;blog/templates&#39;</span><span class="p">),</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

好的，现在你已经可以达成如下的效果了：

1. 需要一个用户名和密码登录系统
1. 在添加/编辑/删除/发布文章的时候需要登录
1. 也能注销

这么说的话，这个博客系统算功能比较完善了！朋友，祝福你。
</small></p></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django1.7开发博客（8）- 继续完善]]></title>
    <link href="http://yidao620c.github.io/blog/20150421/simpleblog-08.html"/>
    <updated>2015-04-21T14:24:11+08:00</updated>
    <id>http://yidao620c.github.io/blog/20150421/simpleblog-08</id>
    <content type="html"><![CDATA[<p>到现在为止我们已经完成的差不多了，并且基本的东西都已经学到了，是时候用起来了。
我们的博客还有很多功能需要完善，下面抛砖引玉新增几个功能，还有其他功能等你自己去发现和实现。</p>

<h2 id="section">草稿箱</h2>
<p>之前我们新建文章的时候只是是保存到数据库，也就是仅仅保存了草稿，还没有对外发布，
在博客首页上面是看不到的，因为published_date字段为空。这里我们需要添加一个草稿箱的链接。还是四部曲。</p>

<p>第一步，添加一个链接：</p>

<p>打开mysite/templates/mysite/base.html文件，在</p>

<p>&#8220;` html</p>
<h1><a href="http://yidao620c.github.io/">Django Girls Blog</a></h1>
<p>&#8220;`
的上面一行添加如下链接：<!--more-->
</p>

<p><code>html
&lt;a href="{% url 'post_draft_list' %}" class="top-menu"&gt;
&lt;span class="glyphicon glyphicon-edit"&gt;&lt;/span&gt;&lt;/a&gt;
</code>
</p>

<p>第二步就是配置urls，在blog/urls.py中添加：
<code>python
url(r'^drafts/$', views.post_draft_list, name='post_draft_list'),
</code></p>

<p>第三步在blog/views.py中添加一个view：
<code>python
def post_draft_list(request):
    posts = Post.objects.filter(published_date__isnull=True).order_by('-created_date')
    return render(request, 'blog/post_draft_list.html', {'posts': posts})
</code></p>

<p>第四步添加一个template，新建blog/templates/blog/post_draft_list.html，内容如下：
</p>

<p><code>html
{% extends 'blog/base.html' %}
{% block content %}
    {% for post in posts %}
        &lt;div class="post"&gt;
            &lt;p class="date"&gt;created: {{ post.created_date|date:'d-m-Y' }}&lt;/p&gt;
            &lt;h1&gt;&lt;a href="{% url 'blog.views.post_detail' pk=post.pk %}"&gt;{{ post.title }}&lt;/a&gt;&lt;/h1&gt;
            &lt;p&gt;{{ post.text|truncatechars:200 }}&lt;/p&gt;
        &lt;/div&gt;
    {% endfor %}
{% endblock %}
</code>
</p>

<p>这个模板跟我们的post_list.html非常相似。</p>

<p>刷新首页，点击那个草稿箱链接，看看效果。</p>

<p><img src="http://yidaospace.qiniudn.com/dj024.jpg" alt="" /></p>

<h2 id="section-1">发布功能</h2>
<p>在文章详情页面添加一个发布的按钮，如果觉得合适的时候就能发布文章了。
每个新功能都是四部曲，你照着这四步做就行，你会发现越来越简单。</p>

<p>第一步在页面上添加一个链接或Form表单，这里我们添加一个链接。</p>

<p>打开blog/template/blog/post_detail.html，将下面这段
</p>

<p><code>
{% if post.published_date %}
    {{ post.published_date }}
{% endif %}
</code>
</p>

<p>换成下面这段：
</p>

<p><code>html
{% if post.published_date %}
    {{ post.published_date }}
{% else %}
    &lt;a class="btn btn-default" href="{% url 'blog.views.post_publish' pk=post.pk %}"&gt;Publish&lt;/a&gt;
{% endif %}
</code>

这里增加了一个else语句，意思是如果没有发布日期的话就增加一个发布按钮。</p>

<p>第二步添加urls配置，打开blog/urls.py：
<code>python
url(r'^post/(?P&lt;pk&gt;[0-9]+)/publish/$', views.post_publish, name='post_publish'),
</code>
第三步视图，打开blog/views.py：
<code>python
def post_publish(request, pk):
    post = get_object_or_404(Post, pk=pk)
    post.publish()
    return redirect('blog.views.post_detail', pk=pk)
</code>
第四步模板，由于这次没有引入新的模板，所以这步省略。</p>

<p>刷新后看效果：</p>

<p><img src="http://yidaospace.qiniudn.com/dj025.jpg" alt="" /></p>

<p>发布之后的效果：</p>

<p><img src="http://yidaospace.qiniudn.com/dj026.jpg" alt="" /></p>

<p>注意观察发布前和发布后文章的发布日期那个位置的变化。并且发布后再去首页看看，文章已经可以正常显示了。</p>

<h2 id="section-2">删除功能</h2>
<p>最后当然需要一个删除功能了，还是四部曲！</p>

<p>第一步是在页面上添加链接，打开blog/templates/blog/post_detail.html，在编辑按钮下面一行添加如下：
</p>

<p><code>html
&lt;a class="btn btn-default" href="{% url 'post_remove' pk=post.pk %}"&gt;
&lt;span class="glyphicon glyphicon-remove"&gt;&lt;/span&gt;&lt;/a&gt;
</code>

第二步配置urls映射，打开blog/urls.py，添加如下一行：
<code>python
url(r'^post/(?P&lt;pk&gt;[0-9]+)/remove/$', views.post_remove, name='post_remove'),
</code>
第三步添加视图view，打开blog/views.py，添加一个视图函数：
<code>python
def post_remove(request, pk):
    post = get_object_or_404(Post, pk=pk)
    post.delete()
    return redirect('blog.views.post_list')
</code>
第四步模板，由于这次又没有新的模板，所有这步省略。</p>

<p>OK，刷新页面看效果：</p>

<p><img src="http://yidaospace.qiniudn.com/dj027.jpg" alt="" /></p>

<p>删除后再去首页看，已经没有这篇文章了。</p>

<h2 id="section-3">分页功能</h2>
<p>在首页显示文章列表时候需要分页显示，这时候可以使用django的一个插件叫pagination</p>

<p>设置非常简单，简直是简单到变态。</p>

<p>settings.py文件中</p>

<ol>
  <li>INSTALLED_APPS增加’pagination’项
<code>python
# Application definition
INSTALLED_APPS = (
 'django.contrib.admin',
 'django.contrib.auth',
 'django.contrib.contenttypes',
 'django.contrib.sessions',
 'django.contrib.messages',
 'django.contrib.staticfiles',
 'blog',
 'pagination',
)
</code></li>
  <li>MIDDLEWARE_CLASSES增加’pagination.middleware.PaginationMiddleware’
<code>python
MIDDLEWARE_CLASSES = (
 'django.contrib.sessions.middleware.SessionMiddleware',
 'django.middleware.common.CommonMiddleware',
 'django.middleware.csrf.CsrfViewMiddleware',
 'django.contrib.auth.middleware.AuthenticationMiddleware',
 'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
 'django.contrib.messages.middleware.MessageMiddleware',
 'django.middleware.clickjacking.XFrameOptionsMiddleware',
 'pagination.middleware.PaginationMiddleware',
)
</code></li>
  <li>TEMPLATE_CONTEXT_PROCESSORS增加’django.core.context_processors.request’
<code>python
TEMPLATE_CONTEXT_PROCESSORS = (
 "django.contrib.auth.context_processors.auth",
 "django.core.context_processors.debug",
 "django.core.context_processors.i18n",
 "django.core.context_processors.media",
 "django.core.context_processors.static",
 "django.core.context_processors.tz",
 "django.contrib.messages.context_processors.messages",
 "blog.commons.context_processors.custom_proc",
 "django.core.context_processors.request",
)
</code></li>
  <li>requirements.txt中增加依赖：
<code>
django-pagination-py3==1.1.1
</code></li>
  <li>修改post_list.html页面，增加autopaginate标签
</li>
</ol>

<p><code>
{% extends 'mysite/base.html' %}
{% load blog_tags %}
{% load pagination_tags %}
{% block content %}
    {% if list_header %}
        &lt;div class="box"&gt;{{ list_header }}&lt;/div&gt;
    {% endif %}
    {% autopaginate posts 10 %}
    {% for post in posts %}
        &lt;div class="post"&gt;
            &lt;h2&gt;&lt;a href="{% url 'blog.views.post_detail' pk=post.pk %}"&gt;{{ post.title }}&lt;/a&gt;&lt;/h2&gt;
            &lt;div class="info"&gt;
                &lt;span class="date"&gt;{{ post.published_date|date:'Y年m月d日' }}&lt;/span&gt;
                &lt;span class="comments"&gt;
                    {% if post.num_comment &gt; 0 %}
                        {{ post.num_comment }} 条评论
                    {% else %}
                        没有评论
                    {% endif %}
                &lt;/span&gt;
                &lt;span class="comments"&gt;
                    {{ post.click }} 人阅读&amp;nbsp;&amp;nbsp;
                &lt;/span&gt;
                &lt;div class="fixed"&gt;&lt;/div&gt;
            &lt;/div&gt;
            &lt;div class="content"&gt;
                &lt;p&gt;
                    {% autoescape off %}
                        {{ post.text|more:post.id }}
                    {% endautoescape %}
                &lt;/p&gt;
            &lt;/div&gt;
            &lt;div class="under"&gt;
                &lt;span class="categories"&gt;分类: &lt;/span&gt;
                &lt;span&gt;
                    &lt;a href="{% url 'blog.views.post_list_by_category' cg=post.category.name %}"
                       rel="category tag"&gt;{{ post.category.name }}
                    &lt;/a&gt;
                &lt;/span&gt;
                &lt;span class="tags"&gt;标签: &lt;/span&gt;
                &lt;span&gt;
                    {% for tg in post.tags.all %}
                        &lt;a href="{% url 'blog.views.post_list_by_tag' tag=tg.name %}"
                           rel="tag"&gt;{{ tg.name }}&lt;/a&gt;&amp;nbsp;
                    {% endfor %}
                &lt;/span&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    {% endfor %}
    {% paginate %}
{% endblock %}
</code>
</p>

<p>刷新下列表首页，看看分页效果。</p>

<p>恭喜你，你可以大声对自己喊：我太棒了。^_^</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django1.7开发博客（7）- 实现功能]]></title>
    <link href="http://yidao620c.github.io/blog/20150421/simpleblog-07.html"/>
    <updated>2015-04-21T14:02:56+08:00</updated>
    <id>http://yidao620c.github.io/blog/20150421/simpleblog-07</id>
    <content type="html"><![CDATA[<p>到目前为止我们已经完成了一个django应用的所有基础部分。
包括url配置、视图、模型和模板。接下来开始继续完善我们的博客系统了。</p>

<p>首先我们需要一个显示每篇文章的详细页面，对不？</p>

<h2 id="section">文章详情</h2>
<p>对于首页每一篇文章，我们希望点击标题后可以进入该文章的阅读页面。修改post_list.html中的标题href如下：
</p>

<p>&#8220;` html</p>
<h1><a href="{% url 'blog.views.post_detail' pk=post.pk %}">{{ post.title }}</a></h1>
<p>&#8220;`

我来详细解释下这个{% url ‘blog.views.post_detail’ pk=post.pk %}，{% %}
表示使用django模板标签而不是普通的HTML文字，这里我们使用了url标签来生成真正的url链接。
blog.views.post_detail是视图的全路径。<!--more--></p>

<h3 id="url">url配置</h3>
<p>我们希望文章详细页面的链接类似这样：http://127.0.0.1:8000/post/1/</p>

<p>修改blog/urls.py为下面的这样：
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">django.conf.urls</span> <span class="kn">import</span> <span class="n">patterns</span><span class="p">,</span> <span class="n">include</span><span class="p">,</span> <span class="n">url</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">.</span> <span class="kn">import</span> <span class="n">views</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">urlpatterns</span> <span class="o">=</span> <span class="n">patterns</span><span class="p">(</span><span class="err">‘’</span><span class="p">,</span>
</span><span class='line'>    <span class="n">url</span><span class="p">(</span><span class="n">r</span><span class="err">’</span><span class="o">^</span><span class="err">$’</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">post_list</span><span class="p">),</span>
</span><span class='line'>    <span class="n">url</span><span class="p">(</span><span class="n">r</span><span class="err">’</span><span class="o">^</span><span class="n">post</span><span class="o">/</span><span class="p">(</span><span class="err">?</span><span class="n">P</span><span class="o">&lt;</span><span class="n">pk</span><span class="o">&gt;</span><span class="p">[</span><span class="mi">0</span><span class="o">-</span><span class="mi">9</span><span class="p">]</span><span class="o">+</span><span class="p">)</span><span class="o">/</span><span class="err">$</span><span class="s">&#39;, views.post_detail),</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></pk></p>

<p>这个看起来有点复杂，我们来解释下：</p>

<ol>
  <li>^ 代表的是开始</li>
  <li>post/表示URL开始必须是post/</li>
  <li>(?P[0-9]+) – 这部分比较复杂。它表示一个命名参数pk，
它会捕获url中的这部分然后将它赋值给pk参数传递给视图。
[0-9]表示这部分必须是数字，+表示至少1个数字，也可以多个数字。</li>
  <li>/ – 然后后面接/</li>
  <li>$ – URL的结尾</li>
</ol>

<h3 id="postdetail">post_detail视图</h3>
<p>现在去访问还会报错，因为我们还没有post_detail这个视图。现在我们开始定义它。</p>

<p>修改文件blog/views.py如下：
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">django.shortcuts</span> <span class="kn">import</span> <span class="n">render</span><span class="p">,</span> <span class="n">get_object_or_404</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">post_detail</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="n">pk</span><span class="p">):</span>
</span><span class='line'>    <span class="n">post</span> <span class="o">=</span> <span class="n">get_object_or_404</span><span class="p">(</span><span class="n">Post</span><span class="p">,</span> <span class="n">pk</span><span class="o">=</span><span class="n">pk</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="err">‘</span><span class="n">blog</span><span class="o">/</span><span class="n">post_detail</span><span class="o">.</span><span class="n">html</span><span class="err">’</span><span class="p">,</span> <span class="p">{</span><span class="err">‘</span><span class="n">post</span><span class="err">’</span><span class="p">:</span> <span class="n">post</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3 id="postdetail-1">post_detail模板</h3>
<p>然后再增加模板blog/templates/blog/post_detail.html：
</p>

<p>&#8220;` html
{% extends ‘blog/base.html’ %}</p>

<p>{% block content %}
    &lt;div class=&#8221;date&#8221;&gt;
        {% if post.published_date %}
            {{ post.published_date }}
        {% endif %}
    &lt;/div&gt;
    &lt;h1&gt;{{ post.title }}&lt;/h1&gt;
    &lt;p&gt;{{ post.text|linebreaks }}&lt;/p&gt;
{% endblock %}
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="p">{</span><span class="o">%</span> <span class="n">endraw</span> <span class="o">%</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">这次我们还是采用模板继承方式，这里我们还用到了模板标签</span><span class="k">if</span><span class="err">，这是一个条件判断的标签。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">OK</span><span class="err">，一切都已准备就绪，现在打开首页，然后点击任意一篇文章标题看下结果：</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;&lt;</span><span class="n">img</span> <span class="n">src</span><span class="o">=</span><span class="s">&quot;http://yidaospace.qiniudn.com/dj017.jpg&quot;</span> <span class="n">alt</span><span class="o">=</span><span class="s">&quot;&quot;</span> <span class="o">/&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">搞定！！</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h2</span> <span class="nb">id</span><span class="o">=</span><span class="s">&quot;section-1&quot;</span><span class="o">&gt;</span><span class="err">创建文章</span><span class="o">&lt;/</span><span class="n">h2</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">最后一件事就是要实现文章创建和更新操作，这是博客系统最核心的功能。</span><span class="n">django</span><span class="err">自带的</span><span class="n">admin</span><span class="err">很酷，但是确很难定制和美化。</span>
</span><span class='line'><span class="n">forms</span><span class="err">非常强大和自由，我们可以好好的利用它来实现我们需要的功能。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">forms</span><span class="err">一个很好的特性就是它既能从头定义一个表单，也能创建一个</span><span class="n">ModelForm</span><span class="err">来将表单结果保存为一个模型。</span>
</span><span class='line'><span class="err">而这正是我们想要的功能，我们可以创建一个</span><span class="n">ModelForm</span><span class="err">来将表单转换为一个</span><span class="n">Post</span><span class="err">模型。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">表单对象的定义放在</span><span class="n">forms</span><span class="o">.</span><span class="n">py</span><span class="err">文件中。我们需要在</span><span class="n">blog</span><span class="err">文件夹中创建</span><span class="n">forms</span><span class="o">.</span><span class="n">py</span><span class="err">文件，结构如下：</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">blog</span>
</span><span class='line'>   <span class="err">└──</span> <span class="n">forms</span><span class="o">.</span><span class="n">py</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">在里面写入如下内容：</span>
</span></code></pre></td></tr></table></div></figure> python
from django import forms
from .models import Post</p>

<p>class PostForm(forms.ModelForm):</p>

<pre><code>class Meta:
    model = Post
    fields = ('title', 'text',) ``` PostForm需要继承自forms.ModelForm，这样django就能实现某些神奇的效果。 在里面我们定义了元类Meta，然后指定model为Post，还有字段为title和text。 因为我们只需要对外暴露标题和内容，至于作者就是登陆用户了，而发布日期和创建日期就是提交时间。
</code></pre>

<p>下面我们要做的就是在view中使用我们的form，并在template中显示它。</p>

<p>我们继续走四个步骤：页面上添加链接, 外加“三部曲”。基本上每个新功能的增加时只需要增加这四个东东就行了。</p>

<h3 id="section-2">增加链接</h3>
<p>打开blog/templates/blog/base.html，在名字为page-header的div中添加一个新增文章的链接：
{% raw %}</p>

<p><code>html
&lt;a href="{% url 'blog.views.post_new' %}" class="top-menu"&gt;&lt;span class="glyphicon glyphicon-plus"&gt;&lt;/span&gt;&lt;/a&gt;
</code>
</p>

<p>这时候你的base.html应该是这样的：
</p>

<p>&#8220;`
{% load staticfiles %}</p>
<html>
<head>
<link rel="stylesheet" href="//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css" />
<link rel="stylesheet" href="//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap-theme.min.css" />
<script src="//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/js/bootstrap.min.js"></script>
<link href="http://fonts.googleapis.com/css?family=Lobster&amp;subset=latin,latin-ext" rel="stylesheet" type="text/css" />
<link rel="stylesheet" href="{% static 'css/blog.css' %}" />
<title>Django Girls Blog</title>
</head>
<body>
    <div class="page-header">
        <a href="{% url 'blog.views.post_new' %}" class="top-menu"><span class="glyphicon glyphicon-plus"></span></a>
        <h1><a href="http://yidao620c.github.io/">Django Girls Blog</a></h1>
    </div>
    <div class="content">
        <div class="row">
            <div class="col-md-8">
                {% block content %}
                {% endblock %}
            </div>
        </div>
    </div>
</body>
</html>
<p>&#8220;`
</p>

<h3 id="url-1">URL</h3>
<p>打开blog/urls.py文件，添加一条配置：
<code>python
url(r'^post/new/$', views.post_new, name='post_new'),
</code>
现在它的内容应该是这样的：
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">django.conf.urls</span> <span class="kn">import</span> <span class="n">patterns</span><span class="p">,</span> <span class="n">include</span><span class="p">,</span> <span class="n">url</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">.</span> <span class="kn">import</span> <span class="n">views</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">urlpatterns</span> <span class="o">=</span> <span class="n">patterns</span><span class="p">(</span><span class="err">‘’</span><span class="p">,</span>
</span><span class='line'>    <span class="n">url</span><span class="p">(</span><span class="n">r</span><span class="err">’</span><span class="o">^</span><span class="err">$’</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">post_list</span><span class="p">),</span>
</span><span class='line'>    <span class="n">url</span><span class="p">(</span><span class="n">r</span><span class="err">’</span><span class="o">^</span><span class="n">post</span><span class="o">/</span><span class="p">(</span><span class="err">?</span><span class="n">P</span><span class="o">&lt;</span><span class="n">pk</span><span class="o">&gt;</span><span class="p">[</span><span class="mi">0</span><span class="o">-</span><span class="mi">9</span><span class="p">]</span><span class="o">+</span><span class="p">)</span><span class="o">/</span><span class="err">$</span><span class="s">&#39;, views.post_detail),</span>
</span><span class='line'>    <span class="n">url</span><span class="p">(</span><span class="s">r&#39;^post/new/$&#39;</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">post_new</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">&#39;post_new&#39;</span><span class="p">),</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></pk></p>

<h3 id="postnew">post_new视图</h3>
<p>打开文件blog/views.py，先引入PostForm
<code>python
from .forms import PostForm
</code>
然后增加视图：
<code>python
def post_new(request):
    form = PostForm()
    return render(request, 'blog/post_edit.html', {'form': form})
</code></p>

<h3 id="postedithtml">post_edit.html模板</h3>
<p>在blog/templates/blog目录新建一个post_edit.html页面，然后写入下列内容：
</p>

<p>&#8220;` html
{% extends ‘blog/base.html’ %}</p>

<p>{% block content %}
    &lt;h1&gt;New post&lt;/h1&gt;
    &lt;form method=&#8221;POST&#8221; class=&#8221;post-form&#8221;&gt;{% csrf_token %}
        {{ form.as_p }}
        <button type="submit" class="save btn btn-default">Save</button>
    &lt;/form&gt;
{% endblock %}
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="p">{</span><span class="o">%</span> <span class="n">endraw</span> <span class="o">%</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">保存后，刷新首页，点击加号那个链接可以看到如下页面：</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;&lt;</span><span class="n">img</span> <span class="n">src</span><span class="o">=</span><span class="s">&quot;http://yidaospace.qiniudn.com/dj018.jpg&quot;</span> <span class="n">alt</span><span class="o">=</span><span class="s">&quot;&quot;</span> <span class="o">/&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">但是当你写了文字后点击保存后会发现又跑到这个新建页面来了。</span>
</span><span class='line'><span class="err">因为这个是</span><span class="n">POST</span><span class="err">提交，但是</span><span class="n">URL</span><span class="err">还是一样的，又会跑到</span><span class="n">post_new</span><span class="err">那个视图中去，</span>
</span><span class='line'><span class="err">这个视图只做了页面跳转来到了这个新建页面。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">那么我们需要修改下</span><span class="n">post_new</span><span class="err">视图逻辑了：</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">在头部先引入下面的依赖：</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">python</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">django.core.urlresolvers</span> <span class="kn">import</span> <span class="n">reverse</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">django.shortcuts</span> <span class="kn">import</span> <span class="n">redirect</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">然后修改</span><span class="n">post_new</span><span class="err">视图如下：</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">python</span>
</span><span class='line'><span class="k">def</span> <span class="nf">post_new</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">request</span><span class="o">.</span><span class="n">method</span> <span class="o">==</span> <span class="s">&quot;POST&quot;</span><span class="p">:</span>
</span><span class='line'>        <span class="n">form</span> <span class="o">=</span> <span class="n">PostForm</span><span class="p">(</span><span class="n">request</span><span class="o">.</span><span class="n">POST</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">form</span><span class="o">.</span><span class="n">is_valid</span><span class="p">():</span>
</span><span class='line'>            <span class="n">post</span> <span class="o">=</span> <span class="n">form</span><span class="o">.</span><span class="n">save</span><span class="p">(</span><span class="n">commit</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</span><span class='line'>            <span class="n">post</span><span class="o">.</span><span class="n">author</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">user</span>
</span><span class='line'>            <span class="n">post</span><span class="o">.</span><span class="n">save</span><span class="p">()</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">redirect</span><span class="p">(</span><span class="s">&#39;blog.views.post_detail&#39;</span><span class="p">,</span> <span class="n">pk</span><span class="o">=</span><span class="n">post</span><span class="o">.</span><span class="n">pk</span><span class="p">)</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="n">form</span> <span class="o">=</span> <span class="n">PostForm</span><span class="p">()</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="s">&#39;blog/post_edit.html&#39;</span><span class="p">,</span> <span class="p">{</span><span class="s">&#39;form&#39;</span><span class="p">:</span> <span class="n">form</span><span class="p">})</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">上面表示我添加完一篇文章后自动跳转到文章详情页面去，保存后效果：</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;&lt;</span><span class="n">img</span> <span class="n">src</span><span class="o">=</span><span class="s">&quot;http://yidaospace.qiniudn.com/dj019.jpg&quot;</span> <span class="n">alt</span><span class="o">=</span><span class="s">&quot;&quot;</span> <span class="o">/&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h3</span> <span class="nb">id</span><span class="o">=</span><span class="s">&quot;section-3&quot;</span><span class="o">&gt;</span><span class="err">表单验证</span><span class="o">&lt;/</span><span class="n">h3</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">由于我们在</span><span class="n">Post</span><span class="err">模型中已经定义了</span><span class="n">title</span><span class="err">和</span><span class="n">text</span><span class="err">是必需的，</span><span class="n">django</span><span class="err">会自动帮我们做验证。</span>
</span><span class='line'><span class="err">看下如果我们不输入</span><span class="n">title</span><span class="err">和</span><span class="n">text</span><span class="err">直接提交会怎样：</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;&lt;</span><span class="n">img</span> <span class="n">src</span><span class="o">=</span><span class="s">&quot;http://yidaospace.qiniudn.com/dj020.jpg&quot;</span> <span class="n">alt</span><span class="o">=</span><span class="s">&quot;&quot;</span> <span class="o">/&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">django</span><span class="err">已经自动帮我们做了验证，是不是很酷呢？</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h2</span> <span class="nb">id</span><span class="o">=</span><span class="s">&quot;section-4&quot;</span><span class="o">&gt;</span><span class="err">编辑文章</span><span class="o">&lt;/</span><span class="n">h2</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">我们刚刚已经实现了新建文章的功能，那么如果是编辑修改文章呢。接下来我会快速的讲解这个流程，现在你应该是可以看得懂的了。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">首先打开</span><span class="n">blog</span><span class="o">/</span><span class="n">templates</span><span class="o">/</span><span class="n">blog</span><span class="o">/</span><span class="n">post_detail</span><span class="o">.</span><span class="n">html</span><span class="err">，添加一行：</span>
</span><span class='line'><span class="p">{</span><span class="o">%</span> <span class="n">raw</span> <span class="o">%</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">a</span> <span class="n">class</span><span class="o">=</span><span class="s">&quot;btn btn-default&quot;</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;{</span><span class="si">% u</span><span class="s">rl &#39;post_edit&#39; pk=post.pk %}&quot;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">span</span> <span class="n">class</span><span class="o">=</span><span class="s">&quot;glyphicon glyphicon-pencil&quot;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">/</span><span class="n">span</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">/</span><span class="n">a</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="p">{</span><span class="o">%</span> <span class="n">endraw</span> <span class="o">%</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">现在它的内容是这样的：</span>
</span><span class='line'><span class="p">{</span><span class="o">%</span> <span class="n">raw</span> <span class="o">%</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="sb">``</span><span class="err">`</span>
</span><span class='line'><span class="p">{</span><span class="o">%</span> <span class="n">extends</span> <span class="err">‘</span><span class="n">blog</span><span class="o">/</span><span class="n">base</span><span class="o">.</span><span class="n">html</span><span class="err">’</span> <span class="o">%</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">{</span><span class="o">%</span> <span class="n">block</span> <span class="n">content</span> <span class="o">%</span><span class="p">}</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">div</span> <span class="n">class</span><span class="o">=</span><span class="s">&quot;date&quot;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>    <span class="p">{</span><span class="o">%</span> <span class="k">if</span> <span class="n">post</span><span class="o">.</span><span class="n">published_date</span> <span class="o">%</span><span class="p">}</span>
</span><span class='line'>        <span class="p">{{</span> <span class="n">post</span><span class="o">.</span><span class="n">published_date</span> <span class="p">}}</span>
</span><span class='line'>    <span class="p">{</span><span class="o">%</span> <span class="n">endif</span> <span class="o">%</span><span class="p">}</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">a</span> <span class="n">class</span><span class="o">=</span><span class="s">&quot;btn btn-default&quot;</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;{</span><span class="si">% u</span><span class="s">rl &#39;post_edit&#39; pk=post.pk %}&quot;</span><span class="o">&gt;&lt;</span><span class="n">span</span> <span class="n">class</span><span class="o">=</span><span class="s">&quot;glyphicon glyphicon-pencil&quot;</span><span class="o">&gt;&lt;/</span><span class="n">span</span><span class="o">&gt;&lt;/</span><span class="n">a</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">/</span><span class="n">div</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">h1</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;{{</span> <span class="n">post</span><span class="o">.</span><span class="n">title</span> <span class="p">}}</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">/</span><span class="n">h1</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">p</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;{{</span> <span class="n">post</span><span class="o">.</span><span class="n">text</span><span class="o">|</span><span class="n">linebreaks</span> <span class="p">}}</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">/</span><span class="n">p</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'><span class="p">{</span><span class="o">%</span> <span class="n">endblock</span> <span class="o">%</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
</p>

<p>然后修改blog/urls.py文件，添加一条：
<code>python
url(r'^post/(?P&lt;pk&gt;[0-9]+)/edit/$', views.post_edit, name='post_edit'),
</code></p>

<p>我们会重用模板blog/templates/blog/post_edit.html，
因此只需要修改下view就可以了，打开文件blog/views.py，将下面的内容添加到最后：
<code>python
def post_edit(request, pk):
    post = get_object_or_404(Post, pk=pk)
    if request.method == "POST":
        form = PostForm(request.POST, instance=post)
        if form.is_valid():
            post = form.save(commit=False)
            post.author = request.user
            post.save()
            return redirect('blog.views.post_detail', pk=post.pk)
    else:
        form = PostForm(instance=post)
    return render(request, 'blog/post_edit.html', {'form': form})
</code></p>

<p>这个跟post_new几乎一模一样，先通过主键查到文章：<code>post = get_object_or_404(Post, pk=pk)</code>，
然后我们在提交和进入编辑页面的时候都将post作为instance参数传递给PostForm。</p>

<p>OK，现在让我们来测试下效果：</p>

<p><img src="http://yidaospace.qiniudn.com/dj021.jpg" alt="" /></p>

<p><img src="http://yidaospace.qiniudn.com/dj022.jpg" alt="" /></p>

<p><img src="http://yidaospace.qiniudn.com/dj023.jpg" alt="" /></p>

<p>完美，恭喜你！你的应用已经变得越来越酷了。</p>

<p>如果你想对django的表单有更深入的了解，
请查阅官方文档：<a href="https://docs.djangoproject.com/en/1.7/topics/forms/">https://docs.djangoproject.com/en/1.7/topics/forms/</a></p>

<h2 id="section-5">还有一件事</h2>
<p>发布到heroku上去。不要我每次提醒了吧，Enjoy it！</p>

]]></content>
  </entry>
  
</feed>
