<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类目录：sort | 笨跑的一刀]]></title>
  <link href="http://yidao620c.github.io/blog/categories/sort/atom.xml" rel="self"/>
  <link href="http://yidao620c.github.io/"/>
  <updated>2015-05-06T10:52:36+08:00</updated>
  <id>http://yidao620c.github.io/</id>
  <author>
    <name><![CDATA[熊能]]></name>
    <email><![CDATA[yidao620@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[归并排序中对小数组采用插入排序]]></title>
    <link href="http://yidao620c.github.io/blog/20150420/merge-sort.html"/>
    <updated>2015-04-20T10:47:35+08:00</updated>
    <id>http://yidao620c.github.io/blog/20150420/merge-sort</id>
    <content type="html"><![CDATA[<p>纯归并排序的复杂度为O(nlgn)，而纯插入排序的时间复杂度为O(n^2)。数据量很大的时候采用归并排序。</p>

<p>但是在n较小的时候插入排序可能运行的会更快点。因此在归并排序中当子问题变得足够小时，
采用插入排序来使得递归的叶子变粗可以加快排序速度。那么这个足够小到底怎么去衡量呢？ 请看下面：</p>

<p>这么几个我不证明了，比较简单：</p>

<ol>
  <li>插入排序最坏情况下可以在O(nk)时间内排序每个长度为k的n/k个子列表
*. 在最坏情况下可在O(nlg(n/k))的时间内合并这些子表
*. 修订后的算法的最坏情况运行时间复杂度是O(nk + nlg(n/k))</li>
</ol>

<p>那么，O(nk+nlg(n/k))=O(nlgn).只能最大是k=O(lgn).等式左边中第一项是高阶项。
k如果大于lgn,则比归并排序复杂度大了。
左边可以写成nk+nlgn-nlgk，k等于lgn时，就是2nlgn-nlglgn.忽略恒定系数，则与归并排序是一样的。
最后结论： k &lt; lg(n)的时候，使用插入排序。<!--more--></p>

<p>首先是插入排序的实现，这个比较简单：
<code>python
def insertSort(seq):
    for j in range(1, len(seq)):
        key = seq[j]
        # insert arrays[j] into the sorted seq[0...j-1]
        i = j - 1
        while i &gt;= 0 and seq[i] &gt; key:
            seq[i + 1] = seq[i]
            i -= 1
        seq[i + 1] = key
</code>
然后是利用了插入排序的归并排序算法：
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">math</span> <span class="kn">import</span> <span class="n">log</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">author</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span> <span class="o">=</span> <span class="err">‘</span><span class="n">Xiong</span> <span class="n">Neng</span><span class="err">’</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">mergeSort</span><span class="p">(</span><span class="n">seq</span><span class="p">):</span>
</span><span class='line'>    <span class="n">mergeSortRange</span><span class="p">(</span><span class="n">seq</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">seq</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">log</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">seq</span><span class="p">))</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">mergeOrderedSeq</span><span class="p">(</span><span class="n">seq</span><span class="p">,</span> <span class="n">left</span><span class="p">,</span> <span class="n">middle</span><span class="p">,</span> <span class="n">right</span><span class="p">):</span>
</span><span class='line'>    <span class="err">“””</span>
</span><span class='line'>    <span class="n">seq</span><span class="p">:</span> <span class="err">待排序序列</span>
</span><span class='line'>    <span class="n">left</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span> <span class="n">middle</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span> <span class="n">right</span>
</span><span class='line'>    <span class="err">子数组</span><span class="n">seq</span><span class="p">[</span><span class="n">left</span><span class="o">..</span><span class="n">middle</span><span class="p">]</span><span class="err">和</span><span class="n">seq</span><span class="p">[</span><span class="n">middle</span><span class="o">+</span><span class="mf">1.</span><span class="o">.</span><span class="n">right</span><span class="p">]</span><span class="err">都是排好序的</span>
</span><span class='line'>    <span class="err">该排序的时间复杂度为</span><span class="n">O</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'>    <span class="err">“””</span>
</span><span class='line'>    <span class="n">tempSeq</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>    <span class="n">i</span> <span class="o">=</span> <span class="n">left</span>
</span><span class='line'>    <span class="n">j</span> <span class="o">=</span> <span class="n">middle</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">while</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span> <span class="n">middle</span> <span class="ow">and</span> <span class="n">j</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span> <span class="n">right</span><span class="p">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">seq</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span> <span class="n">seq</span><span class="p">[</span><span class="n">j</span><span class="p">]:</span>
</span><span class='line'>            <span class="n">tempSeq</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">seq</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span><span class='line'>            <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="n">tempSeq</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">seq</span><span class="p">[</span><span class="n">j</span><span class="p">])</span>
</span><span class='line'>            <span class="n">j</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span> <span class="n">middle</span><span class="p">:</span>
</span><span class='line'>        <span class="n">tempSeq</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="n">seq</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">middle</span> <span class="o">+</span> <span class="mi">1</span><span class="p">])</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="n">tempSeq</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="n">seq</span><span class="p">[</span><span class="n">j</span><span class="p">:</span><span class="n">right</span> <span class="o">+</span> <span class="mi">1</span><span class="p">])</span>
</span><span class='line'>    <span class="n">seq</span><span class="p">[</span><span class="n">left</span><span class="p">:</span><span class="n">right</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">tempSeq</span><span class="p">[:]</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">mergeSortRange</span><span class="p">(</span><span class="n">seq</span><span class="p">,</span> <span class="n">start</span><span class="p">,</span> <span class="n">end</span><span class="p">,</span> <span class="n">threshold</span><span class="p">):</span>
</span><span class='line'>    <span class="err">“””</span>
</span><span class='line'>    <span class="err">归并排序一个序列的子序列</span>
</span><span class='line'>    <span class="n">start</span><span class="p">:</span> <span class="err">子序列的</span><span class="n">start</span><span class="err">下标</span>
</span><span class='line'>    <span class="n">end</span><span class="p">:</span> <span class="err">子序列的</span><span class="n">end</span><span class="err">下标</span>
</span><span class='line'>    <span class="n">threshold</span><span class="p">:</span> <span class="err">待排序长度低于这个值，就采用插入排序</span>
</span><span class='line'>    <span class="err">“””</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">end</span> <span class="o">-</span> <span class="n">start</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">threshold</span><span class="p">:</span>
</span><span class='line'>        <span class="n">tempSeq</span> <span class="o">=</span> <span class="n">seq</span><span class="p">[</span><span class="n">start</span><span class="p">:</span> <span class="n">end</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span>
</span><span class='line'>        <span class="n">insertSort</span><span class="p">(</span><span class="n">tempSeq</span><span class="p">)</span>
</span><span class='line'>        <span class="n">seq</span><span class="p">[</span><span class="n">start</span><span class="p">:</span> <span class="n">end</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">tempSeq</span><span class="p">[:]</span>
</span><span class='line'>    <span class="k">elif</span> <span class="n">start</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">end</span><span class="p">:</span>  <span class="c"># 如果start &amp;gt;= end就终止递归调用</span>
</span><span class='line'>        <span class="n">middle</span> <span class="o">=</span> <span class="p">(</span><span class="n">start</span> <span class="o">+</span> <span class="n">end</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span>
</span><span class='line'>        <span class="n">mergeSortRange</span><span class="p">(</span><span class="n">seq</span><span class="p">,</span> <span class="n">start</span><span class="p">,</span> <span class="n">middle</span><span class="p">,</span> <span class="n">threshold</span><span class="p">)</span>  <span class="c"># 排好左边的一半</span>
</span><span class='line'>        <span class="n">mergeSortRange</span><span class="p">(</span><span class="n">seq</span><span class="p">,</span> <span class="n">middle</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">end</span><span class="p">,</span> <span class="n">threshold</span><span class="p">)</span>  <span class="c"># 再排好右边的一半</span>
</span><span class='line'>        <span class="n">mergeOrderedSeq</span><span class="p">(</span><span class="n">seq</span><span class="p">,</span> <span class="n">start</span><span class="p">,</span> <span class="n">middle</span><span class="p">,</span> <span class="n">end</span><span class="p">)</span>  <span class="c"># 最后合并排序结果&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">if</span> <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">name</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span> <span class="o">==</span> <span class="err">‘</span><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">main</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="err">’</span><span class="p">:</span>
</span><span class='line'>    <span class="n">test</span> <span class="o">=</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">8</span><span class="p">]</span>
</span><span class='line'>    <span class="n">mergeSort</span><span class="p">(</span><span class="n">test</span><span class="p">)</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="n">test</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>
比较清楚，应该不需要再多解释了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[快速排序和二分查找]]></title>
    <link href="http://yidao620c.github.io/blog/20150418/sort-search.html"/>
    <updated>2015-04-18T12:48:25+08:00</updated>
    <id>http://yidao620c.github.io/blog/20150418/sort-search</id>
    <content type="html"><![CDATA[<h3 id="section">快速排序算法和二分搜索算法：</h3>

<p>算法主要分为排序算法、搜索算法、图算法。图算法我用得不多，没有发言权，本文就不说了。</p>

<p>排序算法中最快的是快速排序算法，搜索算法中最快的是二分搜索算法。我也最喜欢这2 个算法。
因为它们是使用递归实现的，代码简洁清晰，效率又非常高。</p>

<p>根据我的理解，算法的本质就是数学。根据输入和设定的目标，采用有限的步骤实现输出。通常，使用计算机实现的算法，都会用到循环，这样才能发挥计算机高速运算的优势。</p>

<p>循环和递归是等效的，这已经被科学家所证明。数学上没有循环，只有递归的概念，因此使用递归代替循环表示算法有很多好处：</p>

<ol>
  <li>递归的代码要比循环简洁很多，也优雅很多。</li>
  <li>递归的代码可以用数学方式建模，可以从数学角度验证其正确性。</li>
</ol>

<p>很多函数式语言甚至没有循环的概念和关键字，强迫你使用递归来实现循环。如，ErLang 。
递归也有一些缺点，递归使用栈来保存函数地址和参数、返回值，而栈是有一定大小的，过多的递归调用可能会造成栈溢出。但是，递归算法会容易转变为循环。我更欣赏递归的简洁，除非真的出现栈溢出的问题，我是不会使用循环的。</p>

<p><br />
<strong>二分搜索算法</strong></p>

<p>理论：</p>

<p>二分搜索算法用于针对已排序的集合进行搜索。</p>

<p>它的原理是：</p>

<ol>
  <li>找到排序数组的中间元素，如果它匹配目标值，那么就返回它在数组中的索引。</li>
  <li>如果没有找到，那么判断中间值比目标值大还是小，
如果中间值比目标值大，那么就对第一个元素到middle-1 的元素递归这个过程。
如果中间值比目标值小，那么就对middle+1 到最后一个元素。</li>
  <li>如果结束的索引小于开始的索引，返回-1 ，表示没有找到。</li>
  <li>如果子集合有2 个元素，那么各自比较。因为Java 的整数除法会舍弃小数，如果数组只有2 个元素，那么middle 值一直都是第一个元素。</li>
</ol>

<p>经过上述的递归过程，最终将返回匹配元素的索引，或者是-1 ，表示找不到。<!--more--></p>

<p>二分搜索算法之所以速度快，是因为它每次可以把数组切分成两半，每次递归调用都能去除一半数据，而不用匹配每一个数据。下面是代码，逻辑清楚，代码简单。
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * @param array</span>
</span><span class='line'><span class="cm"> * @param start</span>
</span><span class='line'><span class="cm"> * @param end</span>
</span><span class='line'><span class="cm"> *            这是最后一个元素的索引，第一次调用应该是array.length - 1</span>
</span><span class='line'><span class="cm"> * @param value</span>
</span><span class='line'><span class="cm"> * @return</span>
</span><span class='line'><span class="cm"> */</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">binarySearch</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">array</span><span class="o">,</span> <span class="kt">int</span> <span class="n">start</span><span class="o">,</span> <span class="kt">int</span> <span class="n">end</span><span class="o">,</span> <span class="kt">int</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">middle</span> <span class="o">=</span> <span class="o">(</span><span class="n">start</span> <span class="o">+</span> <span class="n">end</span><span class="o">)</span> <span class="o">/</span> <span class="mi">2</span><span class="o">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">end</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span> <span class="n">start</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">end</span> <span class="o">==</span> <span class="o">(</span><span class="n">start</span> <span class="o">+</span> <span class="mi">1</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">array</span><span class="o">[</span><span class="n">start</span><span class="o">]</span> <span class="o">==</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">start</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">array</span><span class="o">[</span><span class="n">end</span><span class="o">]</span> <span class="o">==</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">end</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">array</span><span class="o">[</span><span class="n">middle</span><span class="o">]</span> <span class="o">==</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">middle</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">value</span> <span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">array</span><span class="o">[</span><span class="n">middle</span><span class="o">])</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nf">binarySearch</span><span class="o">(</span><span class="n">array</span><span class="o">,</span> <span class="n">middle</span> <span class="o">+</span> <span class="mi">1</span><span class="o">,</span> <span class="n">end</span><span class="o">,</span> <span class="n">value</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">value</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span> <span class="n">array</span><span class="o">[</span><span class="n">middle</span><span class="o">])</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nf">binarySearch</span><span class="o">(</span><span class="n">array</span><span class="o">,</span> <span class="n">start</span><span class="o">,</span> <span class="n">middle</span> <span class="o">-</span> <span class="mi">1</span><span class="o">,</span> <span class="n">value</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
上述代码稍加改变，就可以排序任意类型。如使用泛型，然后加上对Comparable 接口的实现即可。</p>

<p><br />
<strong>快速排序算法</strong></p>

<p>二分搜索算法确实非常快，但是它只能用于已排序数组。如果数组未排序呢，该怎么办呢？简单，先用快速排序算法进行排序，然后再用二分搜索进行搜索。</p>

<p>先排序再搜索，要比匹配每一个元素快得多。搜索引擎，数据库索引也都使用了对数据集合的排序技术，这样搜索数据才会快速。</p>

<p>最慢，也是最容易想到的排序算法是插入排序算法：</p>

<ol>
  <li>遍历数组，找出最小的元素，把它放到第一个元素。</li>
  <li>循环查找未排序的数组，直到整个数组排序。</li>
</ol>

<p>这需要2 个嵌套的循环，意味着它的效率是O(n^2);</p>

<p>之所以插入排序的效率如此之地，是因为要找出整个数组中最小的数据，需要遍历整个数组的元素。</p>

<p>而插入排序聪明就聪明在它不查找整个数组最小、次小… 的元素，而是每次仅仅把小于某个元素的值移到一边，通过迭代最终自动实现排序。这就大大节约了排序所需的计算步骤。</p>

<p><strong>快速排序算法理论：</strong></p>

<ol>
  <li>如果S 中的元素个数是0 或者1 ，那么返回。</li>
  <li>选取S 中的任一元素v ，称为中心点。</li>
  <li>将S 集合中的元素分为2 个部分：L={ 小于pivot 的元素+ pivot } 和R={ 大于或者等于pivot 的元素} 。</li>
  <li>返回L 和R 。</li>
</ol>

<p>我们使用Java 使用的是就地排序的方式，因此不需要返回值。
因为Java 是一种可以修改变量的语言，用函数式语言的术语来说，就是有“副作用”。我们利用这个副作用直接修改作为参数的Array ，不需要返回值</p>

<p>&#8220;` java
/**
 * 快速排序，有副作用 从小到大
 *
 * @param array
 * @param start
 * @param end
 *            这是最后一个元素的索引，第一次调用应该是array.length - 1
 */</p>

<p>public static void quickSort(int[] array, int start, int end) {
    // 有可能造成start&gt;end 因为递归调用时j+1 ，可能引起j 比end 还大1 。 
            // 另外如果数组是空的，或者输入错误也会出现这种情况
    if (end &lt;= start) {
        return;
    } else {
        // 取中间元素为中心点，然后移到最右边
        int sign = (start + end) / 2;
        int tmp = array[end];
        array[end] = array[sign];
        array[sign] = tmp;
        int j = start;
        for (int i = start; i &lt;= end - 1; i++) {
            // 小于的元素和标记互换，等于的不能互换，否则会形成死循环
            if (array[i] &lt; array[end]) {
                tmp = array[i];
                array[i] = array[j];
                array[j] = tmp;
                j = j + 1;
            }
        }
        // 把标记元素和第一个&gt;= 它的元素位置互换
                    // 这样数组就分成2 个部分，一个部分比中心值小，一个部分比中心值大。
        tmp = array[j];
        array[j] = array[end];
        array[end] = tmp;
        quickSort(array, start, j);
        quickSort(array, j + 1, end);
    }
}
&#8220;`</p>

<p><br />
<strong>最后总结：</strong></p>

<ul>
  <li>Java 的Arrays 类也使用快速排序算法进行排序。但它的代码写得像天书一样。</li>
  <li>提高快速排序算法执行效率的主要方法是对中心点进行检测，希望选中的中心点有更大的概率是整个数组的中值。</li>
  <li>我的实现中简单的选择数组中间的值作为中心点，一般来说这样的选择效率还是不错的。</li>
  <li>注意上面的一项实现技术，我们使用把中心数据元素移到数组最后的方式实现了数组的就地比较。这是比较常用的技术，把数据移到数组的最前面或者最后面，方便比较数据。</li>
  <li>另外，我的Java 快速排序代码使用了“副作用”，而在纯函数式语言，如Haskell,ErLang 中是没有“副作用”的，也就是说变量不可以重新赋值。此时就需要返回值，每次都创建新的子数组。但函数式语言的数组处理功能很强，也会做很多性能优化，因此函数式语言实现快速排序代码更加简单，没有“副作用”，也更加数学化。</li>
  <li>JDK使用二分搜索和快速排序算法实现搜索和排序，足见上述两个算法的性能优势。</li>
</ul>
]]></content>
  </entry>
  
</feed>
