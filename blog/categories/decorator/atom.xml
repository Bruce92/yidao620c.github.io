<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类目录：decorator | 笨跑的一刀]]></title>
  <link href="http://yidao620c.github.io/blog/categories/decorator/atom.xml" rel="self"/>
  <link href="http://yidao620c.github.io/"/>
  <updated>2015-04-27T12:09:18+08:00</updated>
  <id>http://yidao620c.github.io/</id>
  <author>
    <name><![CDATA[熊能]]></name>
    <email><![CDATA[yidao620@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[python函数装饰器详解]]></title>
    <link href="http://yidao620c.github.io/blog/20150423/python-decorator.html"/>
    <updated>2015-04-23T10:06:22+08:00</updated>
    <id>http://yidao620c.github.io/blog/20150423/python-decorator</id>
    <content type="html"><![CDATA[<h3 id="section">装饰器简介</h3>
<p>python有着强大的表达式语法和函数特性，其中一个我的最爱便是装饰器。
在设计模式中，装饰器能够在不使用子类的情况下动态的修改函数、方法或类的功能。</p>

<p>当你需要扩展某个函数的功能却不想直接修改这个函数的时候，装饰器就可以派上用场了。
实现装饰器模式有很多种方法，但是python通过强大的语法支持来让这个变得相当容易。</p>

<p>在这篇文章中我将深入讲解Python的函数装饰器，并通过一系列的源码示例来彻底讲清楚这个东西。
所有例子都在Python2.7下运行通过，不过只需要稍作改变就可以运行在Python3上了，
甚至我猜测什么都不用改变都可以的，读者可以自己去试试。</p>

<p>本质上来讲，装饰器是以包装器形式工作的，其实就是在执行目标函数之前或之后加入自己的逻辑，
而不需要改变目标函数本身就可以增强它的功能，也就是说装饰了它。<!--more--></p>

<h3 id="section-1">你需要知道的函数</h3>
<p>在深入讨论之前，有一些基本的概念需要讲明清楚。
在Python中，函数是一等公民，它们就是对象，因此我们可以使用它来做很多事。</p>

<p>1.把函数赋值给某个变量：
&#8220;` python
def greet(name):
    return “hello “+name</p>

<p>greet_someone = greet
print greet_someone(“John”)</p>

<h1 id="outputs-hello-john">Outputs: hello John</h1>
<p>&#8220;`</p>

<p>2.在某个函数内部定义另外一个函数：
&#8220;` python
def greet(name):
    def get_message():
        return “Hello “</p>

<pre><code>result = get_message()+name
return result
</code></pre>

<p>print greet(“John”)</p>

<h1 id="outputs-hello-john-1">Outputs: Hello John</h1>
<p>&#8220;`</p>

<p>3.函数可以被当做参数传递给另外一个函数：
&#8220;` python
def greet(name):
   return “Hello “ + name</p>

<p>def call_func(func):
    other_name = “John”
    return func(other_name)</p>

<p>print call_func(greet)</p>

<h1 id="outputs-hello-john-2">Outputs: Hello John</h1>
<p>&#8220;`</p>

<p>4.函数返回值可以是其他函数：
&#8220;` python
def compose_greet_func():
    def get_message():
        return “Hello there!”</p>

<pre><code>return get_message
</code></pre>

<p>greet = compose_greet_func()
print greet()</p>

<h1 id="outputs-hello-there">Outputs: Hello there!</h1>
<p>&#8220;`</p>

<p>5.内部函数可以访问包含它的函数的局部变量：</p>

<p>其实就是我们所说的闭包，在构建装饰器的时候这是一个非常有用的模式。
另外还要注意，Python只允许读取外部变量而不允许修改。</p>

<p>观察一下下面的代码，
注意我们是如何通过修改上面实例代码来读取外部函数中的name参数值并返回一个新的函数的。
&#8220;` python
def compose_greet_func(name):
    def get_message():
        return “Hello there “+name+”!”</p>

<pre><code>return get_message
</code></pre>

<p>greet = compose_greet_func(“John”)
print greet()</p>

<h1 id="outputs-hello-there-john">Outputs: Hello there John!</h1>
<p>&#8220;`</p>

<h3 id="section-2">构造装饰器</h3>
<p>函数装饰器就是已存在函数的一个包装器。我们把上面的这些结合起来就能构建一个装饰器了。</p>

<p>下面例子中我们先构造一个函数来用p标签包装其他函数返回的一个字符串。
&#8220;` python
def get_text(name):
   return “lorem ipsum, {0} dolor sit amet”.format(name)</p>

<p>def p_decorate(func):
   def func_wrapper(name):
       return “&lt;p&gt;{0}&lt;/p&gt;“.format(func(name))
   return func_wrapper</p>

<p>my_get_text = p_decorate(get_text)</p>

<p>print my_get_text(“John”)</p>

<h1 id="poutputs-lorem-ipsum-john-dolor-sit-ametp">&lt;p&gt;Outputs lorem ipsum, John dolor sit amet&lt;/p&gt;</h1>
<p>&#8220;`</p>

<p>这是我们的第一个装饰器——一个增强其他函数功能并返回新函数的函数。
为了让get_text函数被p_decorate装饰，我们只需要将get_text作为参数传给后者，
并将结果赋值给一个变量，然后就可以对这个变量函数调用就能实现效果了。
&#8220;` python
get_text = p_decorate(get_text)</p>

<p>print get_text(“John”)</p>

<h1 id="outputs-lorem-ipsum-john-dolor-sit-amet">Outputs lorem ipsum, John dolor sit amet</h1>
<p>&#8220;`
主要原来的函数有一个name参数，那么我们调用的时候将这个参数传递给装饰器函数就行了。</p>

<h3 id="python">Python的装饰器语法</h3>
<p>Python通过一些语法糖让创建和使用装饰器变得相当简单。
我们并不需要使用语句<code>get_text = p_decorator(get_text)</code>来装饰get_text。
有一个快捷方式可以做到，它会在被装饰函数前面加一层装饰函数。装饰器的名字需要使用@前缀。
&#8220;` python
def p_decorate(func):
   def func_wrapper(name):
       return “&lt;p&gt;{0}&lt;/p&gt;“.format(func(name))
   return func_wrapper</p>

<p>@p_decorate
def get_text(name):
   return “lorem ipsum, {0} dolor sit amet”.format(name)</p>

<p>print get_text(“John”)</p>

<h1 id="outputs-plorem-ipsum-john-dolor-sit-ametp">Outputs &lt;p&gt;lorem ipsum, John dolor sit amet&lt;/p&gt;</h1>
<p><code>
现在我们再考虑下利用2个其他的函数来装饰我们的get_text函数，在其输出结果上添加一个div和strong标签。
</code> python
def p_decorate(func):
   def func_wrapper(name):
       return “&lt;p&gt;{0}&lt;/p&gt;“.format(func(name))
   return func_wrapper</p>

<p>def strong_decorate(func):
    def func_wrapper(name):
        return “<strong>{0}</strong>“.format(func(name))
    return func_wrapper</p>

<p>def div_decorate(func):
    def func_wrapper(name):
        return “&lt;div&gt;{0}&lt;/div&gt;“.format(func(name))
    return func_wrapper
<code>
如果我们使用原来的语法，那么就得这么写：
</code> python
get_text = div_decorate(p_decorate(strong_decorate(get_text)))
<code>
但是在python中，你就可以这样来定义了：
</code> python
@div_decorate
@p_decorate
@strong_decorate
def get_text(name):
   return “lorem ipsum, {0} dolor sit amet”.format(name)</p>

<p>print get_text(“John”)</p>

<h1 id="outputs-divpstronglorem-ipsum-john-dolor-sit-ametstrongpdiv">Outputs &lt;div&gt;&lt;p&gt;<strong>lorem ipsum, John dolor sit amet</strong>&lt;/p&gt;&lt;/div&gt;</h1>
<p>&#8220;`
上面需要注意的是装饰器的顺序，如果顺序不同，输出结果也会不一样。</p>

<h3 id="section-3">装饰方法</h3>
<p>在python中，其实方法就是第一个参数为当前对象的引用的函数而已。
我们同样能够给方法构造装饰器，只需要将self参数放到包装函数中。
&#8220;` python
def p_decorate(func):
   def func_wrapper(self):
       return “&lt;p&gt;{0}&lt;/p&gt;“.format(func(self))
   return func_wrapper</p>

<p>class Person(object):
    def <strong>init</strong>(self):
        self.name = “John”
        self.family = “Doe”</p>

<pre><code>@p_decorate
def get_fullname(self):
    return self.name+" "+self.family
</code></pre>

<p>my_person = Person()
print my_person.get_fullname()
<code>
一个更好的做法是改造我们的装饰器使他们可以作用于函数以及类方法。
可以将*args和**kwargs作为包装器的参数，然后它就能接受任意数量的位置参数和关键字参数了。
</code> python
def p_decorate(func):
   def func_wrapper(<em>args, **kwargs):
       return “&lt;p&gt;{0}&lt;/p&gt;“.format(func(</em>args, **kwargs))
   return func_wrapper</p>

<p>class Person(object):
    def <strong>init</strong>(self):
        self.name = “John”
        self.family = “Doe”</p>

<pre><code>@p_decorate
def get_fullname(self):
    return self.name+" "+self.family
</code></pre>

<p>my_person = Person()</p>

<p>print my_person.get_fullname()
&#8220;`</p>

<h3 id="section-4">给装饰器传递参数</h3>
<p>回顾下上面的例子，你会发现例子中的装饰器太过冗余了。
3个装饰器(div_decorate,p_decorate, strong_decorate)拥有相同功能，只是使用了不同的标签包装而已。</p>

<p>我们可以做得更好，为什么不使用一种更加通用的方式，将标签作为参数传递进来呢？
&#8220;` python
def tags(tag_name):
    def tags_decorator(func):
        def func_wrapper(name):
            return “&lt;{0}&gt;{1}&lt;/{0}&gt;”.format(tag_name, func(name))
        return func_wrapper
    return tags_decorator</p>

<p>@tags(“p”)
def get_text(name):
    return “Hello “+name</p>

<p>print get_text(“John”)</p>

<h1 id="outputs-phello-johnp">Outputs &lt;p&gt;Hello John&lt;/p&gt;</h1>
<p>&#8220;`</p>

<h3 id="section-5">调试被装饰函数</h3>
<p>最后当我们调试被装饰函数时会发现它的名字、模块和文档字符串都发生了改变。
<code>python
print get_text.__name__
# Outputs func_wrapper
</code>
我们期望的输出应该是get_text，get_text的__name__、<strong>doc</strong> 和 __module__已经被包装函数覆盖了。</p>

<h3 id="functools">使用functools来解决</h3>
<p>幸运的是python2.5版本以上有了一个functools包可以来解决这个问题。
只需要简单在包装函数上标注@wrap标签即可。
&#8220;` python
from functools import wraps</p>

<p>def tags(tag_name):
    def tags_decorator(func):
        @wraps(func)
        def func_wrapper(name):
            return “&lt;{0}&gt;{1}&lt;/{0}&gt;”.format(tag_name, func(name))
        return func_wrapper
    return tags_decorator</p>

<p>@tags(“p”)
def get_text(name):
    “&#8221;”returns some text”””
    return “Hello “+name</p>

<p>print get_text.<strong>name</strong> # get_text
print get_text.<strong>doc</strong> # returns some text
print get_text.<strong>module</strong> # <strong>main</strong>
&#8220;`
从结果可以看出get_text函数的属性都恢复正常了。</p>

<h3 id="section-6">哪里使用装饰器</h3>
<p>这篇文章中的例子相对来讲是比较简单的。它能给你的程序带来很大的方便。
一般来讲，装饰器用在需要扩展某个函数行为而又不想改变这个函数本身内容的时候。</p>

<p>我建议你查阅一下Python Decorator库来获取更多非常有用的装饰器。</p>

<h3 id="section-7">更多阅读资源</h3>
<p>下面是一个值得去查看的关于装饰器的其他资源列表：</p>

<ul>
  <li><a href="https://wiki.python.org/moin/PythonDecorators#What_is_a_Decorator">什么是装饰器?</a></li>
  <li><a href="http://www.artima.com/weblogs/viewpost.jsp?thread=240808">Decorators I: Python装饰器入门</a></li>
  <li><a href="http://www.artima.com/weblogs/viewpost.jsp?thread=240845">Python Decorators II: 装饰器参数</a></li>
  <li><a href="http://www.artima.com/weblogs/viewpost.jsp?thread=241209">Python Decorators III: 一个基于装饰器的构建系统</a></li>
  <li><a href="http://www.amazon.com/gp/product/B006ZHJSIM/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=B006ZHJSIM&amp;linkCode=as2&amp;tag=thcosh00-20">Python装饰器指南 Matt Harrison</a></li>
</ul>

<p>到此为止Python装饰器概率已经介绍完了。我希望你能从中受益，
如果你哈有任何的建议或问题，可以在评论中提出来。祝您编程快乐！</p>

]]></content>
  </entry>
  
</feed>
